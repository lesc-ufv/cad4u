// Generated by astgen // -*- mode: C++; c-file-style: "cc-mode" -*-
#define ASTGEN_MEMBERS_DfgAcosD \
    static constexpr VDfgType dfgType() { return VDfgType::atAcosD; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgAcoshD \
    static constexpr VDfgType dfgType() { return VDfgType::atAcoshD; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgAdd \
    static constexpr VDfgType dfgType() { return VDfgType::atAdd; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgAddD \
    static constexpr VDfgType dfgType() { return VDfgType::atAddD; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgAnd \
    static constexpr VDfgType dfgType() { return VDfgType::atAnd; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgArraySel \
    static constexpr VDfgType dfgType() { return VDfgType::atArraySel; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* fromp() const { return source<0>(); } \
    void fromp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* bitp() const { return source<1>(); } \
    void bitp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "fromp", "bitp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgAsinD \
    static constexpr VDfgType dfgType() { return VDfgType::atAsinD; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgAsinhD \
    static constexpr VDfgType dfgType() { return VDfgType::atAsinhD; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgAssocSel \
    static constexpr VDfgType dfgType() { return VDfgType::atAssocSel; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* fromp() const { return source<0>(); } \
    void fromp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* bitp() const { return source<1>(); } \
    void bitp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "fromp", "bitp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgAtan2D \
    static constexpr VDfgType dfgType() { return VDfgType::atAtan2D; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgAtanD \
    static constexpr VDfgType dfgType() { return VDfgType::atAtanD; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgAtanhD \
    static constexpr VDfgType dfgType() { return VDfgType::atAtanhD; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgAtoN \
    static constexpr VDfgType dfgType() { return VDfgType::atAtoN; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgBitsToRealD \
    static constexpr VDfgType dfgType() { return VDfgType::atBitsToRealD; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgBufIf1 \
    static constexpr VDfgType dfgType() { return VDfgType::atBufIf1; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgCAwait \
    static constexpr VDfgType dfgType() { return VDfgType::atCAwait; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* exprp() const { return source<0>(); } \
    void exprp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "exprp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgCCast \
    static constexpr VDfgType dfgType() { return VDfgType::atCCast; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgCLog2 \
    static constexpr VDfgType dfgType() { return VDfgType::atCLog2; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgCastDynamic \
    static constexpr VDfgType dfgType() { return VDfgType::atCastDynamic; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* fromp() const { return source<0>(); } \
    void fromp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* top() const { return source<1>(); } \
    void top(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "fromp", "top" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgCastWrap \
    static constexpr VDfgType dfgType() { return VDfgType::atCastWrap; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgCeilD \
    static constexpr VDfgType dfgType() { return VDfgType::atCeilD; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgCompareNN \
    static constexpr VDfgType dfgType() { return VDfgType::atCompareNN; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgConcat \
    static constexpr VDfgType dfgType() { return VDfgType::atConcat; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgConcatN \
    static constexpr VDfgType dfgType() { return VDfgType::atConcatN; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgCond \
    static constexpr VDfgType dfgType() { return VDfgType::atCond; }; \
    using Super = DfgVertexTernary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* condp() const { return source<0>(); } \
    void condp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* thenp() const { return source<1>(); } \
    void thenp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    DfgVertex* elsep() const { return source<2>(); } \
    void elsep(DfgVertex* vtxp) { relinkSource<2>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[3] = { "condp", "thenp", "elsep" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgCondBound \
    static constexpr VDfgType dfgType() { return VDfgType::atCondBound; }; \
    using Super = DfgVertexTernary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* condp() const { return source<0>(); } \
    void condp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* thenp() const { return source<1>(); } \
    void thenp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    DfgVertex* elsep() const { return source<2>(); } \
    void elsep(DfgVertex* vtxp) { relinkSource<2>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[3] = { "condp", "thenp", "elsep" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgConst \
    static constexpr VDfgType dfgType() { return VDfgType::atConst; }; \
    using Super = DfgVertex; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgCosD \
    static constexpr VDfgType dfgType() { return VDfgType::atCosD; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgCoshD \
    static constexpr VDfgType dfgType() { return VDfgType::atCoshD; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgCountOnes \
    static constexpr VDfgType dfgType() { return VDfgType::atCountOnes; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgCvtPackString \
    static constexpr VDfgType dfgType() { return VDfgType::atCvtPackString; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgDistChiSquare \
    static constexpr VDfgType dfgType() { return VDfgType::atDistChiSquare; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgDistErlang \
    static constexpr VDfgType dfgType() { return VDfgType::atDistErlang; }; \
    using Super = DfgVertexTernary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    DfgVertex* thsp() const { return source<2>(); } \
    void thsp(DfgVertex* vtxp) { relinkSource<2>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[3] = { "lhsp", "rhsp", "thsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgDistExponential \
    static constexpr VDfgType dfgType() { return VDfgType::atDistExponential; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgDistNormal \
    static constexpr VDfgType dfgType() { return VDfgType::atDistNormal; }; \
    using Super = DfgVertexTernary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    DfgVertex* thsp() const { return source<2>(); } \
    void thsp(DfgVertex* vtxp) { relinkSource<2>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[3] = { "lhsp", "rhsp", "thsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgDistPoisson \
    static constexpr VDfgType dfgType() { return VDfgType::atDistPoisson; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgDistT \
    static constexpr VDfgType dfgType() { return VDfgType::atDistT; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgDistUniform \
    static constexpr VDfgType dfgType() { return VDfgType::atDistUniform; }; \
    using Super = DfgVertexTernary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    DfgVertex* thsp() const { return source<2>(); } \
    void thsp(DfgVertex* vtxp) { relinkSource<2>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[3] = { "lhsp", "rhsp", "thsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgDiv \
    static constexpr VDfgType dfgType() { return VDfgType::atDiv; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgDivD \
    static constexpr VDfgType dfgType() { return VDfgType::atDivD; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgDivS \
    static constexpr VDfgType dfgType() { return VDfgType::atDivS; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgEq \
    static constexpr VDfgType dfgType() { return VDfgType::atEq; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgEqCase \
    static constexpr VDfgType dfgType() { return VDfgType::atEqCase; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgEqD \
    static constexpr VDfgType dfgType() { return VDfgType::atEqD; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgEqN \
    static constexpr VDfgType dfgType() { return VDfgType::atEqN; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgEqT \
    static constexpr VDfgType dfgType() { return VDfgType::atEqT; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgEqWild \
    static constexpr VDfgType dfgType() { return VDfgType::atEqWild; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgExpD \
    static constexpr VDfgType dfgType() { return VDfgType::atExpD; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgExtend \
    static constexpr VDfgType dfgType() { return VDfgType::atExtend; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgExtendS \
    static constexpr VDfgType dfgType() { return VDfgType::atExtendS; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgFEof \
    static constexpr VDfgType dfgType() { return VDfgType::atFEof; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgFGetC \
    static constexpr VDfgType dfgType() { return VDfgType::atFGetC; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgFGetS \
    static constexpr VDfgType dfgType() { return VDfgType::atFGetS; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgFUngetC \
    static constexpr VDfgType dfgType() { return VDfgType::atFUngetC; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgFloorD \
    static constexpr VDfgType dfgType() { return VDfgType::atFloorD; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgGetcN \
    static constexpr VDfgType dfgType() { return VDfgType::atGetcN; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgGetcRefN \
    static constexpr VDfgType dfgType() { return VDfgType::atGetcRefN; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgGt \
    static constexpr VDfgType dfgType() { return VDfgType::atGt; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgGtD \
    static constexpr VDfgType dfgType() { return VDfgType::atGtD; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgGtN \
    static constexpr VDfgType dfgType() { return VDfgType::atGtN; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgGtS \
    static constexpr VDfgType dfgType() { return VDfgType::atGtS; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgGte \
    static constexpr VDfgType dfgType() { return VDfgType::atGte; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgGteD \
    static constexpr VDfgType dfgType() { return VDfgType::atGteD; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgGteN \
    static constexpr VDfgType dfgType() { return VDfgType::atGteN; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgGteS \
    static constexpr VDfgType dfgType() { return VDfgType::atGteS; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgHypotD \
    static constexpr VDfgType dfgType() { return VDfgType::atHypotD; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgISToRD \
    static constexpr VDfgType dfgType() { return VDfgType::atISToRD; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgIToRD \
    static constexpr VDfgType dfgType() { return VDfgType::atIToRD; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgIsUnbounded \
    static constexpr VDfgType dfgType() { return VDfgType::atIsUnbounded; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgIsUnknown \
    static constexpr VDfgType dfgType() { return VDfgType::atIsUnknown; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgLenN \
    static constexpr VDfgType dfgType() { return VDfgType::atLenN; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgLog10D \
    static constexpr VDfgType dfgType() { return VDfgType::atLog10D; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgLogAnd \
    static constexpr VDfgType dfgType() { return VDfgType::atLogAnd; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgLogD \
    static constexpr VDfgType dfgType() { return VDfgType::atLogD; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgLogEq \
    static constexpr VDfgType dfgType() { return VDfgType::atLogEq; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgLogIf \
    static constexpr VDfgType dfgType() { return VDfgType::atLogIf; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgLogNot \
    static constexpr VDfgType dfgType() { return VDfgType::atLogNot; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgLogOr \
    static constexpr VDfgType dfgType() { return VDfgType::atLogOr; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgLt \
    static constexpr VDfgType dfgType() { return VDfgType::atLt; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgLtD \
    static constexpr VDfgType dfgType() { return VDfgType::atLtD; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgLtN \
    static constexpr VDfgType dfgType() { return VDfgType::atLtN; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgLtS \
    static constexpr VDfgType dfgType() { return VDfgType::atLtS; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgLte \
    static constexpr VDfgType dfgType() { return VDfgType::atLte; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgLteD \
    static constexpr VDfgType dfgType() { return VDfgType::atLteD; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgLteN \
    static constexpr VDfgType dfgType() { return VDfgType::atLteN; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgLteS \
    static constexpr VDfgType dfgType() { return VDfgType::atLteS; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgModDiv \
    static constexpr VDfgType dfgType() { return VDfgType::atModDiv; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgModDivS \
    static constexpr VDfgType dfgType() { return VDfgType::atModDivS; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgMul \
    static constexpr VDfgType dfgType() { return VDfgType::atMul; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgMulD \
    static constexpr VDfgType dfgType() { return VDfgType::atMulD; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgMulS \
    static constexpr VDfgType dfgType() { return VDfgType::atMulS; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgMux \
    static constexpr VDfgType dfgType() { return VDfgType::atMux; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgNToI \
    static constexpr VDfgType dfgType() { return VDfgType::atNToI; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgNegate \
    static constexpr VDfgType dfgType() { return VDfgType::atNegate; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgNegateD \
    static constexpr VDfgType dfgType() { return VDfgType::atNegateD; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgNeq \
    static constexpr VDfgType dfgType() { return VDfgType::atNeq; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgNeqCase \
    static constexpr VDfgType dfgType() { return VDfgType::atNeqCase; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgNeqD \
    static constexpr VDfgType dfgType() { return VDfgType::atNeqD; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgNeqN \
    static constexpr VDfgType dfgType() { return VDfgType::atNeqN; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgNeqT \
    static constexpr VDfgType dfgType() { return VDfgType::atNeqT; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgNeqWild \
    static constexpr VDfgType dfgType() { return VDfgType::atNeqWild; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgNot \
    static constexpr VDfgType dfgType() { return VDfgType::atNot; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgNullCheck \
    static constexpr VDfgType dfgType() { return VDfgType::atNullCheck; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgOneHot \
    static constexpr VDfgType dfgType() { return VDfgType::atOneHot; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgOneHot0 \
    static constexpr VDfgType dfgType() { return VDfgType::atOneHot0; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgOr \
    static constexpr VDfgType dfgType() { return VDfgType::atOr; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgPostAdd \
    static constexpr VDfgType dfgType() { return VDfgType::atPostAdd; }; \
    using Super = DfgVertexTernary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    DfgVertex* thsp() const { return source<2>(); } \
    void thsp(DfgVertex* vtxp) { relinkSource<2>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[3] = { "lhsp", "rhsp", "thsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgPostSub \
    static constexpr VDfgType dfgType() { return VDfgType::atPostSub; }; \
    using Super = DfgVertexTernary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    DfgVertex* thsp() const { return source<2>(); } \
    void thsp(DfgVertex* vtxp) { relinkSource<2>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[3] = { "lhsp", "rhsp", "thsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgPow \
    static constexpr VDfgType dfgType() { return VDfgType::atPow; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgPowD \
    static constexpr VDfgType dfgType() { return VDfgType::atPowD; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgPowSS \
    static constexpr VDfgType dfgType() { return VDfgType::atPowSS; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgPowSU \
    static constexpr VDfgType dfgType() { return VDfgType::atPowSU; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgPowUS \
    static constexpr VDfgType dfgType() { return VDfgType::atPowUS; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgPreAdd \
    static constexpr VDfgType dfgType() { return VDfgType::atPreAdd; }; \
    using Super = DfgVertexTernary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    DfgVertex* thsp() const { return source<2>(); } \
    void thsp(DfgVertex* vtxp) { relinkSource<2>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[3] = { "lhsp", "rhsp", "thsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgPreSub \
    static constexpr VDfgType dfgType() { return VDfgType::atPreSub; }; \
    using Super = DfgVertexTernary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    DfgVertex* thsp() const { return source<2>(); } \
    void thsp(DfgVertex* vtxp) { relinkSource<2>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[3] = { "lhsp", "rhsp", "thsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgPutcN \
    static constexpr VDfgType dfgType() { return VDfgType::atPutcN; }; \
    using Super = DfgVertexTernary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    DfgVertex* thsp() const { return source<2>(); } \
    void thsp(DfgVertex* vtxp) { relinkSource<2>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[3] = { "lhsp", "rhsp", "thsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgRToIRoundS \
    static constexpr VDfgType dfgType() { return VDfgType::atRToIRoundS; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgRToIS \
    static constexpr VDfgType dfgType() { return VDfgType::atRToIS; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgRealToBits \
    static constexpr VDfgType dfgType() { return VDfgType::atRealToBits; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgRedAnd \
    static constexpr VDfgType dfgType() { return VDfgType::atRedAnd; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgRedOr \
    static constexpr VDfgType dfgType() { return VDfgType::atRedOr; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgRedXor \
    static constexpr VDfgType dfgType() { return VDfgType::atRedXor; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgReplicate \
    static constexpr VDfgType dfgType() { return VDfgType::atReplicate; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* srcp() const { return source<0>(); } \
    void srcp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* countp() const { return source<1>(); } \
    void countp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "srcp", "countp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgReplicateN \
    static constexpr VDfgType dfgType() { return VDfgType::atReplicateN; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgResizeLValue \
    static constexpr VDfgType dfgType() { return VDfgType::atResizeLValue; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgSel \
    static constexpr VDfgType dfgType() { return VDfgType::atSel; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgShiftL \
    static constexpr VDfgType dfgType() { return VDfgType::atShiftL; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgShiftLOvr \
    static constexpr VDfgType dfgType() { return VDfgType::atShiftLOvr; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgShiftR \
    static constexpr VDfgType dfgType() { return VDfgType::atShiftR; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgShiftROvr \
    static constexpr VDfgType dfgType() { return VDfgType::atShiftROvr; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgShiftRS \
    static constexpr VDfgType dfgType() { return VDfgType::atShiftRS; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgShiftRSOvr \
    static constexpr VDfgType dfgType() { return VDfgType::atShiftRSOvr; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgSigned \
    static constexpr VDfgType dfgType() { return VDfgType::atSigned; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgSinD \
    static constexpr VDfgType dfgType() { return VDfgType::atSinD; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgSinhD \
    static constexpr VDfgType dfgType() { return VDfgType::atSinhD; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgSliceSel \
    static constexpr VDfgType dfgType() { return VDfgType::atSliceSel; }; \
    using Super = DfgVertexTernary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* fromp() const { return source<0>(); } \
    void fromp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    DfgVertex* thsp() const { return source<2>(); } \
    void thsp(DfgVertex* vtxp) { relinkSource<2>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[3] = { "fromp", "rhsp", "thsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgSqrtD \
    static constexpr VDfgType dfgType() { return VDfgType::atSqrtD; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgStreamL \
    static constexpr VDfgType dfgType() { return VDfgType::atStreamL; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgStreamR \
    static constexpr VDfgType dfgType() { return VDfgType::atStreamR; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgSub \
    static constexpr VDfgType dfgType() { return VDfgType::atSub; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgSubD \
    static constexpr VDfgType dfgType() { return VDfgType::atSubD; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgSubstrN \
    static constexpr VDfgType dfgType() { return VDfgType::atSubstrN; }; \
    using Super = DfgVertexTernary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    DfgVertex* thsp() const { return source<2>(); } \
    void thsp(DfgVertex* vtxp) { relinkSource<2>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[3] = { "lhsp", "rhsp", "thsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgTanD \
    static constexpr VDfgType dfgType() { return VDfgType::atTanD; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgTanhD \
    static constexpr VDfgType dfgType() { return VDfgType::atTanhD; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgTimeImport \
    static constexpr VDfgType dfgType() { return VDfgType::atTimeImport; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgToLowerN \
    static constexpr VDfgType dfgType() { return VDfgType::atToLowerN; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgToUpperN \
    static constexpr VDfgType dfgType() { return VDfgType::atToUpperN; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgURandomRange \
    static constexpr VDfgType dfgType() { return VDfgType::atURandomRange; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgUnsigned \
    static constexpr VDfgType dfgType() { return VDfgType::atUnsigned; }; \
    using Super = DfgVertexUnary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[1] = { "lhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgVarArray \
    static constexpr VDfgType dfgType() { return VDfgType::atVarArray; }; \
    using Super = DfgVertexVar; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgVarPacked \
    static constexpr VDfgType dfgType() { return VDfgType::atVarPacked; }; \
    using Super = DfgVertexVar; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgVertex \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgVertexBinary \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgVertexTernary \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgVertexUnary \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgVertexVar \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgVertexVariadic \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgWildcardSel \
    static constexpr VDfgType dfgType() { return VDfgType::atWildcardSel; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* fromp() const { return source<0>(); } \
    void fromp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* bitp() const { return source<1>(); } \
    void bitp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "fromp", "bitp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgWordSel \
    static constexpr VDfgType dfgType() { return VDfgType::atWordSel; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* fromp() const { return source<0>(); } \
    void fromp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* bitp() const { return source<1>(); } \
    void bitp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "fromp", "bitp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
#define ASTGEN_MEMBERS_DfgXor \
    static constexpr VDfgType dfgType() { return VDfgType::atXor; }; \
    using Super = DfgVertexBinary; \
    void accept(DfgVisitor& v) override { v.visit(this); } \
    DfgVertex* lhsp() const { return source<0>(); } \
    void lhsp(DfgVertex* vtxp) { relinkSource<0>(vtxp); } \
    DfgVertex* rhsp() const { return source<1>(); } \
    void rhsp(DfgVertex* vtxp) { relinkSource<1>(vtxp); } \
    const std::string srcName(size_t idx) const override { \
        static const char* names[2] = { "lhsp", "rhsp" }; \
        return names[idx]; \
    } \
    static_assert(true, "")
