// Generated by astgen // -*- mode: C++; c-file-style: "cc-mode" -*-
void visit(DfgAcosD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstAcosD>(vtxp, op1p);
}
void visit(DfgAcoshD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstAcoshD>(vtxp, op1p);
}
void visit(DfgAdd* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstAdd>(vtxp, op1p, op2p);
}
void visit(DfgAddD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstAddD>(vtxp, op1p, op2p);
}
void visit(DfgAnd* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstAnd>(vtxp, op1p, op2p);
}
void visit(DfgArraySel* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstArraySel>(vtxp, op1p, op2p);
}
void visit(DfgAsinD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstAsinD>(vtxp, op1p);
}
void visit(DfgAsinhD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstAsinhD>(vtxp, op1p);
}
void visit(DfgAssocSel* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstAssocSel>(vtxp, op1p, op2p);
}
void visit(DfgAtan2D* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstAtan2D>(vtxp, op1p, op2p);
}
void visit(DfgAtanD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstAtanD>(vtxp, op1p);
}
void visit(DfgAtanhD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstAtanhD>(vtxp, op1p);
}
void visit(DfgAtoN* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstAtoN>(vtxp, op1p);
}
void visit(DfgBitsToRealD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstBitsToRealD>(vtxp, op1p);
}
void visit(DfgBufIf1* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstBufIf1>(vtxp, op1p, op2p);
}
void visit(DfgCAwait* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstCAwait>(vtxp, op1p);
}
void visit(DfgCCast* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstCCast>(vtxp, op1p);
}
void visit(DfgCLog2* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstCLog2>(vtxp, op1p);
}
void visit(DfgCastDynamic* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstCastDynamic>(vtxp, op1p, op2p);
}
void visit(DfgCastWrap* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstCastWrap>(vtxp, op1p);
}
void visit(DfgCeilD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstCeilD>(vtxp, op1p);
}
void visit(DfgCompareNN* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstCompareNN>(vtxp, op1p, op2p);
}
void visit(DfgConcat* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstConcat>(vtxp, op1p, op2p);
}
void visit(DfgConcatN* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstConcatN>(vtxp, op1p, op2p);
}
void visit(DfgCond* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    AstNodeExpr* const op3p = convertDfgVertexToAstNodeExpr(vtxp->source<2>());
    m_resultp = makeNode<AstCond>(vtxp, op1p, op2p, op3p);
}
void visit(DfgCondBound* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    AstNodeExpr* const op3p = convertDfgVertexToAstNodeExpr(vtxp->source<2>());
    m_resultp = makeNode<AstCondBound>(vtxp, op1p, op2p, op3p);
}
void visit(DfgCosD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstCosD>(vtxp, op1p);
}
void visit(DfgCoshD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstCoshD>(vtxp, op1p);
}
void visit(DfgCountOnes* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstCountOnes>(vtxp, op1p);
}
void visit(DfgCvtPackString* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstCvtPackString>(vtxp, op1p);
}
void visit(DfgDistChiSquare* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstDistChiSquare>(vtxp, op1p, op2p);
}
void visit(DfgDistErlang* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    AstNodeExpr* const op3p = convertDfgVertexToAstNodeExpr(vtxp->source<2>());
    m_resultp = makeNode<AstDistErlang>(vtxp, op1p, op2p, op3p);
}
void visit(DfgDistExponential* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstDistExponential>(vtxp, op1p, op2p);
}
void visit(DfgDistNormal* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    AstNodeExpr* const op3p = convertDfgVertexToAstNodeExpr(vtxp->source<2>());
    m_resultp = makeNode<AstDistNormal>(vtxp, op1p, op2p, op3p);
}
void visit(DfgDistPoisson* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstDistPoisson>(vtxp, op1p, op2p);
}
void visit(DfgDistT* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstDistT>(vtxp, op1p, op2p);
}
void visit(DfgDistUniform* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    AstNodeExpr* const op3p = convertDfgVertexToAstNodeExpr(vtxp->source<2>());
    m_resultp = makeNode<AstDistUniform>(vtxp, op1p, op2p, op3p);
}
void visit(DfgDiv* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstDiv>(vtxp, op1p, op2p);
}
void visit(DfgDivD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstDivD>(vtxp, op1p, op2p);
}
void visit(DfgDivS* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstDivS>(vtxp, op1p, op2p);
}
void visit(DfgEq* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstEq>(vtxp, op1p, op2p);
}
void visit(DfgEqCase* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstEqCase>(vtxp, op1p, op2p);
}
void visit(DfgEqD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstEqD>(vtxp, op1p, op2p);
}
void visit(DfgEqN* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstEqN>(vtxp, op1p, op2p);
}
void visit(DfgEqT* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstEqT>(vtxp, op1p, op2p);
}
void visit(DfgEqWild* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstEqWild>(vtxp, op1p, op2p);
}
void visit(DfgExpD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstExpD>(vtxp, op1p);
}
void visit(DfgExtend* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstExtend>(vtxp, op1p);
}
void visit(DfgExtendS* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstExtendS>(vtxp, op1p);
}
void visit(DfgFEof* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstFEof>(vtxp, op1p);
}
void visit(DfgFGetC* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstFGetC>(vtxp, op1p);
}
void visit(DfgFGetS* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstFGetS>(vtxp, op1p, op2p);
}
void visit(DfgFUngetC* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstFUngetC>(vtxp, op1p, op2p);
}
void visit(DfgFloorD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstFloorD>(vtxp, op1p);
}
void visit(DfgGetcN* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstGetcN>(vtxp, op1p, op2p);
}
void visit(DfgGetcRefN* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstGetcRefN>(vtxp, op1p, op2p);
}
void visit(DfgGt* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstGt>(vtxp, op1p, op2p);
}
void visit(DfgGtD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstGtD>(vtxp, op1p, op2p);
}
void visit(DfgGtN* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstGtN>(vtxp, op1p, op2p);
}
void visit(DfgGtS* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstGtS>(vtxp, op1p, op2p);
}
void visit(DfgGte* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstGte>(vtxp, op1p, op2p);
}
void visit(DfgGteD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstGteD>(vtxp, op1p, op2p);
}
void visit(DfgGteN* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstGteN>(vtxp, op1p, op2p);
}
void visit(DfgGteS* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstGteS>(vtxp, op1p, op2p);
}
void visit(DfgHypotD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstHypotD>(vtxp, op1p, op2p);
}
void visit(DfgISToRD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstISToRD>(vtxp, op1p);
}
void visit(DfgIToRD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstIToRD>(vtxp, op1p);
}
void visit(DfgIsUnbounded* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstIsUnbounded>(vtxp, op1p);
}
void visit(DfgIsUnknown* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstIsUnknown>(vtxp, op1p);
}
void visit(DfgLenN* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstLenN>(vtxp, op1p);
}
void visit(DfgLog10D* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstLog10D>(vtxp, op1p);
}
void visit(DfgLogAnd* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstLogAnd>(vtxp, op1p, op2p);
}
void visit(DfgLogD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstLogD>(vtxp, op1p);
}
void visit(DfgLogEq* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstLogEq>(vtxp, op1p, op2p);
}
void visit(DfgLogIf* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstLogIf>(vtxp, op1p, op2p);
}
void visit(DfgLogNot* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstLogNot>(vtxp, op1p);
}
void visit(DfgLogOr* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstLogOr>(vtxp, op1p, op2p);
}
void visit(DfgLt* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstLt>(vtxp, op1p, op2p);
}
void visit(DfgLtD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstLtD>(vtxp, op1p, op2p);
}
void visit(DfgLtN* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstLtN>(vtxp, op1p, op2p);
}
void visit(DfgLtS* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstLtS>(vtxp, op1p, op2p);
}
void visit(DfgLte* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstLte>(vtxp, op1p, op2p);
}
void visit(DfgLteD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstLteD>(vtxp, op1p, op2p);
}
void visit(DfgLteN* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstLteN>(vtxp, op1p, op2p);
}
void visit(DfgLteS* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstLteS>(vtxp, op1p, op2p);
}
void visit(DfgModDiv* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstModDiv>(vtxp, op1p, op2p);
}
void visit(DfgModDivS* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstModDivS>(vtxp, op1p, op2p);
}
void visit(DfgMul* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstMul>(vtxp, op1p, op2p);
}
void visit(DfgMulD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstMulD>(vtxp, op1p, op2p);
}
void visit(DfgMulS* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstMulS>(vtxp, op1p, op2p);
}
void visit(DfgNToI* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstNToI>(vtxp, op1p);
}
void visit(DfgNegate* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstNegate>(vtxp, op1p);
}
void visit(DfgNegateD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstNegateD>(vtxp, op1p);
}
void visit(DfgNeq* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstNeq>(vtxp, op1p, op2p);
}
void visit(DfgNeqCase* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstNeqCase>(vtxp, op1p, op2p);
}
void visit(DfgNeqD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstNeqD>(vtxp, op1p, op2p);
}
void visit(DfgNeqN* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstNeqN>(vtxp, op1p, op2p);
}
void visit(DfgNeqT* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstNeqT>(vtxp, op1p, op2p);
}
void visit(DfgNeqWild* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstNeqWild>(vtxp, op1p, op2p);
}
void visit(DfgNot* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstNot>(vtxp, op1p);
}
void visit(DfgNullCheck* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstNullCheck>(vtxp, op1p);
}
void visit(DfgOneHot* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstOneHot>(vtxp, op1p);
}
void visit(DfgOneHot0* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstOneHot0>(vtxp, op1p);
}
void visit(DfgOr* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstOr>(vtxp, op1p, op2p);
}
void visit(DfgPostAdd* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    AstNodeExpr* const op3p = convertDfgVertexToAstNodeExpr(vtxp->source<2>());
    m_resultp = makeNode<AstPostAdd>(vtxp, op1p, op2p, op3p);
}
void visit(DfgPostSub* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    AstNodeExpr* const op3p = convertDfgVertexToAstNodeExpr(vtxp->source<2>());
    m_resultp = makeNode<AstPostSub>(vtxp, op1p, op2p, op3p);
}
void visit(DfgPow* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstPow>(vtxp, op1p, op2p);
}
void visit(DfgPowD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstPowD>(vtxp, op1p, op2p);
}
void visit(DfgPowSS* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstPowSS>(vtxp, op1p, op2p);
}
void visit(DfgPowSU* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstPowSU>(vtxp, op1p, op2p);
}
void visit(DfgPowUS* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstPowUS>(vtxp, op1p, op2p);
}
void visit(DfgPreAdd* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    AstNodeExpr* const op3p = convertDfgVertexToAstNodeExpr(vtxp->source<2>());
    m_resultp = makeNode<AstPreAdd>(vtxp, op1p, op2p, op3p);
}
void visit(DfgPreSub* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    AstNodeExpr* const op3p = convertDfgVertexToAstNodeExpr(vtxp->source<2>());
    m_resultp = makeNode<AstPreSub>(vtxp, op1p, op2p, op3p);
}
void visit(DfgPutcN* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    AstNodeExpr* const op3p = convertDfgVertexToAstNodeExpr(vtxp->source<2>());
    m_resultp = makeNode<AstPutcN>(vtxp, op1p, op2p, op3p);
}
void visit(DfgRToIRoundS* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstRToIRoundS>(vtxp, op1p);
}
void visit(DfgRToIS* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstRToIS>(vtxp, op1p);
}
void visit(DfgRealToBits* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstRealToBits>(vtxp, op1p);
}
void visit(DfgRedAnd* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstRedAnd>(vtxp, op1p);
}
void visit(DfgRedOr* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstRedOr>(vtxp, op1p);
}
void visit(DfgRedXor* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstRedXor>(vtxp, op1p);
}
void visit(DfgReplicate* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstReplicate>(vtxp, op1p, op2p);
}
void visit(DfgReplicateN* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstReplicateN>(vtxp, op1p, op2p);
}
void visit(DfgResizeLValue* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstResizeLValue>(vtxp, op1p);
}
void visit(DfgShiftL* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstShiftL>(vtxp, op1p, op2p);
}
void visit(DfgShiftLOvr* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstShiftLOvr>(vtxp, op1p, op2p);
}
void visit(DfgShiftR* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstShiftR>(vtxp, op1p, op2p);
}
void visit(DfgShiftROvr* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstShiftROvr>(vtxp, op1p, op2p);
}
void visit(DfgShiftRS* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstShiftRS>(vtxp, op1p, op2p);
}
void visit(DfgShiftRSOvr* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstShiftRSOvr>(vtxp, op1p, op2p);
}
void visit(DfgSigned* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstSigned>(vtxp, op1p);
}
void visit(DfgSinD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstSinD>(vtxp, op1p);
}
void visit(DfgSinhD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstSinhD>(vtxp, op1p);
}
void visit(DfgSliceSel* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    AstNodeExpr* const op3p = convertDfgVertexToAstNodeExpr(vtxp->source<2>());
    m_resultp = makeNode<AstSliceSel>(vtxp, op1p, op2p, op3p);
}
void visit(DfgSqrtD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstSqrtD>(vtxp, op1p);
}
void visit(DfgStreamL* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstStreamL>(vtxp, op1p, op2p);
}
void visit(DfgStreamR* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstStreamR>(vtxp, op1p, op2p);
}
void visit(DfgSub* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstSub>(vtxp, op1p, op2p);
}
void visit(DfgSubD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstSubD>(vtxp, op1p, op2p);
}
void visit(DfgSubstrN* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    AstNodeExpr* const op3p = convertDfgVertexToAstNodeExpr(vtxp->source<2>());
    m_resultp = makeNode<AstSubstrN>(vtxp, op1p, op2p, op3p);
}
void visit(DfgTanD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstTanD>(vtxp, op1p);
}
void visit(DfgTanhD* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstTanhD>(vtxp, op1p);
}
void visit(DfgTimeImport* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstTimeImport>(vtxp, op1p);
}
void visit(DfgToLowerN* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstToLowerN>(vtxp, op1p);
}
void visit(DfgToUpperN* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstToUpperN>(vtxp, op1p);
}
void visit(DfgURandomRange* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstURandomRange>(vtxp, op1p, op2p);
}
void visit(DfgUnsigned* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    m_resultp = makeNode<AstUnsigned>(vtxp, op1p);
}
void visit(DfgWildcardSel* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstWildcardSel>(vtxp, op1p, op2p);
}
void visit(DfgWordSel* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstWordSel>(vtxp, op1p, op2p);
}
void visit(DfgXor* vtxp) override {
    AstNodeExpr* const op1p = convertDfgVertexToAstNodeExpr(vtxp->source<0>());
    AstNodeExpr* const op2p = convertDfgVertexToAstNodeExpr(vtxp->source<1>());
    m_resultp = makeNode<AstXor>(vtxp, op1p, op2p);
}
