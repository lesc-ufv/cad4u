// Generated by astgen // -*- mode: C++; c-file-style: "cc-mode" -*-
// For internal use. They assume argument is not nullptr.
template<> inline bool DfgVertex::privateTypeTest<DfgAcosD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atAcosD; }
template<> inline bool DfgVertex::privateTypeTest<DfgAcoshD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atAcoshD; }
template<> inline bool DfgVertex::privateTypeTest<DfgAdd>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atAdd; }
template<> inline bool DfgVertex::privateTypeTest<DfgAddD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atAddD; }
template<> inline bool DfgVertex::privateTypeTest<DfgAnd>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atAnd; }
template<> inline bool DfgVertex::privateTypeTest<DfgArraySel>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atArraySel; }
template<> inline bool DfgVertex::privateTypeTest<DfgAsinD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atAsinD; }
template<> inline bool DfgVertex::privateTypeTest<DfgAsinhD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atAsinhD; }
template<> inline bool DfgVertex::privateTypeTest<DfgAssocSel>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atAssocSel; }
template<> inline bool DfgVertex::privateTypeTest<DfgAtan2D>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atAtan2D; }
template<> inline bool DfgVertex::privateTypeTest<DfgAtanD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atAtanD; }
template<> inline bool DfgVertex::privateTypeTest<DfgAtanhD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atAtanhD; }
template<> inline bool DfgVertex::privateTypeTest<DfgAtoN>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atAtoN; }
template<> inline bool DfgVertex::privateTypeTest<DfgBitsToRealD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atBitsToRealD; }
template<> inline bool DfgVertex::privateTypeTest<DfgBufIf1>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atBufIf1; }
template<> inline bool DfgVertex::privateTypeTest<DfgCAwait>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atCAwait; }
template<> inline bool DfgVertex::privateTypeTest<DfgCCast>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atCCast; }
template<> inline bool DfgVertex::privateTypeTest<DfgCLog2>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atCLog2; }
template<> inline bool DfgVertex::privateTypeTest<DfgCastDynamic>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atCastDynamic; }
template<> inline bool DfgVertex::privateTypeTest<DfgCastWrap>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atCastWrap; }
template<> inline bool DfgVertex::privateTypeTest<DfgCeilD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atCeilD; }
template<> inline bool DfgVertex::privateTypeTest<DfgCompareNN>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atCompareNN; }
template<> inline bool DfgVertex::privateTypeTest<DfgConcat>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atConcat; }
template<> inline bool DfgVertex::privateTypeTest<DfgConcatN>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atConcatN; }
template<> inline bool DfgVertex::privateTypeTest<DfgCond>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atCond; }
template<> inline bool DfgVertex::privateTypeTest<DfgCondBound>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atCondBound; }
template<> inline bool DfgVertex::privateTypeTest<DfgConst>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atConst; }
template<> inline bool DfgVertex::privateTypeTest<DfgCosD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atCosD; }
template<> inline bool DfgVertex::privateTypeTest<DfgCoshD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atCoshD; }
template<> inline bool DfgVertex::privateTypeTest<DfgCountOnes>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atCountOnes; }
template<> inline bool DfgVertex::privateTypeTest<DfgCvtPackString>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atCvtPackString; }
template<> inline bool DfgVertex::privateTypeTest<DfgDistChiSquare>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atDistChiSquare; }
template<> inline bool DfgVertex::privateTypeTest<DfgDistErlang>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atDistErlang; }
template<> inline bool DfgVertex::privateTypeTest<DfgDistExponential>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atDistExponential; }
template<> inline bool DfgVertex::privateTypeTest<DfgDistNormal>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atDistNormal; }
template<> inline bool DfgVertex::privateTypeTest<DfgDistPoisson>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atDistPoisson; }
template<> inline bool DfgVertex::privateTypeTest<DfgDistT>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atDistT; }
template<> inline bool DfgVertex::privateTypeTest<DfgDistUniform>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atDistUniform; }
template<> inline bool DfgVertex::privateTypeTest<DfgDiv>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atDiv; }
template<> inline bool DfgVertex::privateTypeTest<DfgDivD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atDivD; }
template<> inline bool DfgVertex::privateTypeTest<DfgDivS>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atDivS; }
template<> inline bool DfgVertex::privateTypeTest<DfgEq>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atEq; }
template<> inline bool DfgVertex::privateTypeTest<DfgEqCase>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atEqCase; }
template<> inline bool DfgVertex::privateTypeTest<DfgEqD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atEqD; }
template<> inline bool DfgVertex::privateTypeTest<DfgEqN>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atEqN; }
template<> inline bool DfgVertex::privateTypeTest<DfgEqT>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atEqT; }
template<> inline bool DfgVertex::privateTypeTest<DfgEqWild>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atEqWild; }
template<> inline bool DfgVertex::privateTypeTest<DfgExpD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atExpD; }
template<> inline bool DfgVertex::privateTypeTest<DfgExtend>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atExtend; }
template<> inline bool DfgVertex::privateTypeTest<DfgExtendS>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atExtendS; }
template<> inline bool DfgVertex::privateTypeTest<DfgFEof>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atFEof; }
template<> inline bool DfgVertex::privateTypeTest<DfgFGetC>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atFGetC; }
template<> inline bool DfgVertex::privateTypeTest<DfgFGetS>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atFGetS; }
template<> inline bool DfgVertex::privateTypeTest<DfgFUngetC>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atFUngetC; }
template<> inline bool DfgVertex::privateTypeTest<DfgFloorD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atFloorD; }
template<> inline bool DfgVertex::privateTypeTest<DfgGetcN>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atGetcN; }
template<> inline bool DfgVertex::privateTypeTest<DfgGetcRefN>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atGetcRefN; }
template<> inline bool DfgVertex::privateTypeTest<DfgGt>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atGt; }
template<> inline bool DfgVertex::privateTypeTest<DfgGtD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atGtD; }
template<> inline bool DfgVertex::privateTypeTest<DfgGtN>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atGtN; }
template<> inline bool DfgVertex::privateTypeTest<DfgGtS>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atGtS; }
template<> inline bool DfgVertex::privateTypeTest<DfgGte>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atGte; }
template<> inline bool DfgVertex::privateTypeTest<DfgGteD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atGteD; }
template<> inline bool DfgVertex::privateTypeTest<DfgGteN>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atGteN; }
template<> inline bool DfgVertex::privateTypeTest<DfgGteS>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atGteS; }
template<> inline bool DfgVertex::privateTypeTest<DfgHypotD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atHypotD; }
template<> inline bool DfgVertex::privateTypeTest<DfgISToRD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atISToRD; }
template<> inline bool DfgVertex::privateTypeTest<DfgIToRD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atIToRD; }
template<> inline bool DfgVertex::privateTypeTest<DfgIsUnbounded>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atIsUnbounded; }
template<> inline bool DfgVertex::privateTypeTest<DfgIsUnknown>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atIsUnknown; }
template<> inline bool DfgVertex::privateTypeTest<DfgLenN>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atLenN; }
template<> inline bool DfgVertex::privateTypeTest<DfgLog10D>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atLog10D; }
template<> inline bool DfgVertex::privateTypeTest<DfgLogAnd>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atLogAnd; }
template<> inline bool DfgVertex::privateTypeTest<DfgLogD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atLogD; }
template<> inline bool DfgVertex::privateTypeTest<DfgLogEq>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atLogEq; }
template<> inline bool DfgVertex::privateTypeTest<DfgLogIf>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atLogIf; }
template<> inline bool DfgVertex::privateTypeTest<DfgLogNot>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atLogNot; }
template<> inline bool DfgVertex::privateTypeTest<DfgLogOr>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atLogOr; }
template<> inline bool DfgVertex::privateTypeTest<DfgLt>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atLt; }
template<> inline bool DfgVertex::privateTypeTest<DfgLtD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atLtD; }
template<> inline bool DfgVertex::privateTypeTest<DfgLtN>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atLtN; }
template<> inline bool DfgVertex::privateTypeTest<DfgLtS>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atLtS; }
template<> inline bool DfgVertex::privateTypeTest<DfgLte>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atLte; }
template<> inline bool DfgVertex::privateTypeTest<DfgLteD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atLteD; }
template<> inline bool DfgVertex::privateTypeTest<DfgLteN>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atLteN; }
template<> inline bool DfgVertex::privateTypeTest<DfgLteS>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atLteS; }
template<> inline bool DfgVertex::privateTypeTest<DfgModDiv>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atModDiv; }
template<> inline bool DfgVertex::privateTypeTest<DfgModDivS>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atModDivS; }
template<> inline bool DfgVertex::privateTypeTest<DfgMul>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atMul; }
template<> inline bool DfgVertex::privateTypeTest<DfgMulD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atMulD; }
template<> inline bool DfgVertex::privateTypeTest<DfgMulS>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atMulS; }
template<> inline bool DfgVertex::privateTypeTest<DfgMux>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atMux; }
template<> inline bool DfgVertex::privateTypeTest<DfgNToI>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atNToI; }
template<> inline bool DfgVertex::privateTypeTest<DfgNegate>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atNegate; }
template<> inline bool DfgVertex::privateTypeTest<DfgNegateD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atNegateD; }
template<> inline bool DfgVertex::privateTypeTest<DfgNeq>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atNeq; }
template<> inline bool DfgVertex::privateTypeTest<DfgNeqCase>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atNeqCase; }
template<> inline bool DfgVertex::privateTypeTest<DfgNeqD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atNeqD; }
template<> inline bool DfgVertex::privateTypeTest<DfgNeqN>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atNeqN; }
template<> inline bool DfgVertex::privateTypeTest<DfgNeqT>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atNeqT; }
template<> inline bool DfgVertex::privateTypeTest<DfgNeqWild>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atNeqWild; }
template<> inline bool DfgVertex::privateTypeTest<DfgNot>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atNot; }
template<> inline bool DfgVertex::privateTypeTest<DfgNullCheck>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atNullCheck; }
template<> inline bool DfgVertex::privateTypeTest<DfgOneHot>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atOneHot; }
template<> inline bool DfgVertex::privateTypeTest<DfgOneHot0>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atOneHot0; }
template<> inline bool DfgVertex::privateTypeTest<DfgOr>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atOr; }
template<> inline bool DfgVertex::privateTypeTest<DfgPostAdd>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atPostAdd; }
template<> inline bool DfgVertex::privateTypeTest<DfgPostSub>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atPostSub; }
template<> inline bool DfgVertex::privateTypeTest<DfgPow>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atPow; }
template<> inline bool DfgVertex::privateTypeTest<DfgPowD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atPowD; }
template<> inline bool DfgVertex::privateTypeTest<DfgPowSS>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atPowSS; }
template<> inline bool DfgVertex::privateTypeTest<DfgPowSU>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atPowSU; }
template<> inline bool DfgVertex::privateTypeTest<DfgPowUS>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atPowUS; }
template<> inline bool DfgVertex::privateTypeTest<DfgPreAdd>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atPreAdd; }
template<> inline bool DfgVertex::privateTypeTest<DfgPreSub>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atPreSub; }
template<> inline bool DfgVertex::privateTypeTest<DfgPutcN>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atPutcN; }
template<> inline bool DfgVertex::privateTypeTest<DfgRToIRoundS>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atRToIRoundS; }
template<> inline bool DfgVertex::privateTypeTest<DfgRToIS>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atRToIS; }
template<> inline bool DfgVertex::privateTypeTest<DfgRealToBits>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atRealToBits; }
template<> inline bool DfgVertex::privateTypeTest<DfgRedAnd>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atRedAnd; }
template<> inline bool DfgVertex::privateTypeTest<DfgRedOr>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atRedOr; }
template<> inline bool DfgVertex::privateTypeTest<DfgRedXor>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atRedXor; }
template<> inline bool DfgVertex::privateTypeTest<DfgReplicate>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atReplicate; }
template<> inline bool DfgVertex::privateTypeTest<DfgReplicateN>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atReplicateN; }
template<> inline bool DfgVertex::privateTypeTest<DfgResizeLValue>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atResizeLValue; }
template<> inline bool DfgVertex::privateTypeTest<DfgSel>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atSel; }
template<> inline bool DfgVertex::privateTypeTest<DfgShiftL>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atShiftL; }
template<> inline bool DfgVertex::privateTypeTest<DfgShiftLOvr>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atShiftLOvr; }
template<> inline bool DfgVertex::privateTypeTest<DfgShiftR>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atShiftR; }
template<> inline bool DfgVertex::privateTypeTest<DfgShiftROvr>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atShiftROvr; }
template<> inline bool DfgVertex::privateTypeTest<DfgShiftRS>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atShiftRS; }
template<> inline bool DfgVertex::privateTypeTest<DfgShiftRSOvr>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atShiftRSOvr; }
template<> inline bool DfgVertex::privateTypeTest<DfgSigned>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atSigned; }
template<> inline bool DfgVertex::privateTypeTest<DfgSinD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atSinD; }
template<> inline bool DfgVertex::privateTypeTest<DfgSinhD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atSinhD; }
template<> inline bool DfgVertex::privateTypeTest<DfgSliceSel>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atSliceSel; }
template<> inline bool DfgVertex::privateTypeTest<DfgSqrtD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atSqrtD; }
template<> inline bool DfgVertex::privateTypeTest<DfgStreamL>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atStreamL; }
template<> inline bool DfgVertex::privateTypeTest<DfgStreamR>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atStreamR; }
template<> inline bool DfgVertex::privateTypeTest<DfgSub>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atSub; }
template<> inline bool DfgVertex::privateTypeTest<DfgSubD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atSubD; }
template<> inline bool DfgVertex::privateTypeTest<DfgSubstrN>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atSubstrN; }
template<> inline bool DfgVertex::privateTypeTest<DfgTanD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atTanD; }
template<> inline bool DfgVertex::privateTypeTest<DfgTanhD>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atTanhD; }
template<> inline bool DfgVertex::privateTypeTest<DfgTimeImport>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atTimeImport; }
template<> inline bool DfgVertex::privateTypeTest<DfgToLowerN>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atToLowerN; }
template<> inline bool DfgVertex::privateTypeTest<DfgToUpperN>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atToUpperN; }
template<> inline bool DfgVertex::privateTypeTest<DfgURandomRange>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atURandomRange; }
template<> inline bool DfgVertex::privateTypeTest<DfgUnsigned>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atUnsigned; }
template<> inline bool DfgVertex::privateTypeTest<DfgVarArray>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atVarArray; }
template<> inline bool DfgVertex::privateTypeTest<DfgVarPacked>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atVarPacked; }
template<> inline bool DfgVertex::privateTypeTest<DfgVertex>(const DfgVertex* vtxp) { return true; }
template<> inline bool DfgVertex::privateTypeTest<DfgVertexBinary>(const DfgVertex* vtxp) { return static_cast<int>(vtxp->type()) >= static_cast<int>(VDfgType::firstVertexBinary) && static_cast<int>(vtxp->type()) <= static_cast<int>(VDfgType::lastVertexBinary); }
template<> inline bool DfgVertex::privateTypeTest<DfgVertexTernary>(const DfgVertex* vtxp) { return static_cast<int>(vtxp->type()) >= static_cast<int>(VDfgType::firstVertexTernary) && static_cast<int>(vtxp->type()) <= static_cast<int>(VDfgType::lastVertexTernary); }
template<> inline bool DfgVertex::privateTypeTest<DfgVertexUnary>(const DfgVertex* vtxp) { return static_cast<int>(vtxp->type()) >= static_cast<int>(VDfgType::firstVertexUnary) && static_cast<int>(vtxp->type()) <= static_cast<int>(VDfgType::lastVertexUnary); }
template<> inline bool DfgVertex::privateTypeTest<DfgVertexVar>(const DfgVertex* vtxp) { return static_cast<int>(vtxp->type()) >= static_cast<int>(VDfgType::firstVertexVar) && static_cast<int>(vtxp->type()) <= static_cast<int>(VDfgType::lastVertexVar); }
template<> inline bool DfgVertex::privateTypeTest<DfgVertexVariadic>(const DfgVertex* vtxp) { return static_cast<int>(vtxp->type()) >= static_cast<int>(VDfgType::firstVertexVariadic) && static_cast<int>(vtxp->type()) <= static_cast<int>(VDfgType::lastVertexVariadic); }
template<> inline bool DfgVertex::privateTypeTest<DfgWildcardSel>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atWildcardSel; }
template<> inline bool DfgVertex::privateTypeTest<DfgWordSel>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atWordSel; }
template<> inline bool DfgVertex::privateTypeTest<DfgXor>(const DfgVertex* vtxp) { return vtxp->type() == VDfgType::atXor; }
