// Generated by astgen // -*- mode: C++; c-file-style: "cc-mode" -*-
    const char* AstAcosD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeSystemUniopD::brokenGen());
    return AstAcosD::broken(); }
    void AstAcosD::cloneRelinkGen() {
    AstNodeSystemUniopD::cloneRelinkGen();
    }
    void AstAcosD::dumpJsonGen(std::ostream& str) const {
    AstNodeSystemUniopD::dumpJson(str);
    }
    void AstAcosD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstAcoshD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeSystemUniopD::brokenGen());
    return AstAcoshD::broken(); }
    void AstAcoshD::cloneRelinkGen() {
    AstNodeSystemUniopD::cloneRelinkGen();
    }
    void AstAcoshD::dumpJsonGen(std::ostream& str) const {
    AstNodeSystemUniopD::dumpJson(str);
    }
    void AstAcoshD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstActive::brokenGen() const {
    BROKEN_RTN(m_sensesp && !m_sensesp->brokeExists());
    return AstActive::broken(); }
    void AstActive::cloneRelinkGen() {
    if (m_sensesp && m_sensesp->clonep()) m_sensesp = m_sensesp->clonep();
    }
    void AstActive::dumpJsonGen(std::ostream& str) const {
    dumpJsonPtr(str, "sensesp", m_sensesp);
    }
    void AstActive::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, sensesStorep(), "sensesStorep", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    }
    const char* AstAdd::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiComAsv::brokenGen());
    return AstAdd::broken(); }
    void AstAdd::cloneRelinkGen() {
    AstNodeBiComAsv::cloneRelinkGen();
    }
    void AstAdd::dumpJsonGen(std::ostream& str) const {
    AstNodeBiComAsv::dumpJson(str);
    }
    void AstAdd::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstAddD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiComAsv::brokenGen());
    return AstAddD::broken(); }
    void AstAddD::cloneRelinkGen() {
    AstNodeBiComAsv::cloneRelinkGen();
    }
    void AstAddD::dumpJsonGen(std::ostream& str) const {
    AstNodeBiComAsv::dumpJson(str);
    }
    void AstAddD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstAddrOfCFunc::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    BROKEN_RTN(!m_funcp);
    BROKEN_RTN(!m_funcp->brokeExists());
    return AstAddrOfCFunc::broken(); }
    void AstAddrOfCFunc::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    if (m_funcp && m_funcp->clonep()) m_funcp = m_funcp->clonep();
    }
    void AstAddrOfCFunc::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    dumpJsonPtr(str, "funcp", m_funcp);
    }
    void AstAddrOfCFunc::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstAlways::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeProcedure::brokenGen());
    return AstAlways::broken(); }
    void AstAlways::cloneRelinkGen() {
    AstNodeProcedure::cloneRelinkGen();
    }
    void AstAlways::dumpJsonGen(std::ostream& str) const {
    AstNodeProcedure::dumpJson(str);
    }
    void AstAlways::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, sensesp(), "sensesp", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    }
    const char* AstAlwaysObserved::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeProcedure::brokenGen());
    return AstAlwaysObserved::broken(); }
    void AstAlwaysObserved::cloneRelinkGen() {
    AstNodeProcedure::cloneRelinkGen();
    }
    void AstAlwaysObserved::dumpJsonGen(std::ostream& str) const {
    AstNodeProcedure::dumpJson(str);
    }
    void AstAlwaysObserved::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, sensesp(), "sensesp", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    }
    const char* AstAlwaysPost::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeProcedure::brokenGen());
    return AstAlwaysPost::broken(); }
    void AstAlwaysPost::cloneRelinkGen() {
    AstNodeProcedure::cloneRelinkGen();
    }
    void AstAlwaysPost::dumpJsonGen(std::ostream& str) const {
    AstNodeProcedure::dumpJson(str);
    }
    void AstAlwaysPost::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, sensesp(), "sensesp", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    }
    const char* AstAlwaysPostponed::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeProcedure::brokenGen());
    return AstAlwaysPostponed::broken(); }
    void AstAlwaysPostponed::cloneRelinkGen() {
    AstNodeProcedure::cloneRelinkGen();
    }
    void AstAlwaysPostponed::dumpJsonGen(std::ostream& str) const {
    AstNodeProcedure::dumpJson(str);
    }
    void AstAlwaysPostponed::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    }
    const char* AstAlwaysPublic::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstAlwaysPublic::broken(); }
    void AstAlwaysPublic::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstAlwaysPublic::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstAlwaysPublic::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, sensesp(), "sensesp", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    }
    const char* AstAlwaysReactive::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeProcedure::brokenGen());
    return AstAlwaysReactive::broken(); }
    void AstAlwaysReactive::cloneRelinkGen() {
    AstNodeProcedure::cloneRelinkGen();
    }
    void AstAlwaysReactive::dumpJsonGen(std::ostream& str) const {
    AstNodeProcedure::dumpJson(str);
    }
    void AstAlwaysReactive::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, sensesp(), "sensesp", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    }
    const char* AstAnd::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiComAsv::brokenGen());
    return AstAnd::broken(); }
    void AstAnd::cloneRelinkGen() {
    AstNodeBiComAsv::cloneRelinkGen();
    }
    void AstAnd::dumpJsonGen(std::ostream& str) const {
    AstNodeBiComAsv::dumpJson(str);
    }
    void AstAnd::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstArg::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstArg::broken(); }
    void AstArg::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstArg::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstArg::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, exprp(), "exprp", indent);
    }
    const char* AstArraySel::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeSel::brokenGen());
    return AstArraySel::broken(); }
    void AstArraySel::cloneRelinkGen() {
    AstNodeSel::cloneRelinkGen();
    }
    void AstArraySel::dumpJsonGen(std::ostream& str) const {
    AstNodeSel::dumpJson(str);
    }
    void AstArraySel::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fromp(), "fromp", indent);
    dumpNodeListJson(str, bitp(), "bitp", indent);
    }
    const char* AstAsinD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeSystemUniopD::brokenGen());
    return AstAsinD::broken(); }
    void AstAsinD::cloneRelinkGen() {
    AstNodeSystemUniopD::cloneRelinkGen();
    }
    void AstAsinD::dumpJsonGen(std::ostream& str) const {
    AstNodeSystemUniopD::dumpJson(str);
    }
    void AstAsinD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstAsinhD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeSystemUniopD::brokenGen());
    return AstAsinhD::broken(); }
    void AstAsinhD::cloneRelinkGen() {
    AstNodeSystemUniopD::cloneRelinkGen();
    }
    void AstAsinhD::dumpJsonGen(std::ostream& str) const {
    AstNodeSystemUniopD::dumpJson(str);
    }
    void AstAsinhD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstAssert::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeCoverOrAssert::brokenGen());
    return AstAssert::broken(); }
    void AstAssert::cloneRelinkGen() {
    AstNodeCoverOrAssert::cloneRelinkGen();
    }
    void AstAssert::dumpJsonGen(std::ostream& str) const {
    AstNodeCoverOrAssert::dumpJson(str);
    }
    void AstAssert::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, propp(), "propp", indent);
    dumpNodeListJson(str, sentreep(), "sentreep", indent);
    dumpNodeListJson(str, failsp(), "failsp", indent);
    dumpNodeListJson(str, passsp(), "passsp", indent);
    }
    const char* AstAssertIntrinsic::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeCoverOrAssert::brokenGen());
    return AstAssertIntrinsic::broken(); }
    void AstAssertIntrinsic::cloneRelinkGen() {
    AstNodeCoverOrAssert::cloneRelinkGen();
    }
    void AstAssertIntrinsic::dumpJsonGen(std::ostream& str) const {
    AstNodeCoverOrAssert::dumpJson(str);
    }
    void AstAssertIntrinsic::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, propp(), "propp", indent);
    dumpNodeListJson(str, sentreep(), "sentreep", indent);
    dumpNodeListJson(str, failsp(), "failsp", indent);
    dumpNodeListJson(str, passsp(), "passsp", indent);
    }
    const char* AstAssign::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeAssign::brokenGen());
    return AstAssign::broken(); }
    void AstAssign::cloneRelinkGen() {
    AstNodeAssign::cloneRelinkGen();
    }
    void AstAssign::dumpJsonGen(std::ostream& str) const {
    AstNodeAssign::dumpJson(str);
    }
    void AstAssign::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, timingControlp(), "timingControlp", indent);
    }
    const char* AstAssignAlias::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeAssign::brokenGen());
    return AstAssignAlias::broken(); }
    void AstAssignAlias::cloneRelinkGen() {
    AstNodeAssign::cloneRelinkGen();
    }
    void AstAssignAlias::dumpJsonGen(std::ostream& str) const {
    AstNodeAssign::dumpJson(str);
    }
    void AstAssignAlias::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, timingControlp(), "timingControlp", indent);
    }
    const char* AstAssignDly::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeAssign::brokenGen());
    return AstAssignDly::broken(); }
    void AstAssignDly::cloneRelinkGen() {
    AstNodeAssign::cloneRelinkGen();
    }
    void AstAssignDly::dumpJsonGen(std::ostream& str) const {
    AstNodeAssign::dumpJson(str);
    }
    void AstAssignDly::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, timingControlp(), "timingControlp", indent);
    }
    const char* AstAssignForce::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeAssign::brokenGen());
    return AstAssignForce::broken(); }
    void AstAssignForce::cloneRelinkGen() {
    AstNodeAssign::cloneRelinkGen();
    }
    void AstAssignForce::dumpJsonGen(std::ostream& str) const {
    AstNodeAssign::dumpJson(str);
    }
    void AstAssignForce::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, timingControlp(), "timingControlp", indent);
    }
    const char* AstAssignPost::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeAssign::brokenGen());
    return AstAssignPost::broken(); }
    void AstAssignPost::cloneRelinkGen() {
    AstNodeAssign::cloneRelinkGen();
    }
    void AstAssignPost::dumpJsonGen(std::ostream& str) const {
    AstNodeAssign::dumpJson(str);
    }
    void AstAssignPost::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, timingControlp(), "timingControlp", indent);
    }
    const char* AstAssignPre::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeAssign::brokenGen());
    return AstAssignPre::broken(); }
    void AstAssignPre::cloneRelinkGen() {
    AstNodeAssign::cloneRelinkGen();
    }
    void AstAssignPre::dumpJsonGen(std::ostream& str) const {
    AstNodeAssign::dumpJson(str);
    }
    void AstAssignPre::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, timingControlp(), "timingControlp", indent);
    }
    const char* AstAssignVarScope::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeAssign::brokenGen());
    return AstAssignVarScope::broken(); }
    void AstAssignVarScope::cloneRelinkGen() {
    AstNodeAssign::cloneRelinkGen();
    }
    void AstAssignVarScope::dumpJsonGen(std::ostream& str) const {
    AstNodeAssign::dumpJson(str);
    }
    void AstAssignVarScope::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, timingControlp(), "timingControlp", indent);
    }
    const char* AstAssignW::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeAssign::brokenGen());
    return AstAssignW::broken(); }
    void AstAssignW::cloneRelinkGen() {
    AstNodeAssign::cloneRelinkGen();
    }
    void AstAssignW::dumpJsonGen(std::ostream& str) const {
    AstNodeAssign::dumpJson(str);
    }
    void AstAssignW::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, timingControlp(), "timingControlp", indent);
    dumpNodeListJson(str, strengthSpecp(), "strengthSpecp", indent);
    }
    const char* AstAssocArrayDType::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDType::brokenGen());
    BROKEN_RTN(m_refDTypep && !m_refDTypep->brokeExists());
    BROKEN_RTN(m_keyDTypep && !m_keyDTypep->brokeExists());
    return AstAssocArrayDType::broken(); }
    void AstAssocArrayDType::cloneRelinkGen() {
    AstNodeDType::cloneRelinkGen();
    if (m_refDTypep && m_refDTypep->clonep()) m_refDTypep = m_refDTypep->clonep();
    if (m_keyDTypep && m_keyDTypep->clonep()) m_keyDTypep = m_keyDTypep->clonep();
    }
    void AstAssocArrayDType::dumpJsonGen(std::ostream& str) const {
    AstNodeDType::dumpJson(str);
    dumpJsonPtr(str, "refDTypep", m_refDTypep);
    dumpJsonPtr(str, "keyDTypep", m_keyDTypep);
    }
    void AstAssocArrayDType::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, childDTypep(), "childDTypep", indent);
    dumpNodeListJson(str, keyChildDTypep(), "keyChildDTypep", indent);
    }
    const char* AstAssocSel::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeSel::brokenGen());
    return AstAssocSel::broken(); }
    void AstAssocSel::cloneRelinkGen() {
    AstNodeSel::cloneRelinkGen();
    }
    void AstAssocSel::dumpJsonGen(std::ostream& str) const {
    AstNodeSel::dumpJson(str);
    }
    void AstAssocSel::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fromp(), "fromp", indent);
    dumpNodeListJson(str, bitp(), "bitp", indent);
    }
    const char* AstAtan2D::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeSystemBiopD::brokenGen());
    return AstAtan2D::broken(); }
    void AstAtan2D::cloneRelinkGen() {
    AstNodeSystemBiopD::cloneRelinkGen();
    }
    void AstAtan2D::dumpJsonGen(std::ostream& str) const {
    AstNodeSystemBiopD::dumpJson(str);
    }
    void AstAtan2D::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstAtanD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeSystemUniopD::brokenGen());
    return AstAtanD::broken(); }
    void AstAtanD::cloneRelinkGen() {
    AstNodeSystemUniopD::cloneRelinkGen();
    }
    void AstAtanD::dumpJsonGen(std::ostream& str) const {
    AstNodeSystemUniopD::dumpJson(str);
    }
    void AstAtanD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstAtanhD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeSystemUniopD::brokenGen());
    return AstAtanhD::broken(); }
    void AstAtanhD::cloneRelinkGen() {
    AstNodeSystemUniopD::cloneRelinkGen();
    }
    void AstAtanhD::dumpJsonGen(std::ostream& str) const {
    AstNodeSystemUniopD::dumpJson(str);
    }
    void AstAtanhD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstAtoN::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstAtoN::broken(); }
    void AstAtoN::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstAtoN::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstAtoN::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstAttrOf::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstAttrOf::broken(); }
    void AstAttrOf::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstAttrOf::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstAttrOf::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fromp(), "fromp", indent);
    dumpNodeListJson(str, dimp(), "dimp", indent);
    }
    const char* AstBasicDType::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDType::brokenGen());
    return AstBasicDType::broken(); }
    void AstBasicDType::cloneRelinkGen() {
    AstNodeDType::cloneRelinkGen();
    }
    void AstBasicDType::dumpJsonGen(std::ostream& str) const {
    AstNodeDType::dumpJson(str);
    }
    void AstBasicDType::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, rangep(), "rangep", indent);
    }
    const char* AstBegin::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBlock::brokenGen());
    return AstBegin::broken(); }
    void AstBegin::cloneRelinkGen() {
    AstNodeBlock::cloneRelinkGen();
    }
    void AstBegin::dumpJsonGen(std::ostream& str) const {
    AstNodeBlock::dumpJson(str);
    }
    void AstBegin::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, genforp(), "genforp", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    }
    const char* AstBind::brokenGen() const {
    return AstBind::broken(); }
    void AstBind::cloneRelinkGen() {
    }
    void AstBind::dumpJsonGen(std::ostream& str) const {
    }
    void AstBind::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, cellsp(), "cellsp", indent);
    }
    const char* AstBitsToRealD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstBitsToRealD::broken(); }
    void AstBitsToRealD::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstBitsToRealD::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstBitsToRealD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstBracketArrayDType::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDType::brokenGen());
    return AstBracketArrayDType::broken(); }
    void AstBracketArrayDType::cloneRelinkGen() {
    AstNodeDType::cloneRelinkGen();
    }
    void AstBracketArrayDType::dumpJsonGen(std::ostream& str) const {
    AstNodeDType::dumpJson(str);
    }
    void AstBracketArrayDType::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, childDTypep(), "childDTypep", indent);
    dumpNodeListJson(str, elementsp(), "elementsp", indent);
    }
    const char* AstBracketRange::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeRange::brokenGen());
    return AstBracketRange::broken(); }
    void AstBracketRange::cloneRelinkGen() {
    AstNodeRange::cloneRelinkGen();
    }
    void AstBracketRange::dumpJsonGen(std::ostream& str) const {
    AstNodeRange::dumpJson(str);
    }
    void AstBracketRange::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, elementsp(), "elementsp", indent);
    }
    const char* AstBreak::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstBreak::broken(); }
    void AstBreak::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstBreak::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstBreak::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstBufIf1::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstBufIf1::broken(); }
    void AstBufIf1::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstBufIf1::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstBufIf1::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstCAwait::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    BROKEN_RTN(m_sensesp && !m_sensesp->brokeExists());
    return AstCAwait::broken(); }
    void AstCAwait::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    if (m_sensesp && m_sensesp->clonep()) m_sensesp = m_sensesp->clonep();
    }
    void AstCAwait::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    dumpJsonPtr(str, "sensesp", m_sensesp);
    }
    void AstCAwait::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, exprp(), "exprp", indent);
    }
    const char* AstCCall::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeCCall::brokenGen());
    return AstCCall::broken(); }
    void AstCCall::cloneRelinkGen() {
    AstNodeCCall::cloneRelinkGen();
    }
    void AstCCall::dumpJsonGen(std::ostream& str) const {
    AstNodeCCall::dumpJson(str);
    }
    void AstCCall::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, argsp(), "argsp", indent);
    }
    const char* AstCCast::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstCCast::broken(); }
    void AstCCast::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstCCast::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstCCast::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstCDType::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDType::brokenGen());
    return AstCDType::broken(); }
    void AstCDType::cloneRelinkGen() {
    AstNodeDType::cloneRelinkGen();
    }
    void AstCDType::dumpJsonGen(std::ostream& str) const {
    AstNodeDType::dumpJson(str);
    }
    void AstCDType::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstCExpr::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstCExpr::broken(); }
    void AstCExpr::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstCExpr::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstCExpr::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, exprsp(), "exprsp", indent);
    }
    const char* AstCFile::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeFile::brokenGen());
    return AstCFile::broken(); }
    void AstCFile::cloneRelinkGen() {
    AstNodeFile::cloneRelinkGen();
    }
    void AstCFile::dumpJsonGen(std::ostream& str) const {
    AstNodeFile::dumpJson(str);
    }
    void AstCFile::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, tblockp(), "tblockp", indent);
    }
    const char* AstCFunc::brokenGen() const {
    BROKEN_RTN(m_scopep && !m_scopep->brokeExists());
    return AstCFunc::broken(); }
    void AstCFunc::cloneRelinkGen() {
    if (m_scopep && m_scopep->clonep()) m_scopep = m_scopep->clonep();
    }
    void AstCFunc::dumpJsonGen(std::ostream& str) const {
    dumpJsonPtr(str, "scopep", m_scopep);
    }
    void AstCFunc::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, argsp(), "argsp", indent);
    dumpNodeListJson(str, initsp(), "initsp", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    dumpNodeListJson(str, finalsp(), "finalsp", indent);
    }
    const char* AstCLocalScope::brokenGen() const {
    return AstCLocalScope::broken(); }
    void AstCLocalScope::cloneRelinkGen() {
    }
    void AstCLocalScope::dumpJsonGen(std::ostream& str) const {
    }
    void AstCLocalScope::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    }
    const char* AstCLog2::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstCLog2::broken(); }
    void AstCLog2::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstCLog2::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstCLog2::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstCMethodCall::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeCCall::brokenGen());
    return AstCMethodCall::broken(); }
    void AstCMethodCall::cloneRelinkGen() {
    AstNodeCCall::cloneRelinkGen();
    }
    void AstCMethodCall::dumpJsonGen(std::ostream& str) const {
    AstNodeCCall::dumpJson(str);
    }
    void AstCMethodCall::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fromp(), "fromp", indent);
    dumpNodeListJson(str, argsp(), "argsp", indent);
    }
    const char* AstCMethodHard::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstCMethodHard::broken(); }
    void AstCMethodHard::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstCMethodHard::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstCMethodHard::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fromp(), "fromp", indent);
    dumpNodeListJson(str, pinsp(), "pinsp", indent);
    }
    const char* AstCNew::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeCCall::brokenGen());
    return AstCNew::broken(); }
    void AstCNew::cloneRelinkGen() {
    AstNodeCCall::cloneRelinkGen();
    }
    void AstCNew::dumpJsonGen(std::ostream& str) const {
    AstNodeCCall::dumpJson(str);
    }
    void AstCNew::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, argsp(), "argsp", indent);
    }
    const char* AstCReset::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstCReset::broken(); }
    void AstCReset::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstCReset::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstCReset::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, varrefp(), "varrefp", indent);
    }
    const char* AstCReturn::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstCReturn::broken(); }
    void AstCReturn::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstCReturn::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstCReturn::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstCStmt::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstCStmt::broken(); }
    void AstCStmt::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstCStmt::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstCStmt::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, exprsp(), "exprsp", indent);
    }
    const char* AstCUse::brokenGen() const {
    return AstCUse::broken(); }
    void AstCUse::cloneRelinkGen() {
    }
    void AstCUse::dumpJsonGen(std::ostream& str) const {
    }
    void AstCUse::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstCase::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeCase::brokenGen());
    return AstCase::broken(); }
    void AstCase::cloneRelinkGen() {
    AstNodeCase::cloneRelinkGen();
    }
    void AstCase::dumpJsonGen(std::ostream& str) const {
    AstNodeCase::dumpJson(str);
    }
    void AstCase::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, exprp(), "exprp", indent);
    dumpNodeListJson(str, itemsp(), "itemsp", indent);
    dumpNodeListJson(str, notParallelp(), "notParallelp", indent);
    }
    const char* AstCaseItem::brokenGen() const {
    return AstCaseItem::broken(); }
    void AstCaseItem::cloneRelinkGen() {
    }
    void AstCaseItem::dumpJsonGen(std::ostream& str) const {
    }
    void AstCaseItem::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, condsp(), "condsp", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    }
    const char* AstCast::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstCast::broken(); }
    void AstCast::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstCast::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstCast::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fromp(), "fromp", indent);
    dumpNodeListJson(str, childDTypep(), "childDTypep", indent);
    }
    const char* AstCastDynamic::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstCastDynamic::broken(); }
    void AstCastDynamic::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstCastDynamic::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstCastDynamic::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fromp(), "fromp", indent);
    dumpNodeListJson(str, top(), "top", indent);
    }
    const char* AstCastParse::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstCastParse::broken(); }
    void AstCastParse::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstCastParse::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstCastParse::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, dtp(), "dtp", indent);
    }
    const char* AstCastSize::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstCastSize::broken(); }
    void AstCastSize::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstCastSize::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstCastSize::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstCastWrap::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstCastWrap::broken(); }
    void AstCastWrap::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstCastWrap::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstCastWrap::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstCeilD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeSystemUniopD::brokenGen());
    return AstCeilD::broken(); }
    void AstCeilD::cloneRelinkGen() {
    AstNodeSystemUniopD::cloneRelinkGen();
    }
    void AstCeilD::dumpJsonGen(std::ostream& str) const {
    AstNodeSystemUniopD::dumpJson(str);
    }
    void AstCeilD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstCell::brokenGen() const {
    BROKEN_RTN(m_modp && !m_modp->brokeExists());
    return AstCell::broken(); }
    void AstCell::cloneRelinkGen() {
    if (m_modp && m_modp->clonep()) m_modp = m_modp->clonep();
    }
    void AstCell::dumpJsonGen(std::ostream& str) const {
    dumpJsonPtr(str, "modp", m_modp);
    }
    void AstCell::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, pinsp(), "pinsp", indent);
    dumpNodeListJson(str, paramsp(), "paramsp", indent);
    dumpNodeListJson(str, rangep(), "rangep", indent);
    dumpNodeListJson(str, intfRefsp(), "intfRefsp", indent);
    }
    const char* AstCellArrayRef::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstCellArrayRef::broken(); }
    void AstCellArrayRef::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstCellArrayRef::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstCellArrayRef::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, selp(), "selp", indent);
    }
    const char* AstCellInline::brokenGen() const {
    BROKEN_RTN(m_scopep && !m_scopep->brokeExists());
    return AstCellInline::broken(); }
    void AstCellInline::cloneRelinkGen() {
    if (m_scopep && m_scopep->clonep()) m_scopep = m_scopep->clonep();
    }
    void AstCellInline::dumpJsonGen(std::ostream& str) const {
    dumpJsonPtr(str, "scopep", m_scopep);
    }
    void AstCellInline::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstCellInlineScope::brokenGen() const {
    BROKEN_RTN(m_scopep && !m_scopep->brokeExists());
    BROKEN_RTN(m_cellp && !m_cellp->brokeExists());
    return AstCellInlineScope::broken(); }
    void AstCellInlineScope::cloneRelinkGen() {
    if (m_scopep && m_scopep->clonep()) m_scopep = m_scopep->clonep();
    if (m_cellp && m_cellp->clonep()) m_cellp = m_cellp->clonep();
    }
    void AstCellInlineScope::dumpJsonGen(std::ostream& str) const {
    dumpJsonPtr(str, "scopep", m_scopep);
    dumpJsonPtr(str, "cellp", m_cellp);
    }
    void AstCellInlineScope::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstCellRef::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstCellRef::broken(); }
    void AstCellRef::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstCellRef::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstCellRef::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, cellp(), "cellp", indent);
    dumpNodeListJson(str, exprp(), "exprp", indent);
    }
    const char* AstClass::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeModule::brokenGen());
    BROKEN_RTN(m_classOrPackagep && !m_classOrPackagep->brokeExists());
    return AstClass::broken(); }
    void AstClass::cloneRelinkGen() {
    AstNodeModule::cloneRelinkGen();
    if (m_classOrPackagep && m_classOrPackagep->clonep()) m_classOrPackagep = m_classOrPackagep->clonep();
    }
    void AstClass::dumpJsonGen(std::ostream& str) const {
    AstNodeModule::dumpJson(str);
    dumpJsonPtr(str, "classOrPackagep", m_classOrPackagep);
    }
    void AstClass::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, inlinesp(), "inlinesp", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    dumpNodeListJson(str, activesp(), "activesp", indent);
    dumpNodeListJson(str, extendsp(), "extendsp", indent);
    }
    const char* AstClassExtends::brokenGen() const {
    return AstClassExtends::broken(); }
    void AstClassExtends::cloneRelinkGen() {
    }
    void AstClassExtends::dumpJsonGen(std::ostream& str) const {
    }
    void AstClassExtends::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, childDTypep(), "childDTypep", indent);
    dumpNodeListJson(str, classOrPkgsp(), "classOrPkgsp", indent);
    }
    const char* AstClassOrPackageRef::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    BROKEN_RTN(m_classOrPackageNodep && !m_classOrPackageNodep->brokeExists());
    return AstClassOrPackageRef::broken(); }
    void AstClassOrPackageRef::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    if (m_classOrPackageNodep && m_classOrPackageNodep->clonep()) m_classOrPackageNodep = m_classOrPackageNodep->clonep();
    }
    void AstClassOrPackageRef::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    dumpJsonPtr(str, "classOrPackageNodep", m_classOrPackageNodep);
    }
    void AstClassOrPackageRef::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, paramsp(), "paramsp", indent);
    }
    const char* AstClassPackage::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeModule::brokenGen());
    BROKEN_RTN(m_classp && !m_classp->brokeExists());
    return AstClassPackage::broken(); }
    void AstClassPackage::cloneRelinkGen() {
    AstNodeModule::cloneRelinkGen();
    if (m_classp && m_classp->clonep()) m_classp = m_classp->clonep();
    }
    void AstClassPackage::dumpJsonGen(std::ostream& str) const {
    AstNodeModule::dumpJson(str);
    dumpJsonPtr(str, "classp", m_classp);
    }
    void AstClassPackage::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, inlinesp(), "inlinesp", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    dumpNodeListJson(str, activesp(), "activesp", indent);
    }
    const char* AstClassRefDType::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDType::brokenGen());
    BROKEN_RTN(m_classp && !m_classp->brokeExists());
    BROKEN_RTN(m_classOrPackagep && !m_classOrPackagep->brokeExists());
    return AstClassRefDType::broken(); }
    void AstClassRefDType::cloneRelinkGen() {
    AstNodeDType::cloneRelinkGen();
    if (m_classp && m_classp->clonep()) m_classp = m_classp->clonep();
    if (m_classOrPackagep && m_classOrPackagep->clonep()) m_classOrPackagep = m_classOrPackagep->clonep();
    }
    void AstClassRefDType::dumpJsonGen(std::ostream& str) const {
    AstNodeDType::dumpJson(str);
    dumpJsonPtr(str, "classp", m_classp);
    dumpJsonPtr(str, "classOrPackagep", m_classOrPackagep);
    }
    void AstClassRefDType::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, paramsp(), "paramsp", indent);
    }
    const char* AstClocking::brokenGen() const {
    return AstClocking::broken(); }
    void AstClocking::cloneRelinkGen() {
    }
    void AstClocking::dumpJsonGen(std::ostream& str) const {
    }
    void AstClocking::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, sensesp(), "sensesp", indent);
    dumpNodeListJson(str, itemsp(), "itemsp", indent);
    dumpNodeListJson(str, varsp(), "varsp", indent);
    dumpNodeListJson(str, eventp(), "eventp", indent);
    }
    const char* AstClockingItem::brokenGen() const {
    return AstClockingItem::broken(); }
    void AstClockingItem::cloneRelinkGen() {
    }
    void AstClockingItem::dumpJsonGen(std::ostream& str) const {
    }
    void AstClockingItem::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, skewp(), "skewp", indent);
    dumpNodeListJson(str, exprp(), "exprp", indent);
    dumpNodeListJson(str, assignp(), "assignp", indent);
    dumpNodeListJson(str, varp(), "varp", indent);
    }
    const char* AstComment::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstComment::broken(); }
    void AstComment::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstComment::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstComment::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstCompareNN::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstCompareNN::broken(); }
    void AstCompareNN::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstCompareNN::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstCompareNN::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstConcat::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstConcat::broken(); }
    void AstConcat::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstConcat::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstConcat::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstConcatN::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstConcatN::broken(); }
    void AstConcatN::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstConcatN::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstConcatN::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstCond::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeCond::brokenGen());
    return AstCond::broken(); }
    void AstCond::cloneRelinkGen() {
    AstNodeCond::cloneRelinkGen();
    }
    void AstCond::dumpJsonGen(std::ostream& str) const {
    AstNodeCond::dumpJson(str);
    }
    void AstCond::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, condp(), "condp", indent);
    dumpNodeListJson(str, thenp(), "thenp", indent);
    dumpNodeListJson(str, elsep(), "elsep", indent);
    }
    const char* AstCondBound::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeCond::brokenGen());
    return AstCondBound::broken(); }
    void AstCondBound::cloneRelinkGen() {
    AstNodeCond::cloneRelinkGen();
    }
    void AstCondBound::dumpJsonGen(std::ostream& str) const {
    AstNodeCond::dumpJson(str);
    }
    void AstCondBound::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, condp(), "condp", indent);
    dumpNodeListJson(str, thenp(), "thenp", indent);
    dumpNodeListJson(str, elsep(), "elsep", indent);
    }
    const char* AstConsAssoc::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstConsAssoc::broken(); }
    void AstConsAssoc::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstConsAssoc::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstConsAssoc::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, defaultp(), "defaultp", indent);
    }
    const char* AstConsDynArray::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstConsDynArray::broken(); }
    void AstConsDynArray::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstConsDynArray::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstConsDynArray::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstConsPackMember::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstConsPackMember::broken(); }
    void AstConsPackMember::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstConsPackMember::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstConsPackMember::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstConsPackUOrStruct::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstConsPackUOrStruct::broken(); }
    void AstConsPackUOrStruct::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstConsPackUOrStruct::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstConsPackUOrStruct::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, membersp(), "membersp", indent);
    }
    const char* AstConsQueue::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstConsQueue::broken(); }
    void AstConsQueue::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstConsQueue::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstConsQueue::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstConsWildcard::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstConsWildcard::broken(); }
    void AstConsWildcard::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstConsWildcard::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstConsWildcard::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, defaultp(), "defaultp", indent);
    }
    const char* AstConst::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstConst::broken(); }
    void AstConst::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstConst::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstConst::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstConstDType::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDType::brokenGen());
    BROKEN_RTN(m_refDTypep && !m_refDTypep->brokeExists());
    return AstConstDType::broken(); }
    void AstConstDType::cloneRelinkGen() {
    AstNodeDType::cloneRelinkGen();
    if (m_refDTypep && m_refDTypep->clonep()) m_refDTypep = m_refDTypep->clonep();
    }
    void AstConstDType::dumpJsonGen(std::ostream& str) const {
    AstNodeDType::dumpJson(str);
    dumpJsonPtr(str, "refDTypep", m_refDTypep);
    }
    void AstConstDType::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, childDTypep(), "childDTypep", indent);
    }
    const char* AstConstPool::brokenGen() const {
    BROKEN_RTN(!m_modp);
    BROKEN_RTN(!m_modp->brokeExists());
    BROKEN_RTN(!m_scopep);
    BROKEN_RTN(!m_scopep->brokeExists());
    return AstConstPool::broken(); }
    void AstConstPool::cloneRelinkGen() {
    if (m_modp && m_modp->clonep()) m_modp = m_modp->clonep();
    if (m_scopep && m_scopep->clonep()) m_scopep = m_scopep->clonep();
    }
    void AstConstPool::dumpJsonGen(std::ostream& str) const {
    dumpJsonPtr(str, "modp", m_modp);
    dumpJsonPtr(str, "scopep", m_scopep);
    }
    void AstConstPool::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, modulep(), "modulep", indent);
    }
    const char* AstConstraint::brokenGen() const {
    return AstConstraint::broken(); }
    void AstConstraint::cloneRelinkGen() {
    }
    void AstConstraint::dumpJsonGen(std::ostream& str) const {
    }
    void AstConstraint::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, itemsp(), "itemsp", indent);
    }
    const char* AstConstraintBefore::brokenGen() const {
    return AstConstraintBefore::broken(); }
    void AstConstraintBefore::cloneRelinkGen() {
    }
    void AstConstraintBefore::dumpJsonGen(std::ostream& str) const {
    }
    void AstConstraintBefore::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhssp(), "lhssp", indent);
    dumpNodeListJson(str, rhssp(), "rhssp", indent);
    }
    const char* AstConstraintExpr::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstConstraintExpr::broken(); }
    void AstConstraintExpr::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstConstraintExpr::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstConstraintExpr::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, exprp(), "exprp", indent);
    }
    const char* AstConstraintForeach::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeForeach::brokenGen());
    return AstConstraintForeach::broken(); }
    void AstConstraintForeach::cloneRelinkGen() {
    AstNodeForeach::cloneRelinkGen();
    }
    void AstConstraintForeach::dumpJsonGen(std::ostream& str) const {
    AstNodeForeach::dumpJson(str);
    }
    void AstConstraintForeach::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, arrayp(), "arrayp", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    }
    const char* AstConstraintIf::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeIf::brokenGen());
    return AstConstraintIf::broken(); }
    void AstConstraintIf::cloneRelinkGen() {
    AstNodeIf::cloneRelinkGen();
    }
    void AstConstraintIf::dumpJsonGen(std::ostream& str) const {
    AstNodeIf::dumpJson(str);
    }
    void AstConstraintIf::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, condp(), "condp", indent);
    dumpNodeListJson(str, thensp(), "thensp", indent);
    dumpNodeListJson(str, elsesp(), "elsesp", indent);
    }
    const char* AstConstraintRef::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    BROKEN_RTN(m_classOrPackagep && !m_classOrPackagep->brokeExists());
    return AstConstraintRef::broken(); }
    void AstConstraintRef::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    if (m_classOrPackagep && m_classOrPackagep->clonep()) m_classOrPackagep = m_classOrPackagep->clonep();
    }
    void AstConstraintRef::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    dumpJsonPtr(str, "classOrPackagep", m_classOrPackagep);
    }
    void AstConstraintRef::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, scopeNamep(), "scopeNamep", indent);
    }
    const char* AstConstraintRefDType::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDType::brokenGen());
    return AstConstraintRefDType::broken(); }
    void AstConstraintRefDType::cloneRelinkGen() {
    AstNodeDType::cloneRelinkGen();
    }
    void AstConstraintRefDType::dumpJsonGen(std::ostream& str) const {
    AstNodeDType::dumpJson(str);
    }
    void AstConstraintRefDType::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstConstraintUnique::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstConstraintUnique::broken(); }
    void AstConstraintUnique::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstConstraintUnique::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstConstraintUnique::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, rangesp(), "rangesp", indent);
    }
    const char* AstContinue::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstContinue::broken(); }
    void AstContinue::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstContinue::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstContinue::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstCosD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeSystemUniopD::brokenGen());
    return AstCosD::broken(); }
    void AstCosD::cloneRelinkGen() {
    AstNodeSystemUniopD::cloneRelinkGen();
    }
    void AstCosD::dumpJsonGen(std::ostream& str) const {
    AstNodeSystemUniopD::dumpJson(str);
    }
    void AstCosD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstCoshD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeSystemUniopD::brokenGen());
    return AstCoshD::broken(); }
    void AstCoshD::cloneRelinkGen() {
    AstNodeSystemUniopD::cloneRelinkGen();
    }
    void AstCoshD::dumpJsonGen(std::ostream& str) const {
    AstNodeSystemUniopD::dumpJson(str);
    }
    void AstCoshD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstCountBits::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeQuadop::brokenGen());
    return AstCountBits::broken(); }
    void AstCountBits::cloneRelinkGen() {
    AstNodeQuadop::cloneRelinkGen();
    }
    void AstCountBits::dumpJsonGen(std::ostream& str) const {
    AstNodeQuadop::dumpJson(str);
    }
    void AstCountBits::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    dumpNodeListJson(str, thsp(), "thsp", indent);
    dumpNodeListJson(str, fhsp(), "fhsp", indent);
    }
    const char* AstCountOnes::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstCountOnes::broken(); }
    void AstCountOnes::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstCountOnes::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstCountOnes::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstCover::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeCoverOrAssert::brokenGen());
    return AstCover::broken(); }
    void AstCover::cloneRelinkGen() {
    AstNodeCoverOrAssert::cloneRelinkGen();
    }
    void AstCover::dumpJsonGen(std::ostream& str) const {
    AstNodeCoverOrAssert::dumpJson(str);
    }
    void AstCover::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, propp(), "propp", indent);
    dumpNodeListJson(str, sentreep(), "sentreep", indent);
    dumpNodeListJson(str, coverincsp(), "coverincsp", indent);
    dumpNodeListJson(str, passsp(), "passsp", indent);
    }
    const char* AstCoverDecl::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    BROKEN_RTN(m_dataDeclp && !m_dataDeclp->brokeExists());
    return AstCoverDecl::broken(); }
    void AstCoverDecl::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    if (m_dataDeclp && m_dataDeclp->clonep()) m_dataDeclp = m_dataDeclp->clonep();
    }
    void AstCoverDecl::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    dumpJsonPtr(str, "dataDeclp", m_dataDeclp);
    }
    void AstCoverDecl::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstCoverInc::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    BROKEN_RTN(!m_declp);
    BROKEN_RTN(!m_declp->brokeExists());
    return AstCoverInc::broken(); }
    void AstCoverInc::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    if (m_declp && m_declp->clonep()) m_declp = m_declp->clonep();
    }
    void AstCoverInc::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    dumpJsonPtr(str, "declp", m_declp);
    }
    void AstCoverInc::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstCoverToggle::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstCoverToggle::broken(); }
    void AstCoverToggle::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstCoverToggle::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstCoverToggle::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, incp(), "incp", indent);
    dumpNodeListJson(str, origp(), "origp", indent);
    dumpNodeListJson(str, changep(), "changep", indent);
    }
    const char* AstCvtDynArrayToPacked::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstCvtDynArrayToPacked::broken(); }
    void AstCvtDynArrayToPacked::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstCvtDynArrayToPacked::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstCvtDynArrayToPacked::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fromp(), "fromp", indent);
    }
    const char* AstCvtPackString::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstCvtPackString::broken(); }
    void AstCvtPackString::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstCvtPackString::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstCvtPackString::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstCvtPackedToDynArray::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstCvtPackedToDynArray::broken(); }
    void AstCvtPackedToDynArray::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstCvtPackedToDynArray::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstCvtPackedToDynArray::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fromp(), "fromp", indent);
    }
    const char* AstCvtPackedToUnpackArray::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstCvtPackedToUnpackArray::broken(); }
    void AstCvtPackedToUnpackArray::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstCvtPackedToUnpackArray::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstCvtPackedToUnpackArray::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fromp(), "fromp", indent);
    }
    const char* AstCvtUnpackArrayToPacked::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstCvtUnpackArrayToPacked::broken(); }
    void AstCvtUnpackArrayToPacked::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstCvtUnpackArrayToPacked::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstCvtUnpackArrayToPacked::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fromp(), "fromp", indent);
    }
    const char* AstDefImplicitDType::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDType::brokenGen());
    return AstDefImplicitDType::broken(); }
    void AstDefImplicitDType::cloneRelinkGen() {
    AstNodeDType::cloneRelinkGen();
    }
    void AstDefImplicitDType::dumpJsonGen(std::ostream& str) const {
    AstNodeDType::dumpJson(str);
    }
    void AstDefImplicitDType::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, childDTypep(), "childDTypep", indent);
    }
    const char* AstDefParam::brokenGen() const {
    return AstDefParam::broken(); }
    void AstDefParam::cloneRelinkGen() {
    }
    void AstDefParam::dumpJsonGen(std::ostream& str) const {
    }
    void AstDefParam::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstDelay::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstDelay::broken(); }
    void AstDelay::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstDelay::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstDelay::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    }
    const char* AstDisable::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstDisable::broken(); }
    void AstDisable::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstDisable::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstDisable::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstDisableFork::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstDisableFork::broken(); }
    void AstDisableFork::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstDisableFork::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstDisableFork::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstDisplay::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstDisplay::broken(); }
    void AstDisplay::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstDisplay::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstDisplay::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fmtp(), "fmtp", indent);
    dumpNodeListJson(str, filep(), "filep", indent);
    }
    const char* AstDistChiSquare::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDistBiop::brokenGen());
    return AstDistChiSquare::broken(); }
    void AstDistChiSquare::cloneRelinkGen() {
    AstNodeDistBiop::cloneRelinkGen();
    }
    void AstDistChiSquare::dumpJsonGen(std::ostream& str) const {
    AstNodeDistBiop::dumpJson(str);
    }
    void AstDistChiSquare::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstDistErlang::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDistTriop::brokenGen());
    return AstDistErlang::broken(); }
    void AstDistErlang::cloneRelinkGen() {
    AstNodeDistTriop::cloneRelinkGen();
    }
    void AstDistErlang::dumpJsonGen(std::ostream& str) const {
    AstNodeDistTriop::dumpJson(str);
    }
    void AstDistErlang::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    dumpNodeListJson(str, thsp(), "thsp", indent);
    }
    const char* AstDistExponential::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDistBiop::brokenGen());
    return AstDistExponential::broken(); }
    void AstDistExponential::cloneRelinkGen() {
    AstNodeDistBiop::cloneRelinkGen();
    }
    void AstDistExponential::dumpJsonGen(std::ostream& str) const {
    AstNodeDistBiop::dumpJson(str);
    }
    void AstDistExponential::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstDistItem::brokenGen() const {
    return AstDistItem::broken(); }
    void AstDistItem::cloneRelinkGen() {
    }
    void AstDistItem::dumpJsonGen(std::ostream& str) const {
    }
    void AstDistItem::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, rangep(), "rangep", indent);
    dumpNodeListJson(str, weightp(), "weightp", indent);
    }
    const char* AstDistNormal::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDistTriop::brokenGen());
    return AstDistNormal::broken(); }
    void AstDistNormal::cloneRelinkGen() {
    AstNodeDistTriop::cloneRelinkGen();
    }
    void AstDistNormal::dumpJsonGen(std::ostream& str) const {
    AstNodeDistTriop::dumpJson(str);
    }
    void AstDistNormal::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    dumpNodeListJson(str, thsp(), "thsp", indent);
    }
    const char* AstDistPoisson::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDistBiop::brokenGen());
    return AstDistPoisson::broken(); }
    void AstDistPoisson::cloneRelinkGen() {
    AstNodeDistBiop::cloneRelinkGen();
    }
    void AstDistPoisson::dumpJsonGen(std::ostream& str) const {
    AstNodeDistBiop::dumpJson(str);
    }
    void AstDistPoisson::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstDistT::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDistBiop::brokenGen());
    return AstDistT::broken(); }
    void AstDistT::cloneRelinkGen() {
    AstNodeDistBiop::cloneRelinkGen();
    }
    void AstDistT::dumpJsonGen(std::ostream& str) const {
    AstNodeDistBiop::dumpJson(str);
    }
    void AstDistT::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstDistUniform::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDistTriop::brokenGen());
    return AstDistUniform::broken(); }
    void AstDistUniform::cloneRelinkGen() {
    AstNodeDistTriop::cloneRelinkGen();
    }
    void AstDistUniform::dumpJsonGen(std::ostream& str) const {
    AstNodeDistTriop::dumpJson(str);
    }
    void AstDistUniform::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    dumpNodeListJson(str, thsp(), "thsp", indent);
    }
    const char* AstDiv::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstDiv::broken(); }
    void AstDiv::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstDiv::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstDiv::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstDivD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstDivD::broken(); }
    void AstDivD::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstDivD::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstDivD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstDivS::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstDivS::broken(); }
    void AstDivS::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstDivS::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstDivS::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstDoWhile::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstDoWhile::broken(); }
    void AstDoWhile::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstDoWhile::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstDoWhile::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, condp(), "condp", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    }
    const char* AstDot::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstDot::broken(); }
    void AstDot::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstDot::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstDot::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstDpiExport::brokenGen() const {
    return AstDpiExport::broken(); }
    void AstDpiExport::cloneRelinkGen() {
    }
    void AstDpiExport::dumpJsonGen(std::ostream& str) const {
    }
    void AstDpiExport::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstDumpCtl::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstDumpCtl::broken(); }
    void AstDumpCtl::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstDumpCtl::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstDumpCtl::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, exprp(), "exprp", indent);
    }
    const char* AstDynArrayDType::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDType::brokenGen());
    BROKEN_RTN(m_refDTypep && !m_refDTypep->brokeExists());
    return AstDynArrayDType::broken(); }
    void AstDynArrayDType::cloneRelinkGen() {
    AstNodeDType::cloneRelinkGen();
    if (m_refDTypep && m_refDTypep->clonep()) m_refDTypep = m_refDTypep->clonep();
    }
    void AstDynArrayDType::dumpJsonGen(std::ostream& str) const {
    AstNodeDType::dumpJson(str);
    dumpJsonPtr(str, "refDTypep", m_refDTypep);
    }
    void AstDynArrayDType::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, childDTypep(), "childDTypep", indent);
    }
    const char* AstElabDisplay::brokenGen() const {
    return AstElabDisplay::broken(); }
    void AstElabDisplay::cloneRelinkGen() {
    }
    void AstElabDisplay::dumpJsonGen(std::ostream& str) const {
    }
    void AstElabDisplay::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fmtp(), "fmtp", indent);
    }
    const char* AstEmpty::brokenGen() const {
    return AstEmpty::broken(); }
    void AstEmpty::cloneRelinkGen() {
    }
    void AstEmpty::dumpJsonGen(std::ostream& str) const {
    }
    void AstEmpty::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstEmptyQueue::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstEmptyQueue::broken(); }
    void AstEmptyQueue::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstEmptyQueue::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstEmptyQueue::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstEmptyQueueDType::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDType::brokenGen());
    return AstEmptyQueueDType::broken(); }
    void AstEmptyQueueDType::cloneRelinkGen() {
    AstNodeDType::cloneRelinkGen();
    }
    void AstEmptyQueueDType::dumpJsonGen(std::ostream& str) const {
    AstNodeDType::dumpJson(str);
    }
    void AstEmptyQueueDType::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstEnumDType::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDType::brokenGen());
    BROKEN_RTN(m_refDTypep && !m_refDTypep->brokeExists());
    return AstEnumDType::broken(); }
    void AstEnumDType::cloneRelinkGen() {
    AstNodeDType::cloneRelinkGen();
    if (m_refDTypep && m_refDTypep->clonep()) m_refDTypep = m_refDTypep->clonep();
    }
    void AstEnumDType::dumpJsonGen(std::ostream& str) const {
    AstNodeDType::dumpJson(str);
    dumpJsonPtr(str, "refDTypep", m_refDTypep);
    }
    void AstEnumDType::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, childDTypep(), "childDTypep", indent);
    dumpNodeListJson(str, itemsp(), "itemsp", indent);
    }
    const char* AstEnumItem::brokenGen() const {
    return AstEnumItem::broken(); }
    void AstEnumItem::cloneRelinkGen() {
    }
    void AstEnumItem::dumpJsonGen(std::ostream& str) const {
    }
    void AstEnumItem::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, rangep(), "rangep", indent);
    dumpNodeListJson(str, valuep(), "valuep", indent);
    }
    const char* AstEnumItemRef::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    BROKEN_RTN(!m_itemp);
    BROKEN_RTN(!m_itemp->brokeExists());
    BROKEN_RTN(m_classOrPackagep && !m_classOrPackagep->brokeExists());
    return AstEnumItemRef::broken(); }
    void AstEnumItemRef::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    if (m_itemp && m_itemp->clonep()) m_itemp = m_itemp->clonep();
    if (m_classOrPackagep && m_classOrPackagep->clonep()) m_classOrPackagep = m_classOrPackagep->clonep();
    }
    void AstEnumItemRef::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    dumpJsonPtr(str, "itemp", m_itemp);
    dumpJsonPtr(str, "classOrPackagep", m_classOrPackagep);
    }
    void AstEnumItemRef::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstEq::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiCom::brokenGen());
    return AstEq::broken(); }
    void AstEq::cloneRelinkGen() {
    AstNodeBiCom::cloneRelinkGen();
    }
    void AstEq::dumpJsonGen(std::ostream& str) const {
    AstNodeBiCom::dumpJson(str);
    }
    void AstEq::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstEqCase::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiCom::brokenGen());
    return AstEqCase::broken(); }
    void AstEqCase::cloneRelinkGen() {
    AstNodeBiCom::cloneRelinkGen();
    }
    void AstEqCase::dumpJsonGen(std::ostream& str) const {
    AstNodeBiCom::dumpJson(str);
    }
    void AstEqCase::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstEqD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiCom::brokenGen());
    return AstEqD::broken(); }
    void AstEqD::cloneRelinkGen() {
    AstNodeBiCom::cloneRelinkGen();
    }
    void AstEqD::dumpJsonGen(std::ostream& str) const {
    AstNodeBiCom::dumpJson(str);
    }
    void AstEqD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstEqN::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiCom::brokenGen());
    return AstEqN::broken(); }
    void AstEqN::cloneRelinkGen() {
    AstNodeBiCom::cloneRelinkGen();
    }
    void AstEqN::dumpJsonGen(std::ostream& str) const {
    AstNodeBiCom::dumpJson(str);
    }
    void AstEqN::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstEqT::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiCom::brokenGen());
    return AstEqT::broken(); }
    void AstEqT::cloneRelinkGen() {
    AstNodeBiCom::cloneRelinkGen();
    }
    void AstEqT::dumpJsonGen(std::ostream& str) const {
    AstNodeBiCom::dumpJson(str);
    }
    void AstEqT::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstEqWild::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstEqWild::broken(); }
    void AstEqWild::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstEqWild::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstEqWild::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstEventControl::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstEventControl::broken(); }
    void AstEventControl::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstEventControl::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstEventControl::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, sensesp(), "sensesp", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    }
    const char* AstExecGraph::brokenGen() const {
    return AstExecGraph::broken(); }
    void AstExecGraph::cloneRelinkGen() {
    }
    void AstExecGraph::dumpJsonGen(std::ostream& str) const {
    }
    void AstExecGraph::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, mTaskBodiesp(), "mTaskBodiesp", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    }
    const char* AstExpD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeSystemUniopD::brokenGen());
    return AstExpD::broken(); }
    void AstExpD::cloneRelinkGen() {
    AstNodeSystemUniopD::cloneRelinkGen();
    }
    void AstExpD::dumpJsonGen(std::ostream& str) const {
    AstNodeSystemUniopD::dumpJson(str);
    }
    void AstExpD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstExprStmt::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstExprStmt::broken(); }
    void AstExprStmt::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstExprStmt::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstExprStmt::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    dumpNodeListJson(str, resultp(), "resultp", indent);
    }
    const char* AstExtend::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstExtend::broken(); }
    void AstExtend::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstExtend::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstExtend::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstExtendS::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstExtendS::broken(); }
    void AstExtendS::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstExtendS::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstExtendS::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstFClose::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstFClose::broken(); }
    void AstFClose::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstFClose::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstFClose::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, filep(), "filep", indent);
    }
    const char* AstFEof::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstFEof::broken(); }
    void AstFEof::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstFEof::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstFEof::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstFError::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstFError::broken(); }
    void AstFError::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstFError::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstFError::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, filep(), "filep", indent);
    dumpNodeListJson(str, strp(), "strp", indent);
    }
    const char* AstFFlush::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstFFlush::broken(); }
    void AstFFlush::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstFFlush::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstFFlush::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, filep(), "filep", indent);
    }
    const char* AstFGetC::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstFGetC::broken(); }
    void AstFGetC::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstFGetC::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstFGetC::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstFGetS::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstFGetS::broken(); }
    void AstFGetS::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstFGetS::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstFGetS::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstFOpen::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstFOpen::broken(); }
    void AstFOpen::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstFOpen::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstFOpen::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, filenamep(), "filenamep", indent);
    dumpNodeListJson(str, modep(), "modep", indent);
    }
    const char* AstFOpenMcd::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstFOpenMcd::broken(); }
    void AstFOpenMcd::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstFOpenMcd::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstFOpenMcd::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, filenamep(), "filenamep", indent);
    }
    const char* AstFRead::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstFRead::broken(); }
    void AstFRead::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstFRead::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstFRead::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, memp(), "memp", indent);
    dumpNodeListJson(str, filep(), "filep", indent);
    dumpNodeListJson(str, startp(), "startp", indent);
    dumpNodeListJson(str, countp(), "countp", indent);
    }
    const char* AstFRewind::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstFRewind::broken(); }
    void AstFRewind::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstFRewind::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstFRewind::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, filep(), "filep", indent);
    }
    const char* AstFScanF::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstFScanF::broken(); }
    void AstFScanF::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstFScanF::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstFScanF::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, exprsp(), "exprsp", indent);
    dumpNodeListJson(str, filep(), "filep", indent);
    }
    const char* AstFSeek::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstFSeek::broken(); }
    void AstFSeek::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstFSeek::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstFSeek::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, filep(), "filep", indent);
    dumpNodeListJson(str, offset(), "offset", indent);
    dumpNodeListJson(str, operation(), "operation", indent);
    }
    const char* AstFTell::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstFTell::broken(); }
    void AstFTell::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstFTell::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstFTell::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, filep(), "filep", indent);
    }
    const char* AstFUngetC::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstFUngetC::broken(); }
    void AstFUngetC::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstFUngetC::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstFUngetC::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstFell::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstFell::broken(); }
    void AstFell::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstFell::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstFell::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, exprp(), "exprp", indent);
    dumpNodeListJson(str, sentreep(), "sentreep", indent);
    }
    const char* AstFinal::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeProcedure::brokenGen());
    return AstFinal::broken(); }
    void AstFinal::cloneRelinkGen() {
    AstNodeProcedure::cloneRelinkGen();
    }
    void AstFinal::dumpJsonGen(std::ostream& str) const {
    AstNodeProcedure::dumpJson(str);
    }
    void AstFinal::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    }
    const char* AstFinish::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstFinish::broken(); }
    void AstFinish::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstFinish::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstFinish::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstFireEvent::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstFireEvent::broken(); }
    void AstFireEvent::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstFireEvent::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstFireEvent::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, operandp(), "operandp", indent);
    }
    const char* AstFloorD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeSystemUniopD::brokenGen());
    return AstFloorD::broken(); }
    void AstFloorD::cloneRelinkGen() {
    AstNodeSystemUniopD::cloneRelinkGen();
    }
    void AstFloorD::dumpJsonGen(std::ostream& str) const {
    AstNodeSystemUniopD::dumpJson(str);
    }
    void AstFloorD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstForeach::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeForeach::brokenGen());
    return AstForeach::broken(); }
    void AstForeach::cloneRelinkGen() {
    AstNodeForeach::cloneRelinkGen();
    }
    void AstForeach::dumpJsonGen(std::ostream& str) const {
    AstNodeForeach::dumpJson(str);
    }
    void AstForeach::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, arrayp(), "arrayp", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    }
    const char* AstFork::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBlock::brokenGen());
    return AstFork::broken(); }
    void AstFork::cloneRelinkGen() {
    AstNodeBlock::cloneRelinkGen();
    }
    void AstFork::dumpJsonGen(std::ostream& str) const {
    AstNodeBlock::dumpJson(str);
    }
    void AstFork::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, initsp(), "initsp", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    }
    const char* AstFunc::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeFTask::brokenGen());
    return AstFunc::broken(); }
    void AstFunc::cloneRelinkGen() {
    AstNodeFTask::cloneRelinkGen();
    }
    void AstFunc::dumpJsonGen(std::ostream& str) const {
    AstNodeFTask::dumpJson(str);
    }
    void AstFunc::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fvarp(), "fvarp", indent);
    dumpNodeListJson(str, classOrPackagep(), "classOrPackagep", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    dumpNodeListJson(str, scopeNamep(), "scopeNamep", indent);
    }
    const char* AstFuncRef::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeFTaskRef::brokenGen());
    return AstFuncRef::broken(); }
    void AstFuncRef::cloneRelinkGen() {
    AstNodeFTaskRef::cloneRelinkGen();
    }
    void AstFuncRef::dumpJsonGen(std::ostream& str) const {
    AstNodeFTaskRef::dumpJson(str);
    }
    void AstFuncRef::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, namep(), "namep", indent);
    dumpNodeListJson(str, pinsp(), "pinsp", indent);
    dumpNodeListJson(str, scopeNamep(), "scopeNamep", indent);
    }
    const char* AstGatePin::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstGatePin::broken(); }
    void AstGatePin::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstGatePin::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstGatePin::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, exprp(), "exprp", indent);
    dumpNodeListJson(str, rangep(), "rangep", indent);
    }
    const char* AstGenCase::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeCase::brokenGen());
    return AstGenCase::broken(); }
    void AstGenCase::cloneRelinkGen() {
    AstNodeCase::cloneRelinkGen();
    }
    void AstGenCase::dumpJsonGen(std::ostream& str) const {
    AstNodeCase::dumpJson(str);
    }
    void AstGenCase::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, exprp(), "exprp", indent);
    dumpNodeListJson(str, itemsp(), "itemsp", indent);
    dumpNodeListJson(str, notParallelp(), "notParallelp", indent);
    }
    const char* AstGenFor::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeFor::brokenGen());
    return AstGenFor::broken(); }
    void AstGenFor::cloneRelinkGen() {
    AstNodeFor::cloneRelinkGen();
    }
    void AstGenFor::dumpJsonGen(std::ostream& str) const {
    AstNodeFor::dumpJson(str);
    }
    void AstGenFor::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, initsp(), "initsp", indent);
    dumpNodeListJson(str, condp(), "condp", indent);
    dumpNodeListJson(str, incsp(), "incsp", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    }
    const char* AstGenIf::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeIf::brokenGen());
    return AstGenIf::broken(); }
    void AstGenIf::cloneRelinkGen() {
    AstNodeIf::cloneRelinkGen();
    }
    void AstGenIf::dumpJsonGen(std::ostream& str) const {
    AstNodeIf::dumpJson(str);
    }
    void AstGenIf::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, condp(), "condp", indent);
    dumpNodeListJson(str, thensp(), "thensp", indent);
    dumpNodeListJson(str, elsesp(), "elsesp", indent);
    }
    const char* AstGetcN::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstGetcN::broken(); }
    void AstGetcN::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstGetcN::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstGetcN::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstGetcRefN::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstGetcRefN::broken(); }
    void AstGetcRefN::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstGetcRefN::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstGetcRefN::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstGt::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstGt::broken(); }
    void AstGt::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstGt::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstGt::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstGtD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstGtD::broken(); }
    void AstGtD::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstGtD::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstGtD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstGtN::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstGtN::broken(); }
    void AstGtN::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstGtN::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstGtN::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstGtS::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstGtS::broken(); }
    void AstGtS::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstGtS::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstGtS::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstGte::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstGte::broken(); }
    void AstGte::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstGte::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstGte::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstGteD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstGteD::broken(); }
    void AstGteD::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstGteD::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstGteD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstGteN::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstGteN::broken(); }
    void AstGteN::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstGteN::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstGteN::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstGteS::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstGteS::broken(); }
    void AstGteS::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstGteS::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstGteS::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstHypotD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeSystemBiopD::brokenGen());
    return AstHypotD::broken(); }
    void AstHypotD::cloneRelinkGen() {
    AstNodeSystemBiopD::cloneRelinkGen();
    }
    void AstHypotD::dumpJsonGen(std::ostream& str) const {
    AstNodeSystemBiopD::dumpJson(str);
    }
    void AstHypotD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstISToRD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstISToRD::broken(); }
    void AstISToRD::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstISToRD::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstISToRD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstIToRD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstIToRD::broken(); }
    void AstIToRD::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstIToRD::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstIToRD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstIf::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeIf::brokenGen());
    return AstIf::broken(); }
    void AstIf::cloneRelinkGen() {
    AstNodeIf::cloneRelinkGen();
    }
    void AstIf::dumpJsonGen(std::ostream& str) const {
    AstNodeIf::dumpJson(str);
    }
    void AstIf::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, condp(), "condp", indent);
    dumpNodeListJson(str, thensp(), "thensp", indent);
    dumpNodeListJson(str, elsesp(), "elsesp", indent);
    }
    const char* AstIface::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeModule::brokenGen());
    return AstIface::broken(); }
    void AstIface::cloneRelinkGen() {
    AstNodeModule::cloneRelinkGen();
    }
    void AstIface::dumpJsonGen(std::ostream& str) const {
    AstNodeModule::dumpJson(str);
    }
    void AstIface::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, inlinesp(), "inlinesp", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    dumpNodeListJson(str, activesp(), "activesp", indent);
    }
    const char* AstIfaceRefDType::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDType::brokenGen());
    BROKEN_RTN(m_ifacep && !m_ifacep->brokeExists());
    BROKEN_RTN(m_cellp && !m_cellp->brokeExists());
    BROKEN_RTN(m_modportp && !m_modportp->brokeExists());
    return AstIfaceRefDType::broken(); }
    void AstIfaceRefDType::cloneRelinkGen() {
    AstNodeDType::cloneRelinkGen();
    if (m_ifacep && m_ifacep->clonep()) m_ifacep = m_ifacep->clonep();
    if (m_cellp && m_cellp->clonep()) m_cellp = m_cellp->clonep();
    if (m_modportp && m_modportp->clonep()) m_modportp = m_modportp->clonep();
    }
    void AstIfaceRefDType::dumpJsonGen(std::ostream& str) const {
    AstNodeDType::dumpJson(str);
    dumpJsonPtr(str, "ifacep", m_ifacep);
    dumpJsonPtr(str, "cellp", m_cellp);
    dumpJsonPtr(str, "modportp", m_modportp);
    }
    void AstIfaceRefDType::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, paramsp(), "paramsp", indent);
    }
    const char* AstImplication::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstImplication::broken(); }
    void AstImplication::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstImplication::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstImplication::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    dumpNodeListJson(str, sentreep(), "sentreep", indent);
    }
    const char* AstImplicit::brokenGen() const {
    return AstImplicit::broken(); }
    void AstImplicit::cloneRelinkGen() {
    }
    void AstImplicit::dumpJsonGen(std::ostream& str) const {
    }
    void AstImplicit::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, exprsp(), "exprsp", indent);
    }
    const char* AstInitArray::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstInitArray::broken(); }
    void AstInitArray::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstInitArray::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstInitArray::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, defaultp(), "defaultp", indent);
    dumpNodeListJson(str, initsp(), "initsp", indent);
    }
    const char* AstInitItem::brokenGen() const {
    return AstInitItem::broken(); }
    void AstInitItem::cloneRelinkGen() {
    }
    void AstInitItem::dumpJsonGen(std::ostream& str) const {
    }
    void AstInitItem::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, valuep(), "valuep", indent);
    }
    const char* AstInitial::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeProcedure::brokenGen());
    return AstInitial::broken(); }
    void AstInitial::cloneRelinkGen() {
    AstNodeProcedure::cloneRelinkGen();
    }
    void AstInitial::dumpJsonGen(std::ostream& str) const {
    AstNodeProcedure::dumpJson(str);
    }
    void AstInitial::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    }
    const char* AstInitialAutomatic::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeProcedure::brokenGen());
    return AstInitialAutomatic::broken(); }
    void AstInitialAutomatic::cloneRelinkGen() {
    AstNodeProcedure::cloneRelinkGen();
    }
    void AstInitialAutomatic::dumpJsonGen(std::ostream& str) const {
    AstNodeProcedure::dumpJson(str);
    }
    void AstInitialAutomatic::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    }
    const char* AstInitialStatic::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeProcedure::brokenGen());
    return AstInitialStatic::broken(); }
    void AstInitialStatic::cloneRelinkGen() {
    AstNodeProcedure::cloneRelinkGen();
    }
    void AstInitialStatic::dumpJsonGen(std::ostream& str) const {
    AstNodeProcedure::dumpJson(str);
    }
    void AstInitialStatic::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    }
    const char* AstInside::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstInside::broken(); }
    void AstInside::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstInside::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstInside::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, exprp(), "exprp", indent);
    dumpNodeListJson(str, itemsp(), "itemsp", indent);
    }
    const char* AstInsideRange::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstInsideRange::broken(); }
    void AstInsideRange::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstInsideRange::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstInsideRange::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstIntfRef::brokenGen() const {
    return AstIntfRef::broken(); }
    void AstIntfRef::cloneRelinkGen() {
    }
    void AstIntfRef::dumpJsonGen(std::ostream& str) const {
    }
    void AstIntfRef::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstIsUnbounded::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstIsUnbounded::broken(); }
    void AstIsUnbounded::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstIsUnbounded::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstIsUnbounded::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstIsUnknown::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstIsUnknown::broken(); }
    void AstIsUnknown::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstIsUnknown::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstIsUnknown::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstJumpBlock::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    BROKEN_RTN(!m_labelp);
    BROKEN_RTN(!m_labelp->brokeExists());
    return AstJumpBlock::broken(); }
    void AstJumpBlock::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    if (m_labelp && m_labelp->clonep()) m_labelp = m_labelp->clonep();
    }
    void AstJumpBlock::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    dumpJsonPtr(str, "labelp", m_labelp);
    }
    void AstJumpBlock::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    dumpNodeListJson(str, endStmtsp(), "endStmtsp", indent);
    }
    const char* AstJumpGo::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    BROKEN_RTN(!m_labelp);
    BROKEN_RTN(!m_labelp->brokeExists());
    return AstJumpGo::broken(); }
    void AstJumpGo::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    if (m_labelp && m_labelp->clonep()) m_labelp = m_labelp->clonep();
    }
    void AstJumpGo::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    dumpJsonPtr(str, "labelp", m_labelp);
    }
    void AstJumpGo::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstJumpLabel::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    BROKEN_RTN(!m_blockp);
    BROKEN_RTN(!m_blockp->brokeExists());
    return AstJumpLabel::broken(); }
    void AstJumpLabel::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    if (m_blockp && m_blockp->clonep()) m_blockp = m_blockp->clonep();
    }
    void AstJumpLabel::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    dumpJsonPtr(str, "blockp", m_blockp);
    }
    void AstJumpLabel::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstLambdaArgRef::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstLambdaArgRef::broken(); }
    void AstLambdaArgRef::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstLambdaArgRef::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstLambdaArgRef::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstLenN::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstLenN::broken(); }
    void AstLenN::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstLenN::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstLenN::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstLet::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeFTask::brokenGen());
    return AstLet::broken(); }
    void AstLet::cloneRelinkGen() {
    AstNodeFTask::cloneRelinkGen();
    }
    void AstLet::dumpJsonGen(std::ostream& str) const {
    AstNodeFTask::dumpJson(str);
    }
    void AstLet::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fvarp(), "fvarp", indent);
    dumpNodeListJson(str, classOrPackagep(), "classOrPackagep", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    dumpNodeListJson(str, scopeNamep(), "scopeNamep", indent);
    }
    const char* AstLog10D::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeSystemUniopD::brokenGen());
    return AstLog10D::broken(); }
    void AstLog10D::cloneRelinkGen() {
    AstNodeSystemUniopD::cloneRelinkGen();
    }
    void AstLog10D::dumpJsonGen(std::ostream& str) const {
    AstNodeSystemUniopD::dumpJson(str);
    }
    void AstLog10D::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstLogAnd::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstLogAnd::broken(); }
    void AstLogAnd::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstLogAnd::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstLogAnd::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstLogD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeSystemUniopD::brokenGen());
    return AstLogD::broken(); }
    void AstLogD::cloneRelinkGen() {
    AstNodeSystemUniopD::cloneRelinkGen();
    }
    void AstLogD::dumpJsonGen(std::ostream& str) const {
    AstNodeSystemUniopD::dumpJson(str);
    }
    void AstLogD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstLogEq::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiCom::brokenGen());
    return AstLogEq::broken(); }
    void AstLogEq::cloneRelinkGen() {
    AstNodeBiCom::cloneRelinkGen();
    }
    void AstLogEq::dumpJsonGen(std::ostream& str) const {
    AstNodeBiCom::dumpJson(str);
    }
    void AstLogEq::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstLogIf::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstLogIf::broken(); }
    void AstLogIf::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstLogIf::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstLogIf::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstLogNot::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstLogNot::broken(); }
    void AstLogNot::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstLogNot::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstLogNot::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstLogOr::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstLogOr::broken(); }
    void AstLogOr::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstLogOr::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstLogOr::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstLt::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstLt::broken(); }
    void AstLt::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstLt::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstLt::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstLtD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstLtD::broken(); }
    void AstLtD::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstLtD::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstLtD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstLtN::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstLtN::broken(); }
    void AstLtN::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstLtN::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstLtN::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstLtS::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstLtS::broken(); }
    void AstLtS::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstLtS::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstLtS::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstLte::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstLte::broken(); }
    void AstLte::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstLte::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstLte::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstLteD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstLteD::broken(); }
    void AstLteD::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstLteD::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstLteD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstLteN::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstLteN::broken(); }
    void AstLteN::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstLteN::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstLteN::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstLteS::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstLteS::broken(); }
    void AstLteS::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstLteS::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstLteS::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstMTaskBody::brokenGen() const {
    return AstMTaskBody::broken(); }
    void AstMTaskBody::cloneRelinkGen() {
    }
    void AstMTaskBody::dumpJsonGen(std::ostream& str) const {
    }
    void AstMTaskBody::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    }
    const char* AstMemberDType::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDType::brokenGen());
    BROKEN_RTN(m_refDTypep && !m_refDTypep->brokeExists());
    return AstMemberDType::broken(); }
    void AstMemberDType::cloneRelinkGen() {
    AstNodeDType::cloneRelinkGen();
    if (m_refDTypep && m_refDTypep->clonep()) m_refDTypep = m_refDTypep->clonep();
    }
    void AstMemberDType::dumpJsonGen(std::ostream& str) const {
    AstNodeDType::dumpJson(str);
    dumpJsonPtr(str, "refDTypep", m_refDTypep);
    }
    void AstMemberDType::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, childDTypep(), "childDTypep", indent);
    dumpNodeListJson(str, valuep(), "valuep", indent);
    }
    const char* AstMemberSel::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    BROKEN_RTN(m_varp && !m_varp->brokeExists());
    return AstMemberSel::broken(); }
    void AstMemberSel::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    if (m_varp && m_varp->clonep()) m_varp = m_varp->clonep();
    }
    void AstMemberSel::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    dumpJsonPtr(str, "varp", m_varp);
    }
    void AstMemberSel::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fromp(), "fromp", indent);
    }
    const char* AstMethodCall::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeFTaskRef::brokenGen());
    return AstMethodCall::broken(); }
    void AstMethodCall::cloneRelinkGen() {
    AstNodeFTaskRef::cloneRelinkGen();
    }
    void AstMethodCall::dumpJsonGen(std::ostream& str) const {
    AstNodeFTaskRef::dumpJson(str);
    }
    void AstMethodCall::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, namep(), "namep", indent);
    dumpNodeListJson(str, fromp(), "fromp", indent);
    dumpNodeListJson(str, pinsp(), "pinsp", indent);
    dumpNodeListJson(str, scopeNamep(), "scopeNamep", indent);
    }
    const char* AstModDiv::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstModDiv::broken(); }
    void AstModDiv::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstModDiv::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstModDiv::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstModDivS::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstModDivS::broken(); }
    void AstModDivS::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstModDivS::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstModDivS::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstModport::brokenGen() const {
    return AstModport::broken(); }
    void AstModport::cloneRelinkGen() {
    }
    void AstModport::dumpJsonGen(std::ostream& str) const {
    }
    void AstModport::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, varsp(), "varsp", indent);
    }
    const char* AstModportFTaskRef::brokenGen() const {
    BROKEN_RTN(m_ftaskp && !m_ftaskp->brokeExists());
    return AstModportFTaskRef::broken(); }
    void AstModportFTaskRef::cloneRelinkGen() {
    if (m_ftaskp && m_ftaskp->clonep()) m_ftaskp = m_ftaskp->clonep();
    }
    void AstModportFTaskRef::dumpJsonGen(std::ostream& str) const {
    dumpJsonPtr(str, "ftaskp", m_ftaskp);
    }
    void AstModportFTaskRef::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstModportVarRef::brokenGen() const {
    BROKEN_RTN(m_varp && !m_varp->brokeExists());
    return AstModportVarRef::broken(); }
    void AstModportVarRef::cloneRelinkGen() {
    if (m_varp && m_varp->clonep()) m_varp = m_varp->clonep();
    }
    void AstModportVarRef::dumpJsonGen(std::ostream& str) const {
    dumpJsonPtr(str, "varp", m_varp);
    }
    void AstModportVarRef::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstModule::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeModule::brokenGen());
    return AstModule::broken(); }
    void AstModule::cloneRelinkGen() {
    AstNodeModule::cloneRelinkGen();
    }
    void AstModule::dumpJsonGen(std::ostream& str) const {
    AstNodeModule::dumpJson(str);
    }
    void AstModule::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, inlinesp(), "inlinesp", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    dumpNodeListJson(str, activesp(), "activesp", indent);
    }
    const char* AstMonitorOff::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstMonitorOff::broken(); }
    void AstMonitorOff::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstMonitorOff::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstMonitorOff::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstMul::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiComAsv::brokenGen());
    return AstMul::broken(); }
    void AstMul::cloneRelinkGen() {
    AstNodeBiComAsv::cloneRelinkGen();
    }
    void AstMul::dumpJsonGen(std::ostream& str) const {
    AstNodeBiComAsv::dumpJson(str);
    }
    void AstMul::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstMulD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiComAsv::brokenGen());
    return AstMulD::broken(); }
    void AstMulD::cloneRelinkGen() {
    AstNodeBiComAsv::cloneRelinkGen();
    }
    void AstMulD::dumpJsonGen(std::ostream& str) const {
    AstNodeBiComAsv::dumpJson(str);
    }
    void AstMulD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstMulS::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiComAsv::brokenGen());
    return AstMulS::broken(); }
    void AstMulS::cloneRelinkGen() {
    AstNodeBiComAsv::cloneRelinkGen();
    }
    void AstMulS::dumpJsonGen(std::ostream& str) const {
    AstNodeBiComAsv::dumpJson(str);
    }
    void AstMulS::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstNToI::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstNToI::broken(); }
    void AstNToI::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstNToI::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstNToI::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstNegate::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstNegate::broken(); }
    void AstNegate::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstNegate::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstNegate::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstNegateD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstNegateD::broken(); }
    void AstNegateD::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstNegateD::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstNegateD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstNeq::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiCom::brokenGen());
    return AstNeq::broken(); }
    void AstNeq::cloneRelinkGen() {
    AstNodeBiCom::cloneRelinkGen();
    }
    void AstNeq::dumpJsonGen(std::ostream& str) const {
    AstNodeBiCom::dumpJson(str);
    }
    void AstNeq::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstNeqCase::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiCom::brokenGen());
    return AstNeqCase::broken(); }
    void AstNeqCase::cloneRelinkGen() {
    AstNodeBiCom::cloneRelinkGen();
    }
    void AstNeqCase::dumpJsonGen(std::ostream& str) const {
    AstNodeBiCom::dumpJson(str);
    }
    void AstNeqCase::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstNeqD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiCom::brokenGen());
    return AstNeqD::broken(); }
    void AstNeqD::cloneRelinkGen() {
    AstNodeBiCom::cloneRelinkGen();
    }
    void AstNeqD::dumpJsonGen(std::ostream& str) const {
    AstNodeBiCom::dumpJson(str);
    }
    void AstNeqD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstNeqN::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiCom::brokenGen());
    return AstNeqN::broken(); }
    void AstNeqN::cloneRelinkGen() {
    AstNodeBiCom::cloneRelinkGen();
    }
    void AstNeqN::dumpJsonGen(std::ostream& str) const {
    AstNodeBiCom::dumpJson(str);
    }
    void AstNeqN::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstNeqT::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiCom::brokenGen());
    return AstNeqT::broken(); }
    void AstNeqT::cloneRelinkGen() {
    AstNodeBiCom::cloneRelinkGen();
    }
    void AstNeqT::dumpJsonGen(std::ostream& str) const {
    AstNodeBiCom::dumpJson(str);
    }
    void AstNeqT::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstNeqWild::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstNeqWild::broken(); }
    void AstNeqWild::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstNeqWild::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstNeqWild::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstNetlist::brokenGen() const {
    BROKEN_RTN(!m_typeTablep);
    BROKEN_RTN(!m_typeTablep->brokeExists());
    BROKEN_RTN(!m_constPoolp);
    BROKEN_RTN(!m_constPoolp->brokeExists());
    BROKEN_RTN(m_dollarUnitPkgp && !m_dollarUnitPkgp->brokeExists());
    BROKEN_RTN(m_stdPackagep && !m_stdPackagep->brokeExists());
    BROKEN_RTN(m_evalp && !m_evalp->brokeExists());
    BROKEN_RTN(m_evalNbap && !m_evalNbap->brokeExists());
    BROKEN_RTN(m_dpiExportTriggerp && !m_dpiExportTriggerp->brokeExists());
    BROKEN_RTN(m_delaySchedulerp && !m_delaySchedulerp->brokeExists());
    BROKEN_RTN(m_nbaEventp && !m_nbaEventp->brokeExists());
    BROKEN_RTN(m_nbaEventTriggerp && !m_nbaEventTriggerp->brokeExists());
    BROKEN_RTN(m_topScopep && !m_topScopep->brokeExists());
    return AstNetlist::broken(); }
    void AstNetlist::cloneRelinkGen() {
    if (m_typeTablep && m_typeTablep->clonep()) m_typeTablep = m_typeTablep->clonep();
    if (m_constPoolp && m_constPoolp->clonep()) m_constPoolp = m_constPoolp->clonep();
    if (m_dollarUnitPkgp && m_dollarUnitPkgp->clonep()) m_dollarUnitPkgp = m_dollarUnitPkgp->clonep();
    if (m_stdPackagep && m_stdPackagep->clonep()) m_stdPackagep = m_stdPackagep->clonep();
    if (m_evalp && m_evalp->clonep()) m_evalp = m_evalp->clonep();
    if (m_evalNbap && m_evalNbap->clonep()) m_evalNbap = m_evalNbap->clonep();
    if (m_dpiExportTriggerp && m_dpiExportTriggerp->clonep()) m_dpiExportTriggerp = m_dpiExportTriggerp->clonep();
    if (m_delaySchedulerp && m_delaySchedulerp->clonep()) m_delaySchedulerp = m_delaySchedulerp->clonep();
    if (m_nbaEventp && m_nbaEventp->clonep()) m_nbaEventp = m_nbaEventp->clonep();
    if (m_nbaEventTriggerp && m_nbaEventTriggerp->clonep()) m_nbaEventTriggerp = m_nbaEventTriggerp->clonep();
    if (m_topScopep && m_topScopep->clonep()) m_topScopep = m_topScopep->clonep();
    }
    void AstNetlist::dumpJsonGen(std::ostream& str) const {
    dumpJsonPtr(str, "typeTablep", m_typeTablep);
    dumpJsonPtr(str, "constPoolp", m_constPoolp);
    dumpJsonPtr(str, "dollarUnitPkgp", m_dollarUnitPkgp);
    dumpJsonPtr(str, "stdPackagep", m_stdPackagep);
    dumpJsonPtr(str, "evalp", m_evalp);
    dumpJsonPtr(str, "evalNbap", m_evalNbap);
    dumpJsonPtr(str, "dpiExportTriggerp", m_dpiExportTriggerp);
    dumpJsonPtr(str, "delaySchedulerp", m_delaySchedulerp);
    dumpJsonPtr(str, "nbaEventp", m_nbaEventp);
    dumpJsonPtr(str, "nbaEventTriggerp", m_nbaEventTriggerp);
    dumpJsonPtr(str, "topScopep", m_topScopep);
    }
    void AstNetlist::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, modulesp(), "modulesp", indent);
    dumpNodeListJson(str, filesp(), "filesp", indent);
    dumpNodeListJson(str, miscsp(), "miscsp", indent);
    }
    const char* AstNew::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeFTaskRef::brokenGen());
    return AstNew::broken(); }
    void AstNew::cloneRelinkGen() {
    AstNodeFTaskRef::cloneRelinkGen();
    }
    void AstNew::dumpJsonGen(std::ostream& str) const {
    AstNodeFTaskRef::dumpJson(str);
    }
    void AstNew::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, namep(), "namep", indent);
    dumpNodeListJson(str, pinsp(), "pinsp", indent);
    dumpNodeListJson(str, scopeNamep(), "scopeNamep", indent);
    }
    const char* AstNewCopy::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstNewCopy::broken(); }
    void AstNewCopy::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstNewCopy::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstNewCopy::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstNewDynamic::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstNewDynamic::broken(); }
    void AstNewDynamic::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstNewDynamic::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstNewDynamic::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, sizep(), "sizep", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstNodeArrayDType::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDType::brokenGen());
    BROKEN_RTN(m_refDTypep && !m_refDTypep->brokeExists());
    return AstNodeArrayDType::broken(); }
    void AstNodeArrayDType::cloneRelinkGen() {
    AstNodeDType::cloneRelinkGen();
    if (m_refDTypep && m_refDTypep->clonep()) m_refDTypep = m_refDTypep->clonep();
    }
    void AstNodeArrayDType::dumpJsonGen(std::ostream& str) const {
    AstNodeDType::dumpJson(str);
    dumpJsonPtr(str, "refDTypep", m_refDTypep);
    }
    void AstNodeArrayDType::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, childDTypep(), "childDTypep", indent);
    dumpNodeListJson(str, rangep(), "rangep", indent);
    }
    const char* AstNodeAssign::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstNodeAssign::broken(); }
    void AstNodeAssign::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstNodeAssign::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstNodeAssign::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, timingControlp(), "timingControlp", indent);
    }
    const char* AstNodeBiCom::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstNodeBiCom::broken(); }
    void AstNodeBiCom::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstNodeBiCom::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstNodeBiCom::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstNodeBiComAsv::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiCom::brokenGen());
    return AstNodeBiComAsv::broken(); }
    void AstNodeBiComAsv::cloneRelinkGen() {
    AstNodeBiCom::cloneRelinkGen();
    }
    void AstNodeBiComAsv::dumpJsonGen(std::ostream& str) const {
    AstNodeBiCom::dumpJson(str);
    }
    void AstNodeBiComAsv::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstNodeBiop::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstNodeBiop::broken(); }
    void AstNodeBiop::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstNodeBiop::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstNodeBiop::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstNodeBlock::brokenGen() const {
    return AstNodeBlock::broken(); }
    void AstNodeBlock::cloneRelinkGen() {
    }
    void AstNodeBlock::dumpJsonGen(std::ostream& str) const {
    }
    void AstNodeBlock::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    }
    const char* AstNodeCCall::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    BROKEN_RTN(!m_funcp);
    BROKEN_RTN(!m_funcp->brokeExists());
    return AstNodeCCall::broken(); }
    void AstNodeCCall::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    if (m_funcp && m_funcp->clonep()) m_funcp = m_funcp->clonep();
    }
    void AstNodeCCall::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    dumpJsonPtr(str, "funcp", m_funcp);
    }
    void AstNodeCCall::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, argsp(), "argsp", indent);
    }
    const char* AstNodeCase::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstNodeCase::broken(); }
    void AstNodeCase::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstNodeCase::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstNodeCase::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, exprp(), "exprp", indent);
    dumpNodeListJson(str, itemsp(), "itemsp", indent);
    dumpNodeListJson(str, notParallelp(), "notParallelp", indent);
    }
    const char* AstNodeCond::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeTriop::brokenGen());
    return AstNodeCond::broken(); }
    void AstNodeCond::cloneRelinkGen() {
    AstNodeTriop::cloneRelinkGen();
    }
    void AstNodeCond::dumpJsonGen(std::ostream& str) const {
    AstNodeTriop::dumpJson(str);
    }
    void AstNodeCond::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, condp(), "condp", indent);
    dumpNodeListJson(str, thenp(), "thenp", indent);
    dumpNodeListJson(str, elsep(), "elsep", indent);
    }
    const char* AstNodeCoverOrAssert::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstNodeCoverOrAssert::broken(); }
    void AstNodeCoverOrAssert::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstNodeCoverOrAssert::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstNodeCoverOrAssert::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, propp(), "propp", indent);
    dumpNodeListJson(str, sentreep(), "sentreep", indent);
    dumpNodeListJson(str, passsp(), "passsp", indent);
    }
    const char* AstNodeDType::brokenGen() const {
    return AstNodeDType::broken(); }
    void AstNodeDType::cloneRelinkGen() {
    }
    void AstNodeDType::dumpJsonGen(std::ostream& str) const {
    }
    void AstNodeDType::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstNodeDistBiop::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstNodeDistBiop::broken(); }
    void AstNodeDistBiop::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstNodeDistBiop::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstNodeDistBiop::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstNodeDistTriop::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeTriop::brokenGen());
    return AstNodeDistTriop::broken(); }
    void AstNodeDistTriop::cloneRelinkGen() {
    AstNodeTriop::cloneRelinkGen();
    }
    void AstNodeDistTriop::dumpJsonGen(std::ostream& str) const {
    AstNodeTriop::dumpJson(str);
    }
    void AstNodeDistTriop::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    dumpNodeListJson(str, thsp(), "thsp", indent);
    }
    const char* AstNodeExpr::brokenGen() const {
    return AstNodeExpr::broken(); }
    void AstNodeExpr::cloneRelinkGen() {
    }
    void AstNodeExpr::dumpJsonGen(std::ostream& str) const {
    }
    void AstNodeExpr::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstNodeFTask::brokenGen() const {
    return AstNodeFTask::broken(); }
    void AstNodeFTask::cloneRelinkGen() {
    }
    void AstNodeFTask::dumpJsonGen(std::ostream& str) const {
    }
    void AstNodeFTask::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fvarp(), "fvarp", indent);
    dumpNodeListJson(str, classOrPackagep(), "classOrPackagep", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    dumpNodeListJson(str, scopeNamep(), "scopeNamep", indent);
    }
    const char* AstNodeFTaskRef::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    BROKEN_RTN(m_taskp && !m_taskp->brokeExists());
    BROKEN_RTN(m_classOrPackagep && !m_classOrPackagep->brokeExists());
    return AstNodeFTaskRef::broken(); }
    void AstNodeFTaskRef::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    if (m_taskp && m_taskp->clonep()) m_taskp = m_taskp->clonep();
    if (m_classOrPackagep && m_classOrPackagep->clonep()) m_classOrPackagep = m_classOrPackagep->clonep();
    }
    void AstNodeFTaskRef::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    dumpJsonPtr(str, "taskp", m_taskp);
    dumpJsonPtr(str, "classOrPackagep", m_classOrPackagep);
    }
    void AstNodeFTaskRef::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, namep(), "namep", indent);
    dumpNodeListJson(str, pinsp(), "pinsp", indent);
    dumpNodeListJson(str, scopeNamep(), "scopeNamep", indent);
    }
    const char* AstNodeFile::brokenGen() const {
    return AstNodeFile::broken(); }
    void AstNodeFile::cloneRelinkGen() {
    }
    void AstNodeFile::dumpJsonGen(std::ostream& str) const {
    }
    void AstNodeFile::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, tblockp(), "tblockp", indent);
    }
    const char* AstNodeFor::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstNodeFor::broken(); }
    void AstNodeFor::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstNodeFor::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstNodeFor::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, initsp(), "initsp", indent);
    dumpNodeListJson(str, condp(), "condp", indent);
    dumpNodeListJson(str, incsp(), "incsp", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    }
    const char* AstNodeForeach::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstNodeForeach::broken(); }
    void AstNodeForeach::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstNodeForeach::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstNodeForeach::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, arrayp(), "arrayp", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    }
    const char* AstNodeIf::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstNodeIf::broken(); }
    void AstNodeIf::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstNodeIf::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstNodeIf::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, condp(), "condp", indent);
    dumpNodeListJson(str, thensp(), "thensp", indent);
    dumpNodeListJson(str, elsesp(), "elsesp", indent);
    }
    const char* AstNodeModule::brokenGen() const {
    return AstNodeModule::broken(); }
    void AstNodeModule::cloneRelinkGen() {
    }
    void AstNodeModule::dumpJsonGen(std::ostream& str) const {
    }
    void AstNodeModule::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, inlinesp(), "inlinesp", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    dumpNodeListJson(str, activesp(), "activesp", indent);
    }
    const char* AstNodePreSel::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstNodePreSel::broken(); }
    void AstNodePreSel::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstNodePreSel::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstNodePreSel::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fromp(), "fromp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    dumpNodeListJson(str, thsp(), "thsp", indent);
    dumpNodeListJson(str, attrp(), "attrp", indent);
    }
    const char* AstNodeProcedure::brokenGen() const {
    return AstNodeProcedure::broken(); }
    void AstNodeProcedure::cloneRelinkGen() {
    }
    void AstNodeProcedure::dumpJsonGen(std::ostream& str) const {
    }
    void AstNodeProcedure::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    }
    const char* AstNodeQuadop::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstNodeQuadop::broken(); }
    void AstNodeQuadop::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstNodeQuadop::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstNodeQuadop::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    dumpNodeListJson(str, thsp(), "thsp", indent);
    dumpNodeListJson(str, fhsp(), "fhsp", indent);
    }
    const char* AstNodeRange::brokenGen() const {
    return AstNodeRange::broken(); }
    void AstNodeRange::cloneRelinkGen() {
    }
    void AstNodeRange::dumpJsonGen(std::ostream& str) const {
    }
    void AstNodeRange::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstNodeReadWriteMem::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstNodeReadWriteMem::broken(); }
    void AstNodeReadWriteMem::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstNodeReadWriteMem::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstNodeReadWriteMem::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, filenamep(), "filenamep", indent);
    dumpNodeListJson(str, memp(), "memp", indent);
    dumpNodeListJson(str, lsbp(), "lsbp", indent);
    dumpNodeListJson(str, msbp(), "msbp", indent);
    }
    const char* AstNodeSel::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstNodeSel::broken(); }
    void AstNodeSel::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstNodeSel::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstNodeSel::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fromp(), "fromp", indent);
    dumpNodeListJson(str, bitp(), "bitp", indent);
    }
    const char* AstNodeSimpleText::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeText::brokenGen());
    return AstNodeSimpleText::broken(); }
    void AstNodeSimpleText::cloneRelinkGen() {
    AstNodeText::cloneRelinkGen();
    }
    void AstNodeSimpleText::dumpJsonGen(std::ostream& str) const {
    AstNodeText::dumpJson(str);
    }
    void AstNodeSimpleText::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstNodeStmt::brokenGen() const {
    return AstNodeStmt::broken(); }
    void AstNodeStmt::cloneRelinkGen() {
    }
    void AstNodeStmt::dumpJsonGen(std::ostream& str) const {
    }
    void AstNodeStmt::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstNodeStream::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstNodeStream::broken(); }
    void AstNodeStream::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstNodeStream::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstNodeStream::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstNodeSystemBiopD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstNodeSystemBiopD::broken(); }
    void AstNodeSystemBiopD::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstNodeSystemBiopD::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstNodeSystemBiopD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstNodeSystemUniopD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstNodeSystemUniopD::broken(); }
    void AstNodeSystemUniopD::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstNodeSystemUniopD::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstNodeSystemUniopD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstNodeTermop::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstNodeTermop::broken(); }
    void AstNodeTermop::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstNodeTermop::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstNodeTermop::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstNodeText::brokenGen() const {
    return AstNodeText::broken(); }
    void AstNodeText::cloneRelinkGen() {
    }
    void AstNodeText::dumpJsonGen(std::ostream& str) const {
    }
    void AstNodeText::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstNodeTriop::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstNodeTriop::broken(); }
    void AstNodeTriop::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstNodeTriop::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstNodeTriop::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    dumpNodeListJson(str, thsp(), "thsp", indent);
    }
    const char* AstNodeUOrStructDType::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDType::brokenGen());
    BROKEN_RTN(m_classOrPackagep && !m_classOrPackagep->brokeExists());
    return AstNodeUOrStructDType::broken(); }
    void AstNodeUOrStructDType::cloneRelinkGen() {
    AstNodeDType::cloneRelinkGen();
    if (m_classOrPackagep && m_classOrPackagep->clonep()) m_classOrPackagep = m_classOrPackagep->clonep();
    }
    void AstNodeUOrStructDType::dumpJsonGen(std::ostream& str) const {
    AstNodeDType::dumpJson(str);
    dumpJsonPtr(str, "classOrPackagep", m_classOrPackagep);
    }
    void AstNodeUOrStructDType::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, membersp(), "membersp", indent);
    }
    const char* AstNodeUniop::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstNodeUniop::broken(); }
    void AstNodeUniop::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstNodeUniop::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstNodeUniop::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstNodeVarRef::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    BROKEN_RTN(m_varp && !m_varp->brokeExists());
    BROKEN_RTN(m_varScopep && !m_varScopep->brokeExists());
    BROKEN_RTN(m_classOrPackagep && !m_classOrPackagep->brokeExists());
    return AstNodeVarRef::broken(); }
    void AstNodeVarRef::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    if (m_varp && m_varp->clonep()) m_varp = m_varp->clonep();
    if (m_varScopep && m_varScopep->clonep()) m_varScopep = m_varScopep->clonep();
    if (m_classOrPackagep && m_classOrPackagep->clonep()) m_classOrPackagep = m_classOrPackagep->clonep();
    }
    void AstNodeVarRef::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    dumpJsonPtr(str, "varp", m_varp);
    dumpJsonPtr(str, "varScopep", m_varScopep);
    dumpJsonPtr(str, "classOrPackagep", m_classOrPackagep);
    }
    void AstNodeVarRef::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstNot::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstNot::broken(); }
    void AstNot::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstNot::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstNot::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstNotFoundModule::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeModule::brokenGen());
    return AstNotFoundModule::broken(); }
    void AstNotFoundModule::cloneRelinkGen() {
    AstNodeModule::cloneRelinkGen();
    }
    void AstNotFoundModule::dumpJsonGen(std::ostream& str) const {
    AstNodeModule::dumpJson(str);
    }
    void AstNotFoundModule::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, inlinesp(), "inlinesp", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    dumpNodeListJson(str, activesp(), "activesp", indent);
    }
    const char* AstNullCheck::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstNullCheck::broken(); }
    void AstNullCheck::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstNullCheck::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstNullCheck::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstOneHot::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstOneHot::broken(); }
    void AstOneHot::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstOneHot::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstOneHot::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstOneHot0::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstOneHot0::broken(); }
    void AstOneHot0::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstOneHot0::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstOneHot0::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstOr::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiComAsv::brokenGen());
    return AstOr::broken(); }
    void AstOr::cloneRelinkGen() {
    AstNodeBiComAsv::cloneRelinkGen();
    }
    void AstOr::dumpJsonGen(std::ostream& str) const {
    AstNodeBiComAsv::dumpJson(str);
    }
    void AstOr::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstPackArrayDType::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeArrayDType::brokenGen());
    return AstPackArrayDType::broken(); }
    void AstPackArrayDType::cloneRelinkGen() {
    AstNodeArrayDType::cloneRelinkGen();
    }
    void AstPackArrayDType::dumpJsonGen(std::ostream& str) const {
    AstNodeArrayDType::dumpJson(str);
    }
    void AstPackArrayDType::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, childDTypep(), "childDTypep", indent);
    dumpNodeListJson(str, rangep(), "rangep", indent);
    }
    const char* AstPackage::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeModule::brokenGen());
    return AstPackage::broken(); }
    void AstPackage::cloneRelinkGen() {
    AstNodeModule::cloneRelinkGen();
    }
    void AstPackage::dumpJsonGen(std::ostream& str) const {
    AstNodeModule::dumpJson(str);
    }
    void AstPackage::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, inlinesp(), "inlinesp", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    dumpNodeListJson(str, activesp(), "activesp", indent);
    }
    const char* AstPackageExport::brokenGen() const {
    BROKEN_RTN(m_packagep && !m_packagep->brokeExists());
    return AstPackageExport::broken(); }
    void AstPackageExport::cloneRelinkGen() {
    if (m_packagep && m_packagep->clonep()) m_packagep = m_packagep->clonep();
    }
    void AstPackageExport::dumpJsonGen(std::ostream& str) const {
    dumpJsonPtr(str, "packagep", m_packagep);
    }
    void AstPackageExport::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstPackageExportStarStar::brokenGen() const {
    return AstPackageExportStarStar::broken(); }
    void AstPackageExportStarStar::cloneRelinkGen() {
    }
    void AstPackageExportStarStar::dumpJsonGen(std::ostream& str) const {
    }
    void AstPackageExportStarStar::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstPackageImport::brokenGen() const {
    BROKEN_RTN(m_packagep && !m_packagep->brokeExists());
    return AstPackageImport::broken(); }
    void AstPackageImport::cloneRelinkGen() {
    if (m_packagep && m_packagep->clonep()) m_packagep = m_packagep->clonep();
    }
    void AstPackageImport::dumpJsonGen(std::ostream& str) const {
    dumpJsonPtr(str, "packagep", m_packagep);
    }
    void AstPackageImport::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstParamTypeDType::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDType::brokenGen());
    return AstParamTypeDType::broken(); }
    void AstParamTypeDType::cloneRelinkGen() {
    AstNodeDType::cloneRelinkGen();
    }
    void AstParamTypeDType::dumpJsonGen(std::ostream& str) const {
    AstNodeDType::dumpJson(str);
    }
    void AstParamTypeDType::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, childDTypep(), "childDTypep", indent);
    }
    const char* AstParseRef::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstParseRef::broken(); }
    void AstParseRef::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstParseRef::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstParseRef::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, ftaskrefp(), "ftaskrefp", indent);
    }
    const char* AstParseTypeDType::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDType::brokenGen());
    return AstParseTypeDType::broken(); }
    void AstParseTypeDType::cloneRelinkGen() {
    AstNodeDType::cloneRelinkGen();
    }
    void AstParseTypeDType::dumpJsonGen(std::ostream& str) const {
    AstNodeDType::dumpJson(str);
    }
    void AstParseTypeDType::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstPast::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstPast::broken(); }
    void AstPast::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstPast::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstPast::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, exprp(), "exprp", indent);
    dumpNodeListJson(str, ticksp(), "ticksp", indent);
    dumpNodeListJson(str, sentreep(), "sentreep", indent);
    }
    const char* AstPatMember::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstPatMember::broken(); }
    void AstPatMember::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstPatMember::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstPatMember::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhssp(), "lhssp", indent);
    dumpNodeListJson(str, keyp(), "keyp", indent);
    dumpNodeListJson(str, repp(), "repp", indent);
    }
    const char* AstPattern::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstPattern::broken(); }
    void AstPattern::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstPattern::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstPattern::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, childDTypep(), "childDTypep", indent);
    dumpNodeListJson(str, itemsp(), "itemsp", indent);
    }
    const char* AstPin::brokenGen() const {
    BROKEN_RTN(m_modVarp && !m_modVarp->brokeExists());
    BROKEN_RTN(m_modPTypep && !m_modPTypep->brokeExists());
    return AstPin::broken(); }
    void AstPin::cloneRelinkGen() {
    if (m_modVarp && m_modVarp->clonep()) m_modVarp = m_modVarp->clonep();
    if (m_modPTypep && m_modPTypep->clonep()) m_modPTypep = m_modPTypep->clonep();
    }
    void AstPin::dumpJsonGen(std::ostream& str) const {
    dumpJsonPtr(str, "modVarp", m_modVarp);
    dumpJsonPtr(str, "modPTypep", m_modPTypep);
    }
    void AstPin::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, exprp(), "exprp", indent);
    }
    const char* AstPort::brokenGen() const {
    return AstPort::broken(); }
    void AstPort::cloneRelinkGen() {
    }
    void AstPort::dumpJsonGen(std::ostream& str) const {
    }
    void AstPort::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, exprp(), "exprp", indent);
    }
    const char* AstPostAdd::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeTriop::brokenGen());
    return AstPostAdd::broken(); }
    void AstPostAdd::cloneRelinkGen() {
    AstNodeTriop::cloneRelinkGen();
    }
    void AstPostAdd::dumpJsonGen(std::ostream& str) const {
    AstNodeTriop::dumpJson(str);
    }
    void AstPostAdd::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    dumpNodeListJson(str, thsp(), "thsp", indent);
    }
    const char* AstPostSub::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeTriop::brokenGen());
    return AstPostSub::broken(); }
    void AstPostSub::cloneRelinkGen() {
    AstNodeTriop::cloneRelinkGen();
    }
    void AstPostSub::dumpJsonGen(std::ostream& str) const {
    AstNodeTriop::dumpJson(str);
    }
    void AstPostSub::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    dumpNodeListJson(str, thsp(), "thsp", indent);
    }
    const char* AstPow::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstPow::broken(); }
    void AstPow::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstPow::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstPow::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstPowD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstPowD::broken(); }
    void AstPowD::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstPowD::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstPowD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstPowSS::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstPowSS::broken(); }
    void AstPowSS::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstPowSS::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstPowSS::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstPowSU::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstPowSU::broken(); }
    void AstPowSU::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstPowSU::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstPowSU::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstPowUS::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstPowUS::broken(); }
    void AstPowUS::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstPowUS::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstPowUS::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstPragma::brokenGen() const {
    return AstPragma::broken(); }
    void AstPragma::cloneRelinkGen() {
    }
    void AstPragma::dumpJsonGen(std::ostream& str) const {
    }
    void AstPragma::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstPreAdd::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeTriop::brokenGen());
    return AstPreAdd::broken(); }
    void AstPreAdd::cloneRelinkGen() {
    AstNodeTriop::cloneRelinkGen();
    }
    void AstPreAdd::dumpJsonGen(std::ostream& str) const {
    AstNodeTriop::dumpJson(str);
    }
    void AstPreAdd::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    dumpNodeListJson(str, thsp(), "thsp", indent);
    }
    const char* AstPreSub::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeTriop::brokenGen());
    return AstPreSub::broken(); }
    void AstPreSub::cloneRelinkGen() {
    AstNodeTriop::cloneRelinkGen();
    }
    void AstPreSub::dumpJsonGen(std::ostream& str) const {
    AstNodeTriop::dumpJson(str);
    }
    void AstPreSub::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    dumpNodeListJson(str, thsp(), "thsp", indent);
    }
    const char* AstPrimitive::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeModule::brokenGen());
    return AstPrimitive::broken(); }
    void AstPrimitive::cloneRelinkGen() {
    AstNodeModule::cloneRelinkGen();
    }
    void AstPrimitive::dumpJsonGen(std::ostream& str) const {
    AstNodeModule::dumpJson(str);
    }
    void AstPrimitive::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, inlinesp(), "inlinesp", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    dumpNodeListJson(str, activesp(), "activesp", indent);
    }
    const char* AstPrintTimeScale::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstPrintTimeScale::broken(); }
    void AstPrintTimeScale::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstPrintTimeScale::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstPrintTimeScale::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstPropSpec::brokenGen() const {
    return AstPropSpec::broken(); }
    void AstPropSpec::cloneRelinkGen() {
    }
    void AstPropSpec::dumpJsonGen(std::ostream& str) const {
    }
    void AstPropSpec::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, sensesp(), "sensesp", indent);
    dumpNodeListJson(str, disablep(), "disablep", indent);
    dumpNodeListJson(str, propp(), "propp", indent);
    }
    const char* AstProperty::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeFTask::brokenGen());
    return AstProperty::broken(); }
    void AstProperty::cloneRelinkGen() {
    AstNodeFTask::cloneRelinkGen();
    }
    void AstProperty::dumpJsonGen(std::ostream& str) const {
    AstNodeFTask::dumpJson(str);
    }
    void AstProperty::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fvarp(), "fvarp", indent);
    dumpNodeListJson(str, classOrPackagep(), "classOrPackagep", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    dumpNodeListJson(str, scopeNamep(), "scopeNamep", indent);
    }
    const char* AstPull::brokenGen() const {
    return AstPull::broken(); }
    void AstPull::cloneRelinkGen() {
    }
    void AstPull::dumpJsonGen(std::ostream& str) const {
    }
    void AstPull::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstPutcN::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeTriop::brokenGen());
    return AstPutcN::broken(); }
    void AstPutcN::cloneRelinkGen() {
    AstNodeTriop::cloneRelinkGen();
    }
    void AstPutcN::dumpJsonGen(std::ostream& str) const {
    AstNodeTriop::dumpJson(str);
    }
    void AstPutcN::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    dumpNodeListJson(str, thsp(), "thsp", indent);
    }
    const char* AstQueueDType::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDType::brokenGen());
    BROKEN_RTN(m_refDTypep && !m_refDTypep->brokeExists());
    return AstQueueDType::broken(); }
    void AstQueueDType::cloneRelinkGen() {
    AstNodeDType::cloneRelinkGen();
    if (m_refDTypep && m_refDTypep->clonep()) m_refDTypep = m_refDTypep->clonep();
    }
    void AstQueueDType::dumpJsonGen(std::ostream& str) const {
    AstNodeDType::dumpJson(str);
    dumpJsonPtr(str, "refDTypep", m_refDTypep);
    }
    void AstQueueDType::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, childDTypep(), "childDTypep", indent);
    dumpNodeListJson(str, boundp(), "boundp", indent);
    }
    const char* AstRToIRoundS::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstRToIRoundS::broken(); }
    void AstRToIRoundS::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstRToIRoundS::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstRToIRoundS::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstRToIS::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstRToIS::broken(); }
    void AstRToIS::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstRToIS::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstRToIS::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstRand::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstRand::broken(); }
    void AstRand::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstRand::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstRand::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, seedp(), "seedp", indent);
    }
    const char* AstRandCase::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstRandCase::broken(); }
    void AstRandCase::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstRandCase::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstRandCase::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, itemsp(), "itemsp", indent);
    }
    const char* AstRandRNG::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstRandRNG::broken(); }
    void AstRandRNG::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstRandRNG::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstRandRNG::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstRange::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeRange::brokenGen());
    return AstRange::broken(); }
    void AstRange::cloneRelinkGen() {
    AstNodeRange::cloneRelinkGen();
    }
    void AstRange::dumpJsonGen(std::ostream& str) const {
    AstNodeRange::dumpJson(str);
    }
    void AstRange::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, leftp(), "leftp", indent);
    dumpNodeListJson(str, rightp(), "rightp", indent);
    }
    const char* AstReadMem::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeReadWriteMem::brokenGen());
    return AstReadMem::broken(); }
    void AstReadMem::cloneRelinkGen() {
    AstNodeReadWriteMem::cloneRelinkGen();
    }
    void AstReadMem::dumpJsonGen(std::ostream& str) const {
    AstNodeReadWriteMem::dumpJson(str);
    }
    void AstReadMem::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, filenamep(), "filenamep", indent);
    dumpNodeListJson(str, memp(), "memp", indent);
    dumpNodeListJson(str, lsbp(), "lsbp", indent);
    dumpNodeListJson(str, msbp(), "msbp", indent);
    }
    const char* AstRealToBits::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstRealToBits::broken(); }
    void AstRealToBits::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstRealToBits::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstRealToBits::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstRedAnd::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstRedAnd::broken(); }
    void AstRedAnd::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstRedAnd::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstRedAnd::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstRedOr::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstRedOr::broken(); }
    void AstRedOr::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstRedOr::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstRedOr::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstRedXor::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstRedXor::broken(); }
    void AstRedXor::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstRedXor::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstRedXor::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstRefDType::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDType::brokenGen());
    BROKEN_RTN(m_typedefp && !m_typedefp->brokeExists());
    BROKEN_RTN(m_refDTypep && !m_refDTypep->brokeExists());
    BROKEN_RTN(m_classOrPackagep && !m_classOrPackagep->brokeExists());
    return AstRefDType::broken(); }
    void AstRefDType::cloneRelinkGen() {
    AstNodeDType::cloneRelinkGen();
    if (m_typedefp && m_typedefp->clonep()) m_typedefp = m_typedefp->clonep();
    if (m_refDTypep && m_refDTypep->clonep()) m_refDTypep = m_refDTypep->clonep();
    if (m_classOrPackagep && m_classOrPackagep->clonep()) m_classOrPackagep = m_classOrPackagep->clonep();
    }
    void AstRefDType::dumpJsonGen(std::ostream& str) const {
    AstNodeDType::dumpJson(str);
    dumpJsonPtr(str, "typedefp", m_typedefp);
    dumpJsonPtr(str, "refDTypep", m_refDTypep);
    dumpJsonPtr(str, "classOrPackagep", m_classOrPackagep);
    }
    void AstRefDType::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, typeofp(), "typeofp", indent);
    dumpNodeListJson(str, classOrPackageOpp(), "classOrPackageOpp", indent);
    dumpNodeListJson(str, paramsp(), "paramsp", indent);
    }
    const char* AstRelease::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstRelease::broken(); }
    void AstRelease::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstRelease::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstRelease::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstRepeat::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstRepeat::broken(); }
    void AstRepeat::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstRepeat::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstRepeat::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, countp(), "countp", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    }
    const char* AstReplicate::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstReplicate::broken(); }
    void AstReplicate::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstReplicate::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstReplicate::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, srcp(), "srcp", indent);
    dumpNodeListJson(str, countp(), "countp", indent);
    }
    const char* AstReplicateN::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstReplicateN::broken(); }
    void AstReplicateN::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstReplicateN::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstReplicateN::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstResizeLValue::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstResizeLValue::broken(); }
    void AstResizeLValue::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstResizeLValue::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstResizeLValue::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstRestrict::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeCoverOrAssert::brokenGen());
    return AstRestrict::broken(); }
    void AstRestrict::cloneRelinkGen() {
    AstNodeCoverOrAssert::cloneRelinkGen();
    }
    void AstRestrict::dumpJsonGen(std::ostream& str) const {
    AstNodeCoverOrAssert::dumpJson(str);
    }
    void AstRestrict::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, propp(), "propp", indent);
    dumpNodeListJson(str, sentreep(), "sentreep", indent);
    dumpNodeListJson(str, passsp(), "passsp", indent);
    }
    const char* AstReturn::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstReturn::broken(); }
    void AstReturn::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstReturn::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstReturn::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstRose::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstRose::broken(); }
    void AstRose::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstRose::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstRose::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, exprp(), "exprp", indent);
    dumpNodeListJson(str, sentreep(), "sentreep", indent);
    }
    const char* AstSFormat::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstSFormat::broken(); }
    void AstSFormat::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstSFormat::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstSFormat::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fmtp(), "fmtp", indent);
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstSFormatF::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstSFormatF::broken(); }
    void AstSFormatF::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstSFormatF::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstSFormatF::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, exprsp(), "exprsp", indent);
    dumpNodeListJson(str, scopeNamep(), "scopeNamep", indent);
    }
    const char* AstSScanF::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstSScanF::broken(); }
    void AstSScanF::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstSScanF::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstSScanF::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, exprsp(), "exprsp", indent);
    dumpNodeListJson(str, fromp(), "fromp", indent);
    }
    const char* AstSampleQueueDType::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDType::brokenGen());
    BROKEN_RTN(m_refDTypep && !m_refDTypep->brokeExists());
    return AstSampleQueueDType::broken(); }
    void AstSampleQueueDType::cloneRelinkGen() {
    AstNodeDType::cloneRelinkGen();
    if (m_refDTypep && m_refDTypep->clonep()) m_refDTypep = m_refDTypep->clonep();
    }
    void AstSampleQueueDType::dumpJsonGen(std::ostream& str) const {
    AstNodeDType::dumpJson(str);
    dumpJsonPtr(str, "refDTypep", m_refDTypep);
    }
    void AstSampleQueueDType::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, childDTypep(), "childDTypep", indent);
    }
    const char* AstSampled::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstSampled::broken(); }
    void AstSampled::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstSampled::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstSampled::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, exprp(), "exprp", indent);
    }
    const char* AstScCtor::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeText::brokenGen());
    return AstScCtor::broken(); }
    void AstScCtor::cloneRelinkGen() {
    AstNodeText::cloneRelinkGen();
    }
    void AstScCtor::dumpJsonGen(std::ostream& str) const {
    AstNodeText::dumpJson(str);
    }
    void AstScCtor::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstScDtor::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeText::brokenGen());
    return AstScDtor::broken(); }
    void AstScDtor::cloneRelinkGen() {
    AstNodeText::cloneRelinkGen();
    }
    void AstScDtor::dumpJsonGen(std::ostream& str) const {
    AstNodeText::dumpJson(str);
    }
    void AstScDtor::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstScHdr::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeText::brokenGen());
    return AstScHdr::broken(); }
    void AstScHdr::cloneRelinkGen() {
    AstNodeText::cloneRelinkGen();
    }
    void AstScHdr::dumpJsonGen(std::ostream& str) const {
    AstNodeText::dumpJson(str);
    }
    void AstScHdr::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstScImp::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeText::brokenGen());
    return AstScImp::broken(); }
    void AstScImp::cloneRelinkGen() {
    AstNodeText::cloneRelinkGen();
    }
    void AstScImp::dumpJsonGen(std::ostream& str) const {
    AstNodeText::dumpJson(str);
    }
    void AstScImp::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstScImpHdr::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeText::brokenGen());
    return AstScImpHdr::broken(); }
    void AstScImpHdr::cloneRelinkGen() {
    AstNodeText::cloneRelinkGen();
    }
    void AstScImpHdr::dumpJsonGen(std::ostream& str) const {
    AstNodeText::dumpJson(str);
    }
    void AstScImpHdr::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstScInt::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeText::brokenGen());
    return AstScInt::broken(); }
    void AstScInt::cloneRelinkGen() {
    AstNodeText::cloneRelinkGen();
    }
    void AstScInt::dumpJsonGen(std::ostream& str) const {
    AstNodeText::dumpJson(str);
    }
    void AstScInt::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstScope::brokenGen() const {
    BROKEN_RTN(m_aboveScopep && !m_aboveScopep->brokeExists());
    BROKEN_RTN(m_aboveCellp && !m_aboveCellp->brokeExists());
    BROKEN_RTN(!m_modp);
    BROKEN_RTN(!m_modp->brokeExists());
    return AstScope::broken(); }
    void AstScope::cloneRelinkGen() {
    if (m_aboveScopep && m_aboveScopep->clonep()) m_aboveScopep = m_aboveScopep->clonep();
    if (m_aboveCellp && m_aboveCellp->clonep()) m_aboveCellp = m_aboveCellp->clonep();
    if (m_modp && m_modp->clonep()) m_modp = m_modp->clonep();
    }
    void AstScope::dumpJsonGen(std::ostream& str) const {
    dumpJsonPtr(str, "aboveScopep", m_aboveScopep);
    dumpJsonPtr(str, "aboveCellp", m_aboveCellp);
    dumpJsonPtr(str, "modp", m_modp);
    }
    void AstScope::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, varsp(), "varsp", indent);
    dumpNodeListJson(str, blocksp(), "blocksp", indent);
    dumpNodeListJson(str, inlinesp(), "inlinesp", indent);
    }
    const char* AstScopeName::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstScopeName::broken(); }
    void AstScopeName::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstScopeName::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstScopeName::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, scopeAttrp(), "scopeAttrp", indent);
    dumpNodeListJson(str, scopeEntrp(), "scopeEntrp", indent);
    }
    const char* AstSel::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeTriop::brokenGen());
    return AstSel::broken(); }
    void AstSel::cloneRelinkGen() {
    AstNodeTriop::cloneRelinkGen();
    }
    void AstSel::dumpJsonGen(std::ostream& str) const {
    AstNodeTriop::dumpJson(str);
    }
    void AstSel::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fromp(), "fromp", indent);
    dumpNodeListJson(str, lsbp(), "lsbp", indent);
    dumpNodeListJson(str, widthp(), "widthp", indent);
    }
    const char* AstSelBit::brokenGen() const {
    BROKEN_BASE_RTN(AstNodePreSel::brokenGen());
    return AstSelBit::broken(); }
    void AstSelBit::cloneRelinkGen() {
    AstNodePreSel::cloneRelinkGen();
    }
    void AstSelBit::dumpJsonGen(std::ostream& str) const {
    AstNodePreSel::dumpJson(str);
    }
    void AstSelBit::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fromp(), "fromp", indent);
    dumpNodeListJson(str, bitp(), "bitp", indent);
    dumpNodeListJson(str, thsp(), "thsp", indent);
    dumpNodeListJson(str, attrp(), "attrp", indent);
    }
    const char* AstSelExtract::brokenGen() const {
    BROKEN_BASE_RTN(AstNodePreSel::brokenGen());
    return AstSelExtract::broken(); }
    void AstSelExtract::cloneRelinkGen() {
    AstNodePreSel::cloneRelinkGen();
    }
    void AstSelExtract::dumpJsonGen(std::ostream& str) const {
    AstNodePreSel::dumpJson(str);
    }
    void AstSelExtract::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fromp(), "fromp", indent);
    dumpNodeListJson(str, leftp(), "leftp", indent);
    dumpNodeListJson(str, rightp(), "rightp", indent);
    dumpNodeListJson(str, attrp(), "attrp", indent);
    }
    const char* AstSelLoopVars::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstSelLoopVars::broken(); }
    void AstSelLoopVars::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstSelLoopVars::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstSelLoopVars::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fromp(), "fromp", indent);
    dumpNodeListJson(str, elementsp(), "elementsp", indent);
    }
    const char* AstSelMinus::brokenGen() const {
    BROKEN_BASE_RTN(AstNodePreSel::brokenGen());
    return AstSelMinus::broken(); }
    void AstSelMinus::cloneRelinkGen() {
    AstNodePreSel::cloneRelinkGen();
    }
    void AstSelMinus::dumpJsonGen(std::ostream& str) const {
    AstNodePreSel::dumpJson(str);
    }
    void AstSelMinus::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fromp(), "fromp", indent);
    dumpNodeListJson(str, bitp(), "bitp", indent);
    dumpNodeListJson(str, widthp(), "widthp", indent);
    dumpNodeListJson(str, attrp(), "attrp", indent);
    }
    const char* AstSelPlus::brokenGen() const {
    BROKEN_BASE_RTN(AstNodePreSel::brokenGen());
    return AstSelPlus::broken(); }
    void AstSelPlus::cloneRelinkGen() {
    AstNodePreSel::cloneRelinkGen();
    }
    void AstSelPlus::dumpJsonGen(std::ostream& str) const {
    AstNodePreSel::dumpJson(str);
    }
    void AstSelPlus::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fromp(), "fromp", indent);
    dumpNodeListJson(str, bitp(), "bitp", indent);
    dumpNodeListJson(str, widthp(), "widthp", indent);
    dumpNodeListJson(str, attrp(), "attrp", indent);
    }
    const char* AstSenItem::brokenGen() const {
    return AstSenItem::broken(); }
    void AstSenItem::cloneRelinkGen() {
    }
    void AstSenItem::dumpJsonGen(std::ostream& str) const {
    }
    void AstSenItem::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, sensp(), "sensp", indent);
    dumpNodeListJson(str, condp(), "condp", indent);
    }
    const char* AstSenTree::brokenGen() const {
    return AstSenTree::broken(); }
    void AstSenTree::cloneRelinkGen() {
    }
    void AstSenTree::dumpJsonGen(std::ostream& str) const {
    }
    void AstSenTree::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, sensesp(), "sensesp", indent);
    }
    const char* AstSetAssoc::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstSetAssoc::broken(); }
    void AstSetAssoc::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstSetAssoc::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstSetAssoc::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, keyp(), "keyp", indent);
    dumpNodeListJson(str, valuep(), "valuep", indent);
    }
    const char* AstSetWildcard::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstSetWildcard::broken(); }
    void AstSetWildcard::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstSetWildcard::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstSetWildcard::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, keyp(), "keyp", indent);
    dumpNodeListJson(str, valuep(), "valuep", indent);
    }
    const char* AstShiftL::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstShiftL::broken(); }
    void AstShiftL::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstShiftL::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstShiftL::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstShiftLOvr::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstShiftLOvr::broken(); }
    void AstShiftLOvr::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstShiftLOvr::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstShiftLOvr::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstShiftR::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstShiftR::broken(); }
    void AstShiftR::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstShiftR::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstShiftR::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstShiftROvr::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstShiftROvr::broken(); }
    void AstShiftROvr::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstShiftROvr::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstShiftROvr::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstShiftRS::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstShiftRS::broken(); }
    void AstShiftRS::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstShiftRS::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstShiftRS::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstShiftRSOvr::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstShiftRSOvr::broken(); }
    void AstShiftRSOvr::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstShiftRSOvr::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstShiftRSOvr::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstSigned::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstSigned::broken(); }
    void AstSigned::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstSigned::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstSigned::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstSinD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeSystemUniopD::brokenGen());
    return AstSinD::broken(); }
    void AstSinD::cloneRelinkGen() {
    AstNodeSystemUniopD::cloneRelinkGen();
    }
    void AstSinD::dumpJsonGen(std::ostream& str) const {
    AstNodeSystemUniopD::dumpJson(str);
    }
    void AstSinD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstSinhD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeSystemUniopD::brokenGen());
    return AstSinhD::broken(); }
    void AstSinhD::cloneRelinkGen() {
    AstNodeSystemUniopD::cloneRelinkGen();
    }
    void AstSinhD::dumpJsonGen(std::ostream& str) const {
    AstNodeSystemUniopD::dumpJson(str);
    }
    void AstSinhD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstSliceSel::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeTriop::brokenGen());
    return AstSliceSel::broken(); }
    void AstSliceSel::cloneRelinkGen() {
    AstNodeTriop::cloneRelinkGen();
    }
    void AstSliceSel::dumpJsonGen(std::ostream& str) const {
    AstNodeTriop::dumpJson(str);
    }
    void AstSliceSel::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fromp(), "fromp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    dumpNodeListJson(str, thsp(), "thsp", indent);
    }
    const char* AstSplitPlaceholder::brokenGen() const {
    return AstSplitPlaceholder::broken(); }
    void AstSplitPlaceholder::cloneRelinkGen() {
    }
    void AstSplitPlaceholder::dumpJsonGen(std::ostream& str) const {
    }
    void AstSplitPlaceholder::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstSqrtD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeSystemUniopD::brokenGen());
    return AstSqrtD::broken(); }
    void AstSqrtD::cloneRelinkGen() {
    AstNodeSystemUniopD::cloneRelinkGen();
    }
    void AstSqrtD::dumpJsonGen(std::ostream& str) const {
    AstNodeSystemUniopD::dumpJson(str);
    }
    void AstSqrtD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstStable::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstStable::broken(); }
    void AstStable::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstStable::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstStable::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, exprp(), "exprp", indent);
    dumpNodeListJson(str, sentreep(), "sentreep", indent);
    }
    const char* AstStackTraceF::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstStackTraceF::broken(); }
    void AstStackTraceF::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstStackTraceF::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstStackTraceF::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstStackTraceT::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstStackTraceT::broken(); }
    void AstStackTraceT::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstStackTraceT::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstStackTraceT::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstStmtExpr::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstStmtExpr::broken(); }
    void AstStmtExpr::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstStmtExpr::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstStmtExpr::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, exprp(), "exprp", indent);
    }
    const char* AstStop::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstStop::broken(); }
    void AstStop::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstStop::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstStop::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstStreamDType::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDType::brokenGen());
    return AstStreamDType::broken(); }
    void AstStreamDType::cloneRelinkGen() {
    AstNodeDType::cloneRelinkGen();
    }
    void AstStreamDType::dumpJsonGen(std::ostream& str) const {
    AstNodeDType::dumpJson(str);
    }
    void AstStreamDType::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstStreamL::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStream::brokenGen());
    return AstStreamL::broken(); }
    void AstStreamL::cloneRelinkGen() {
    AstNodeStream::cloneRelinkGen();
    }
    void AstStreamL::dumpJsonGen(std::ostream& str) const {
    AstNodeStream::dumpJson(str);
    }
    void AstStreamL::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstStreamR::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStream::brokenGen());
    return AstStreamR::broken(); }
    void AstStreamR::cloneRelinkGen() {
    AstNodeStream::cloneRelinkGen();
    }
    void AstStreamR::dumpJsonGen(std::ostream& str) const {
    AstNodeStream::dumpJson(str);
    }
    void AstStreamR::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstStrengthSpec::brokenGen() const {
    return AstStrengthSpec::broken(); }
    void AstStrengthSpec::cloneRelinkGen() {
    }
    void AstStrengthSpec::dumpJsonGen(std::ostream& str) const {
    }
    void AstStrengthSpec::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstStructDType::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUOrStructDType::brokenGen());
    return AstStructDType::broken(); }
    void AstStructDType::cloneRelinkGen() {
    AstNodeUOrStructDType::cloneRelinkGen();
    }
    void AstStructDType::dumpJsonGen(std::ostream& str) const {
    AstNodeUOrStructDType::dumpJson(str);
    }
    void AstStructDType::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, membersp(), "membersp", indent);
    }
    const char* AstStructSel::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstStructSel::broken(); }
    void AstStructSel::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstStructSel::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstStructSel::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fromp(), "fromp", indent);
    }
    const char* AstSub::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstSub::broken(); }
    void AstSub::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstSub::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstSub::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstSubD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstSubD::broken(); }
    void AstSubD::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstSubD::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstSubD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstSubstrN::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeTriop::brokenGen());
    return AstSubstrN::broken(); }
    void AstSubstrN::cloneRelinkGen() {
    AstNodeTriop::cloneRelinkGen();
    }
    void AstSubstrN::dumpJsonGen(std::ostream& str) const {
    AstNodeTriop::dumpJson(str);
    }
    void AstSubstrN::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    dumpNodeListJson(str, thsp(), "thsp", indent);
    }
    const char* AstSysFuncAsTask::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstSysFuncAsTask::broken(); }
    void AstSysFuncAsTask::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstSysFuncAsTask::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstSysFuncAsTask::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstSysIgnore::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstSysIgnore::broken(); }
    void AstSysIgnore::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstSysIgnore::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstSysIgnore::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, exprsp(), "exprsp", indent);
    }
    const char* AstSystemF::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstSystemF::broken(); }
    void AstSystemF::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstSystemF::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstSystemF::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstSystemT::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstSystemT::broken(); }
    void AstSystemT::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstSystemT::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstSystemT::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstTanD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeSystemUniopD::brokenGen());
    return AstTanD::broken(); }
    void AstTanD::cloneRelinkGen() {
    AstNodeSystemUniopD::cloneRelinkGen();
    }
    void AstTanD::dumpJsonGen(std::ostream& str) const {
    AstNodeSystemUniopD::dumpJson(str);
    }
    void AstTanD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstTanhD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeSystemUniopD::brokenGen());
    return AstTanhD::broken(); }
    void AstTanhD::cloneRelinkGen() {
    AstNodeSystemUniopD::cloneRelinkGen();
    }
    void AstTanhD::dumpJsonGen(std::ostream& str) const {
    AstNodeSystemUniopD::dumpJson(str);
    }
    void AstTanhD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstTask::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeFTask::brokenGen());
    return AstTask::broken(); }
    void AstTask::cloneRelinkGen() {
    AstNodeFTask::cloneRelinkGen();
    }
    void AstTask::dumpJsonGen(std::ostream& str) const {
    AstNodeFTask::dumpJson(str);
    }
    void AstTask::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fvarp(), "fvarp", indent);
    dumpNodeListJson(str, classOrPackagep(), "classOrPackagep", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    dumpNodeListJson(str, scopeNamep(), "scopeNamep", indent);
    }
    const char* AstTaskRef::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeFTaskRef::brokenGen());
    return AstTaskRef::broken(); }
    void AstTaskRef::cloneRelinkGen() {
    AstNodeFTaskRef::cloneRelinkGen();
    }
    void AstTaskRef::dumpJsonGen(std::ostream& str) const {
    AstNodeFTaskRef::dumpJson(str);
    }
    void AstTaskRef::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, namep(), "namep", indent);
    dumpNodeListJson(str, pinsp(), "pinsp", indent);
    dumpNodeListJson(str, scopeNamep(), "scopeNamep", indent);
    }
    const char* AstTestPlusArgs::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstTestPlusArgs::broken(); }
    void AstTestPlusArgs::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstTestPlusArgs::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstTestPlusArgs::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, searchp(), "searchp", indent);
    }
    const char* AstText::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeSimpleText::brokenGen());
    return AstText::broken(); }
    void AstText::cloneRelinkGen() {
    AstNodeSimpleText::cloneRelinkGen();
    }
    void AstText::dumpJsonGen(std::ostream& str) const {
    AstNodeSimpleText::dumpJson(str);
    }
    void AstText::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstTextBlock::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeSimpleText::brokenGen());
    return AstTextBlock::broken(); }
    void AstTextBlock::cloneRelinkGen() {
    AstNodeSimpleText::cloneRelinkGen();
    }
    void AstTextBlock::dumpJsonGen(std::ostream& str) const {
    AstNodeSimpleText::dumpJson(str);
    }
    void AstTextBlock::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, nodesp(), "nodesp", indent);
    }
    const char* AstThisRef::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstThisRef::broken(); }
    void AstThisRef::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstThisRef::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstThisRef::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, childDTypep(), "childDTypep", indent);
    }
    const char* AstTime::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeTermop::brokenGen());
    return AstTime::broken(); }
    void AstTime::cloneRelinkGen() {
    AstNodeTermop::cloneRelinkGen();
    }
    void AstTime::dumpJsonGen(std::ostream& str) const {
    AstNodeTermop::dumpJson(str);
    }
    void AstTime::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstTimeD::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeTermop::brokenGen());
    return AstTimeD::broken(); }
    void AstTimeD::cloneRelinkGen() {
    AstNodeTermop::cloneRelinkGen();
    }
    void AstTimeD::dumpJsonGen(std::ostream& str) const {
    AstNodeTermop::dumpJson(str);
    }
    void AstTimeD::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstTimeFormat::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstTimeFormat::broken(); }
    void AstTimeFormat::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstTimeFormat::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstTimeFormat::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, unitsp(), "unitsp", indent);
    dumpNodeListJson(str, precisionp(), "precisionp", indent);
    dumpNodeListJson(str, suffixp(), "suffixp", indent);
    dumpNodeListJson(str, widthp(), "widthp", indent);
    }
    const char* AstTimeImport::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstTimeImport::broken(); }
    void AstTimeImport::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstTimeImport::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstTimeImport::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstTimePrecision::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstTimePrecision::broken(); }
    void AstTimePrecision::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstTimePrecision::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstTimePrecision::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstTimeUnit::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstTimeUnit::broken(); }
    void AstTimeUnit::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstTimeUnit::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstTimeUnit::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstToLowerN::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstToLowerN::broken(); }
    void AstToLowerN::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstToLowerN::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstToLowerN::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstToUpperN::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstToUpperN::broken(); }
    void AstToUpperN::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstToUpperN::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstToUpperN::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstTopScope::brokenGen() const {
    return AstTopScope::broken(); }
    void AstTopScope::cloneRelinkGen() {
    }
    void AstTopScope::dumpJsonGen(std::ostream& str) const {
    }
    void AstTopScope::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, senTreesp(), "senTreesp", indent);
    dumpNodeListJson(str, scopep(), "scopep", indent);
    }
    const char* AstTraceDecl::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstTraceDecl::broken(); }
    void AstTraceDecl::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstTraceDecl::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstTraceDecl::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, valuep(), "valuep", indent);
    }
    const char* AstTraceInc::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    BROKEN_RTN(!m_declp);
    BROKEN_RTN(!m_declp->brokeExists());
    return AstTraceInc::broken(); }
    void AstTraceInc::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    if (m_declp && m_declp->clonep()) m_declp = m_declp->clonep();
    }
    void AstTraceInc::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    dumpJsonPtr(str, "declp", m_declp);
    }
    void AstTraceInc::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, valuep(), "valuep", indent);
    }
    const char* AstTracePopPrefix::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstTracePopPrefix::broken(); }
    void AstTracePopPrefix::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstTracePopPrefix::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstTracePopPrefix::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstTracePushPrefix::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstTracePushPrefix::broken(); }
    void AstTracePushPrefix::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstTracePushPrefix::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstTracePushPrefix::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstTypeTable::brokenGen() const {
    BROKEN_RTN(m_constraintRefp && !m_constraintRefp->brokeExists());
    BROKEN_RTN(m_emptyQueuep && !m_emptyQueuep->brokeExists());
    BROKEN_RTN(m_queueIndexp && !m_queueIndexp->brokeExists());
    BROKEN_RTN(m_streamp && !m_streamp->brokeExists());
    BROKEN_RTN(m_voidp && !m_voidp->brokeExists());
    return AstTypeTable::broken(); }
    void AstTypeTable::cloneRelinkGen() {
    if (m_constraintRefp && m_constraintRefp->clonep()) m_constraintRefp = m_constraintRefp->clonep();
    if (m_emptyQueuep && m_emptyQueuep->clonep()) m_emptyQueuep = m_emptyQueuep->clonep();
    if (m_queueIndexp && m_queueIndexp->clonep()) m_queueIndexp = m_queueIndexp->clonep();
    if (m_streamp && m_streamp->clonep()) m_streamp = m_streamp->clonep();
    if (m_voidp && m_voidp->clonep()) m_voidp = m_voidp->clonep();
    }
    void AstTypeTable::dumpJsonGen(std::ostream& str) const {
    dumpJsonPtr(str, "constraintRefp", m_constraintRefp);
    dumpJsonPtr(str, "emptyQueuep", m_emptyQueuep);
    dumpJsonPtr(str, "queueIndexp", m_queueIndexp);
    dumpJsonPtr(str, "streamp", m_streamp);
    dumpJsonPtr(str, "voidp", m_voidp);
    }
    void AstTypeTable::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, typesp(), "typesp", indent);
    }
    const char* AstTypedef::brokenGen() const {
    return AstTypedef::broken(); }
    void AstTypedef::cloneRelinkGen() {
    }
    void AstTypedef::dumpJsonGen(std::ostream& str) const {
    }
    void AstTypedef::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, childDTypep(), "childDTypep", indent);
    dumpNodeListJson(str, attrsp(), "attrsp", indent);
    }
    const char* AstTypedefFwd::brokenGen() const {
    return AstTypedefFwd::broken(); }
    void AstTypedefFwd::cloneRelinkGen() {
    }
    void AstTypedefFwd::dumpJsonGen(std::ostream& str) const {
    }
    void AstTypedefFwd::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstUCFunc::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstUCFunc::broken(); }
    void AstUCFunc::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstUCFunc::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstUCFunc::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, exprsp(), "exprsp", indent);
    }
    const char* AstUCStmt::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstUCStmt::broken(); }
    void AstUCStmt::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstUCStmt::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstUCStmt::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, exprsp(), "exprsp", indent);
    }
    const char* AstURandomRange::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiop::brokenGen());
    return AstURandomRange::broken(); }
    void AstURandomRange::cloneRelinkGen() {
    AstNodeBiop::cloneRelinkGen();
    }
    void AstURandomRange::dumpJsonGen(std::ostream& str) const {
    AstNodeBiop::dumpJson(str);
    }
    void AstURandomRange::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
    const char* AstUdpTable::brokenGen() const {
    return AstUdpTable::broken(); }
    void AstUdpTable::cloneRelinkGen() {
    }
    void AstUdpTable::dumpJsonGen(std::ostream& str) const {
    }
    void AstUdpTable::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, linesp(), "linesp", indent);
    }
    const char* AstUdpTableLine::brokenGen() const {
    return AstUdpTableLine::broken(); }
    void AstUdpTableLine::cloneRelinkGen() {
    }
    void AstUdpTableLine::dumpJsonGen(std::ostream& str) const {
    }
    void AstUdpTableLine::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstUnbounded::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstUnbounded::broken(); }
    void AstUnbounded::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstUnbounded::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstUnbounded::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstUnionDType::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUOrStructDType::brokenGen());
    return AstUnionDType::broken(); }
    void AstUnionDType::cloneRelinkGen() {
    AstNodeUOrStructDType::cloneRelinkGen();
    }
    void AstUnionDType::dumpJsonGen(std::ostream& str) const {
    AstNodeUOrStructDType::dumpJson(str);
    }
    void AstUnionDType::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, membersp(), "membersp", indent);
    }
    const char* AstUnlinkedRef::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstUnlinkedRef::broken(); }
    void AstUnlinkedRef::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstUnlinkedRef::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstUnlinkedRef::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, refp(), "refp", indent);
    dumpNodeListJson(str, cellrefp(), "cellrefp", indent);
    }
    const char* AstUnpackArrayDType::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeArrayDType::brokenGen());
    return AstUnpackArrayDType::broken(); }
    void AstUnpackArrayDType::cloneRelinkGen() {
    AstNodeArrayDType::cloneRelinkGen();
    }
    void AstUnpackArrayDType::dumpJsonGen(std::ostream& str) const {
    AstNodeArrayDType::dumpJson(str);
    }
    void AstUnpackArrayDType::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, childDTypep(), "childDTypep", indent);
    dumpNodeListJson(str, rangep(), "rangep", indent);
    }
    const char* AstUnsigned::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeUniop::brokenGen());
    return AstUnsigned::broken(); }
    void AstUnsigned::cloneRelinkGen() {
    AstNodeUniop::cloneRelinkGen();
    }
    void AstUnsigned::dumpJsonGen(std::ostream& str) const {
    AstNodeUniop::dumpJson(str);
    }
    void AstUnsigned::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    }
    const char* AstUnsizedArrayDType::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDType::brokenGen());
    BROKEN_RTN(m_refDTypep && !m_refDTypep->brokeExists());
    return AstUnsizedArrayDType::broken(); }
    void AstUnsizedArrayDType::cloneRelinkGen() {
    AstNodeDType::cloneRelinkGen();
    if (m_refDTypep && m_refDTypep->clonep()) m_refDTypep = m_refDTypep->clonep();
    }
    void AstUnsizedArrayDType::dumpJsonGen(std::ostream& str) const {
    AstNodeDType::dumpJson(str);
    dumpJsonPtr(str, "refDTypep", m_refDTypep);
    }
    void AstUnsizedArrayDType::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, childDTypep(), "childDTypep", indent);
    }
    const char* AstUnsizedRange::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeRange::brokenGen());
    return AstUnsizedRange::broken(); }
    void AstUnsizedRange::cloneRelinkGen() {
    AstNodeRange::cloneRelinkGen();
    }
    void AstUnsizedRange::dumpJsonGen(std::ostream& str) const {
    AstNodeRange::dumpJson(str);
    }
    void AstUnsizedRange::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstVFile::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeFile::brokenGen());
    return AstVFile::broken(); }
    void AstVFile::cloneRelinkGen() {
    AstNodeFile::cloneRelinkGen();
    }
    void AstVFile::dumpJsonGen(std::ostream& str) const {
    AstNodeFile::dumpJson(str);
    }
    void AstVFile::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, tblockp(), "tblockp", indent);
    }
    const char* AstValuePlusArgs::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstValuePlusArgs::broken(); }
    void AstValuePlusArgs::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstValuePlusArgs::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstValuePlusArgs::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, searchp(), "searchp", indent);
    dumpNodeListJson(str, outp(), "outp", indent);
    }
    const char* AstVar::brokenGen() const {
    BROKEN_RTN(m_sensIfacep && !m_sensIfacep->brokeExists());
    return AstVar::broken(); }
    void AstVar::cloneRelinkGen() {
    if (m_sensIfacep && m_sensIfacep->clonep()) m_sensIfacep = m_sensIfacep->clonep();
    }
    void AstVar::dumpJsonGen(std::ostream& str) const {
    dumpJsonPtr(str, "sensIfacep", m_sensIfacep);
    }
    void AstVar::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, childDTypep(), "childDTypep", indent);
    dumpNodeListJson(str, delayp(), "delayp", indent);
    dumpNodeListJson(str, valuep(), "valuep", indent);
    dumpNodeListJson(str, attrsp(), "attrsp", indent);
    }
    const char* AstVarRef::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeVarRef::brokenGen());
    return AstVarRef::broken(); }
    void AstVarRef::cloneRelinkGen() {
    AstNodeVarRef::cloneRelinkGen();
    }
    void AstVarRef::dumpJsonGen(std::ostream& str) const {
    AstNodeVarRef::dumpJson(str);
    }
    void AstVarRef::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstVarScope::brokenGen() const {
    BROKEN_RTN(m_scopep && !m_scopep->brokeExists());
    BROKEN_RTN(m_varp && !m_varp->brokeExists());
    return AstVarScope::broken(); }
    void AstVarScope::cloneRelinkGen() {
    if (m_scopep && m_scopep->clonep()) m_scopep = m_scopep->clonep();
    if (m_varp && m_varp->clonep()) m_varp = m_varp->clonep();
    }
    void AstVarScope::dumpJsonGen(std::ostream& str) const {
    dumpJsonPtr(str, "scopep", m_scopep);
    dumpJsonPtr(str, "varp", m_varp);
    }
    void AstVarScope::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstVarXRef::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeVarRef::brokenGen());
    return AstVarXRef::broken(); }
    void AstVarXRef::cloneRelinkGen() {
    AstNodeVarRef::cloneRelinkGen();
    }
    void AstVarXRef::dumpJsonGen(std::ostream& str) const {
    AstNodeVarRef::dumpJson(str);
    }
    void AstVarXRef::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstVoidDType::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDType::brokenGen());
    return AstVoidDType::broken(); }
    void AstVoidDType::cloneRelinkGen() {
    AstNodeDType::cloneRelinkGen();
    }
    void AstVoidDType::dumpJsonGen(std::ostream& str) const {
    AstNodeDType::dumpJson(str);
    }
    void AstVoidDType::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstWait::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstWait::broken(); }
    void AstWait::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstWait::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstWait::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, condp(), "condp", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    }
    const char* AstWaitFork::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstWaitFork::broken(); }
    void AstWaitFork::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstWaitFork::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstWaitFork::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstWhile::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeStmt::brokenGen());
    return AstWhile::broken(); }
    void AstWhile::cloneRelinkGen() {
    AstNodeStmt::cloneRelinkGen();
    }
    void AstWhile::dumpJsonGen(std::ostream& str) const {
    AstNodeStmt::dumpJson(str);
    }
    void AstWhile::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, precondsp(), "precondsp", indent);
    dumpNodeListJson(str, condp(), "condp", indent);
    dumpNodeListJson(str, stmtsp(), "stmtsp", indent);
    dumpNodeListJson(str, incsp(), "incsp", indent);
    }
    const char* AstWildcardArrayDType::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeDType::brokenGen());
    BROKEN_RTN(m_refDTypep && !m_refDTypep->brokeExists());
    return AstWildcardArrayDType::broken(); }
    void AstWildcardArrayDType::cloneRelinkGen() {
    AstNodeDType::cloneRelinkGen();
    if (m_refDTypep && m_refDTypep->clonep()) m_refDTypep = m_refDTypep->clonep();
    }
    void AstWildcardArrayDType::dumpJsonGen(std::ostream& str) const {
    AstNodeDType::dumpJson(str);
    dumpJsonPtr(str, "refDTypep", m_refDTypep);
    }
    void AstWildcardArrayDType::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, childDTypep(), "childDTypep", indent);
    }
    const char* AstWildcardRange::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeRange::brokenGen());
    return AstWildcardRange::broken(); }
    void AstWildcardRange::cloneRelinkGen() {
    AstNodeRange::cloneRelinkGen();
    }
    void AstWildcardRange::dumpJsonGen(std::ostream& str) const {
    AstNodeRange::dumpJson(str);
    }
    void AstWildcardRange::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    }
    const char* AstWildcardSel::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeSel::brokenGen());
    return AstWildcardSel::broken(); }
    void AstWildcardSel::cloneRelinkGen() {
    AstNodeSel::cloneRelinkGen();
    }
    void AstWildcardSel::dumpJsonGen(std::ostream& str) const {
    AstNodeSel::dumpJson(str);
    }
    void AstWildcardSel::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fromp(), "fromp", indent);
    dumpNodeListJson(str, bitp(), "bitp", indent);
    }
    const char* AstWith::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstWith::broken(); }
    void AstWith::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstWith::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstWith::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, indexArgRefp(), "indexArgRefp", indent);
    dumpNodeListJson(str, valueArgRefp(), "valueArgRefp", indent);
    dumpNodeListJson(str, exprp(), "exprp", indent);
    }
    const char* AstWithParse::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeExpr::brokenGen());
    return AstWithParse::broken(); }
    void AstWithParse::cloneRelinkGen() {
    AstNodeExpr::cloneRelinkGen();
    }
    void AstWithParse::dumpJsonGen(std::ostream& str) const {
    AstNodeExpr::dumpJson(str);
    }
    void AstWithParse::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, funcrefp(), "funcrefp", indent);
    dumpNodeListJson(str, exprp(), "exprp", indent);
    }
    const char* AstWordSel::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeSel::brokenGen());
    return AstWordSel::broken(); }
    void AstWordSel::cloneRelinkGen() {
    AstNodeSel::cloneRelinkGen();
    }
    void AstWordSel::dumpJsonGen(std::ostream& str) const {
    AstNodeSel::dumpJson(str);
    }
    void AstWordSel::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, fromp(), "fromp", indent);
    dumpNodeListJson(str, bitp(), "bitp", indent);
    }
    const char* AstWriteMem::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeReadWriteMem::brokenGen());
    return AstWriteMem::broken(); }
    void AstWriteMem::cloneRelinkGen() {
    AstNodeReadWriteMem::cloneRelinkGen();
    }
    void AstWriteMem::dumpJsonGen(std::ostream& str) const {
    AstNodeReadWriteMem::dumpJson(str);
    }
    void AstWriteMem::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, filenamep(), "filenamep", indent);
    dumpNodeListJson(str, memp(), "memp", indent);
    dumpNodeListJson(str, lsbp(), "lsbp", indent);
    dumpNodeListJson(str, msbp(), "msbp", indent);
    }
    const char* AstXor::brokenGen() const {
    BROKEN_BASE_RTN(AstNodeBiComAsv::brokenGen());
    return AstXor::broken(); }
    void AstXor::cloneRelinkGen() {
    AstNodeBiComAsv::cloneRelinkGen();
    }
    void AstXor::dumpJsonGen(std::ostream& str) const {
    AstNodeBiComAsv::dumpJson(str);
    }
    void AstXor::dumpTreeJsonOpGen(std::ostream& str, const string& indent) const {
    dumpNodeListJson(str, lhsp(), "lhsp", indent);
    dumpNodeListJson(str, rhsp(), "rhsp", indent);
    }
