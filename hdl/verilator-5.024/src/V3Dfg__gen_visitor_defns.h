// Generated by astgen // -*- mode: C++; c-file-style: "cc-mode" -*-
void DfgVisitor::visit(DfgAcosD* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgAcoshD* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgAdd* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgAddD* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgAnd* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgArraySel* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgAsinD* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgAsinhD* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgAssocSel* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgAtan2D* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgAtanD* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgAtanhD* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgAtoN* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgBitsToRealD* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgBufIf1* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgCAwait* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgCCast* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgCLog2* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgCastDynamic* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgCastWrap* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgCeilD* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgCompareNN* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgConcat* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgConcatN* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgCond* vtxp) { visit(static_cast<DfgVertexTernary*>(vtxp)); }
void DfgVisitor::visit(DfgCondBound* vtxp) { visit(static_cast<DfgVertexTernary*>(vtxp)); }
void DfgVisitor::visit(DfgConst* vtxp) { visit(static_cast<DfgVertex*>(vtxp)); }
void DfgVisitor::visit(DfgCosD* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgCoshD* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgCountOnes* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgCvtPackString* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgDistChiSquare* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgDistErlang* vtxp) { visit(static_cast<DfgVertexTernary*>(vtxp)); }
void DfgVisitor::visit(DfgDistExponential* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgDistNormal* vtxp) { visit(static_cast<DfgVertexTernary*>(vtxp)); }
void DfgVisitor::visit(DfgDistPoisson* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgDistT* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgDistUniform* vtxp) { visit(static_cast<DfgVertexTernary*>(vtxp)); }
void DfgVisitor::visit(DfgDiv* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgDivD* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgDivS* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgEq* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgEqCase* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgEqD* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgEqN* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgEqT* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgEqWild* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgExpD* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgExtend* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgExtendS* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgFEof* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgFGetC* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgFGetS* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgFUngetC* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgFloorD* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgGetcN* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgGetcRefN* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgGt* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgGtD* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgGtN* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgGtS* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgGte* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgGteD* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgGteN* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgGteS* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgHypotD* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgISToRD* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgIToRD* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgIsUnbounded* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgIsUnknown* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgLenN* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgLog10D* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgLogAnd* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgLogD* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgLogEq* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgLogIf* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgLogNot* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgLogOr* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgLt* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgLtD* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgLtN* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgLtS* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgLte* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgLteD* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgLteN* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgLteS* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgModDiv* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgModDivS* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgMul* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgMulD* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgMulS* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgMux* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgNToI* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgNegate* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgNegateD* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgNeq* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgNeqCase* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgNeqD* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgNeqN* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgNeqT* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgNeqWild* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgNot* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgNullCheck* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgOneHot* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgOneHot0* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgOr* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgPostAdd* vtxp) { visit(static_cast<DfgVertexTernary*>(vtxp)); }
void DfgVisitor::visit(DfgPostSub* vtxp) { visit(static_cast<DfgVertexTernary*>(vtxp)); }
void DfgVisitor::visit(DfgPow* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgPowD* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgPowSS* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgPowSU* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgPowUS* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgPreAdd* vtxp) { visit(static_cast<DfgVertexTernary*>(vtxp)); }
void DfgVisitor::visit(DfgPreSub* vtxp) { visit(static_cast<DfgVertexTernary*>(vtxp)); }
void DfgVisitor::visit(DfgPutcN* vtxp) { visit(static_cast<DfgVertexTernary*>(vtxp)); }
void DfgVisitor::visit(DfgRToIRoundS* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgRToIS* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgRealToBits* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgRedAnd* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgRedOr* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgRedXor* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgReplicate* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgReplicateN* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgResizeLValue* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgSel* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgShiftL* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgShiftLOvr* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgShiftR* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgShiftROvr* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgShiftRS* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgShiftRSOvr* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgSigned* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgSinD* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgSinhD* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgSliceSel* vtxp) { visit(static_cast<DfgVertexTernary*>(vtxp)); }
void DfgVisitor::visit(DfgSqrtD* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgStreamL* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgStreamR* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgSub* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgSubD* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgSubstrN* vtxp) { visit(static_cast<DfgVertexTernary*>(vtxp)); }
void DfgVisitor::visit(DfgTanD* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgTanhD* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgTimeImport* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgToLowerN* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgToUpperN* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgURandomRange* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgUnsigned* vtxp) { visit(static_cast<DfgVertexUnary*>(vtxp)); }
void DfgVisitor::visit(DfgVarArray* vtxp) { visit(static_cast<DfgVertexVar*>(vtxp)); }
void DfgVisitor::visit(DfgVarPacked* vtxp) { visit(static_cast<DfgVertexVar*>(vtxp)); }
void DfgVisitor::visit(DfgVertexBinary* vtxp) { visit(static_cast<DfgVertex*>(vtxp)); }
void DfgVisitor::visit(DfgVertexTernary* vtxp) { visit(static_cast<DfgVertex*>(vtxp)); }
void DfgVisitor::visit(DfgVertexUnary* vtxp) { visit(static_cast<DfgVertex*>(vtxp)); }
void DfgVisitor::visit(DfgVertexVar* vtxp) { visit(static_cast<DfgVertexVariadic*>(vtxp)); }
void DfgVisitor::visit(DfgVertexVariadic* vtxp) { visit(static_cast<DfgVertex*>(vtxp)); }
void DfgVisitor::visit(DfgWildcardSel* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgWordSel* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
void DfgVisitor::visit(DfgXor* vtxp) { visit(static_cast<DfgVertexBinary*>(vtxp)); }
