#line 2 "/content/cad4u/hdl/verilator-5.024/src/V3PreLex_pregen.yy.cpp"

#line 4 "/content/cad4u/hdl/verilator-5.024/src/V3PreLex_pregen.yy.cpp"

#define  YY_INT_ALIGNED long int

/* A lexical scanner generated by flex */

#define yy_create_buffer V3PreLex_create_buffer
#define yy_delete_buffer V3PreLex_delete_buffer
#define yy_scan_buffer V3PreLex_scan_buffer
#define yy_scan_string V3PreLex_scan_string
#define yy_scan_bytes V3PreLex_scan_bytes
#define yy_init_buffer V3PreLex_init_buffer
#define yy_flush_buffer V3PreLex_flush_buffer
#define yy_load_buffer_state V3PreLex_load_buffer_state
#define yy_switch_to_buffer V3PreLex_switch_to_buffer
#define yypush_buffer_state V3PreLexpush_buffer_state
#define yypop_buffer_state V3PreLexpop_buffer_state
#define yyensure_buffer_stack V3PreLexensure_buffer_stack
#define yy_flex_debug V3PreLex_flex_debug
#define yyin V3PreLexin
#define yyleng V3PreLexleng
#define yylex V3PreLexlex
#define yylineno V3PreLexlineno
#define yyout V3PreLexout
#define yyrestart V3PreLexrestart
#define yytext V3PreLextext
#define yywrap V3PreLexwrap
#define yyalloc V3PreLexalloc
#define yyrealloc V3PreLexrealloc
#define yyfree V3PreLexfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define V3PreLex_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer V3PreLex_create_buffer
#endif

#ifdef yy_delete_buffer
#define V3PreLex_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer V3PreLex_delete_buffer
#endif

#ifdef yy_scan_buffer
#define V3PreLex_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer V3PreLex_scan_buffer
#endif

#ifdef yy_scan_string
#define V3PreLex_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string V3PreLex_scan_string
#endif

#ifdef yy_scan_bytes
#define V3PreLex_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes V3PreLex_scan_bytes
#endif

#ifdef yy_init_buffer
#define V3PreLex_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer V3PreLex_init_buffer
#endif

#ifdef yy_flush_buffer
#define V3PreLex_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer V3PreLex_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define V3PreLex_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state V3PreLex_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define V3PreLex_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer V3PreLex_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define V3PreLexpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state V3PreLexpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define V3PreLexpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state V3PreLexpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define V3PreLexensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack V3PreLexensure_buffer_stack
#endif

#ifdef yylex
#define V3PreLexlex_ALREADY_DEFINED
#else
#define yylex V3PreLexlex
#endif

#ifdef yyrestart
#define V3PreLexrestart_ALREADY_DEFINED
#else
#define yyrestart V3PreLexrestart
#endif

#ifdef yylex_init
#define V3PreLexlex_init_ALREADY_DEFINED
#else
#define yylex_init V3PreLexlex_init
#endif

#ifdef yylex_init_extra
#define V3PreLexlex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra V3PreLexlex_init_extra
#endif

#ifdef yylex_destroy
#define V3PreLexlex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy V3PreLexlex_destroy
#endif

#ifdef yyget_debug
#define V3PreLexget_debug_ALREADY_DEFINED
#else
#define yyget_debug V3PreLexget_debug
#endif

#ifdef yyset_debug
#define V3PreLexset_debug_ALREADY_DEFINED
#else
#define yyset_debug V3PreLexset_debug
#endif

#ifdef yyget_extra
#define V3PreLexget_extra_ALREADY_DEFINED
#else
#define yyget_extra V3PreLexget_extra
#endif

#ifdef yyset_extra
#define V3PreLexset_extra_ALREADY_DEFINED
#else
#define yyset_extra V3PreLexset_extra
#endif

#ifdef yyget_in
#define V3PreLexget_in_ALREADY_DEFINED
#else
#define yyget_in V3PreLexget_in
#endif

#ifdef yyset_in
#define V3PreLexset_in_ALREADY_DEFINED
#else
#define yyset_in V3PreLexset_in
#endif

#ifdef yyget_out
#define V3PreLexget_out_ALREADY_DEFINED
#else
#define yyget_out V3PreLexget_out
#endif

#ifdef yyset_out
#define V3PreLexset_out_ALREADY_DEFINED
#else
#define yyset_out V3PreLexset_out
#endif

#ifdef yyget_leng
#define V3PreLexget_leng_ALREADY_DEFINED
#else
#define yyget_leng V3PreLexget_leng
#endif

#ifdef yyget_text
#define V3PreLexget_text_ALREADY_DEFINED
#else
#define yyget_text V3PreLexget_text
#endif

#ifdef yyget_lineno
#define V3PreLexget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno V3PreLexget_lineno
#endif

#ifdef yyset_lineno
#define V3PreLexset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno V3PreLexset_lineno
#endif

#ifdef yywrap
#define V3PreLexwrap_ALREADY_DEFINED
#else
#define yywrap V3PreLexwrap
#endif

#ifdef yyalloc
#define V3PreLexalloc_ALREADY_DEFINED
#else
#define yyalloc V3PreLexalloc
#endif

#ifdef yyrealloc
#define V3PreLexrealloc_ALREADY_DEFINED
#else
#define yyrealloc V3PreLexrealloc
#endif

#ifdef yyfree
#define V3PreLexfree_ALREADY_DEFINED
#else
#define yyfree V3PreLexfree
#endif

#ifdef yytext
#define V3PreLextext_ALREADY_DEFINED
#else
#define yytext V3PreLextext
#endif

#ifdef yyleng
#define V3PreLexleng_ALREADY_DEFINED
#else
#define yyleng V3PreLexleng
#endif

#ifdef yyin
#define V3PreLexin_ALREADY_DEFINED
#else
#define yyin V3PreLexin
#endif

#ifdef yyout
#define V3PreLexout_ALREADY_DEFINED
#else
#define yyout V3PreLexout
#endif

#ifdef yy_flex_debug
#define V3PreLex_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug V3PreLex_flex_debug
#endif

#ifdef yylineno
#define V3PreLexlineno_ALREADY_DEFINED
#else
#define yylineno V3PreLexlineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define V3PreLexwrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (int) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 167
#define YY_END_OF_BUFFER 168
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int32_t yy_accept[660] =
    {   0,
        0,    0,    0,    0,    0,    0,  151,  151,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   29,   29,    0,    0,   30,   30,
        0,    0,    0,    0,    0,    0,    0,    0,  168,  166,
      163,  159,  165,  164,   33,  166,  160,  166,  166,    1,
      163,  165,  166,  139,  126,  140,  125,  127,  133,  134,
      140,  135,  140,  131,  132,  140,  156,  154,  156,  156,
      155,  151,  167,  109,  107,  109,  109,  108,  109,   89,
       80,   91,   79,   83,   75,   76,   91,   91,   87,   91,
       88,   89,   74,   73,   74,   72,  101,   96,  103,   95,

       99,  103,  103,  103,  167,   24,  167,  122,  121,  120,
      122,  114,  122,  112,  113,  122,  122,  122,  119,  122,
      122,   69,   68,   69,   71,  167,   28,   28,   29,   22,
       20,   21,   21,   22,   22,   22,   22,   22,   30,   66,
       65,   66,   66,   44,   42,   44,   48,   43,   48,   63,
       60,   59,   62,   61,   52,   54,   63,   63,   60,   62,
       63,   36,   34,   36,   40,   35,  167,  163,  159,    0,
        0,  152,  150,  160,    0,  160,   50,  157,    0,  157,
      162,  157,  157,  157,  157,  157,  163,    0,    0,    0,
      157,  139,  126,    0,    0,  123,  124,  130,  136,    0,

      138,  154,    0,  153,  155,  151,  107,    0,  104,  108,
        0,  106,    0,   89,   80,    0,    0,   77,   78,   90,
       90,   82,    0,   86,    0,   73,    0,  101,   96,    0,
        0,   92,   94,  102,  102,   98,    0,    0,   24,   23,
        0,    0,  121,  120,    0,  115,  117,  110,  111,    0,
      119,  119,  116,   68,    0,   70,    0,   29,   20,    0,
        0,    0,    0,    0,   30,   65,    0,    0,   42,    0,
        0,   43,   47,   47,   45,   47,   60,   59,    0,   54,
        0,   54,   53,   56,    0,   56,   58,   60,    0,   56,
       34,    0,   35,   39,   39,   37,   39,   41,    0,    0,

        0,  149,    0,    0,  161,  160,  157,    0,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,    0,  157,
      128,  124,  136,    0,  136,    0,  105,    0,   84,   78,
        0,   81,    0,    0,  100,   94,   94,    0,   97,    0,
        0,  111,  118,    0,    0,    0,    0,    0,    0,    0,
        0,   49,    0,   46,    0,    0,   55,   56,    0,   56,
        0,   56,   56,    0,   38,    0,    0,    0,    0,  160,
      158,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,    0,  157,  137,  129,   85,   93,    0,
        0,    0,    0,    0,    0,   16,    0,    0,    0,    0,

       57,   51,   56,   56,   56,    0,    0,  157,  157,  157,
        4,  157,  157,  157,  157,  157,  157,  157,  157,  157,
        0,  157,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   56,   56,   56,    0,    0,  157,  157,
      157,    5,    6,   12,    7,  157,  157,  157,  157,   10,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   56,   56,    0,    0,  157,  157,
        3,    8,  157,  157,  157,  157,    0,    0,    2,    0,
       27,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   56,   56,    0,    0,  157,  157,    9,   26,

       26,   25,   26,   26,  157,  157,    0,   27,    0,    0,
        0,   13,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   56,   56,    0,    0,   31,   32,  157,  157,    0,
        0,    0,   13,   13,    0,    0,    0,    0,    0,    0,
        0,    0,   17,    0,   31,   32,    0,    0,   64,  157,
        0,    0,    0,    0,    0,    0,   14,    0,    0,    0,
        0,    0,    0,  157,    0,    0,   15,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   11,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   67,    0,    0,    0,    0,    0,

        0,   19,    0,    0,    0,   18,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  142,    0,    0,    0,    0,    0,    0,
        0,  141,  142,    0,    0,    0,    0,  146,    0,    0,
      141,    0,  144,  145,    0,    0,    0,    0,  144,    0,
      148,    0,    0,  143,    0,    0,  143,  147,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,    1,    1,    1,    1,
        1,    6,    7,    8,    1,    9,    1,   10,    1,   11,
       12,   13,   14,   15,   16,    1,   17,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,    1,    1,   19,
       20,   21,    1,    1,   22,   22,   22,   22,   23,   24,
       22,   22,   25,   22,   22,   26,   22,   27,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       28,   29,   30,    1,   31,   32,   33,   34,   35,   36,

       37,   38,   39,   40,   41,   22,   42,   43,   44,   45,
       46,   47,   22,   48,   49,   50,   51,   52,   53,   22,
       54,   22,   28,   55,   30,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   56,    1,    1,    1,
       56,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   56,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[57] =
    {   0,
        1,    2,    3,    4,    1,    2,    1,    5,    6,    1,
        7,    7,    8,    9,   10,    1,   11,   12,    1,    9,
        1,   13,   13,   13,   13,   13,   13,    7,    5,    7,
       14,   15,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,    1,    1
    } ;

static const flex_int32_t yy_base[720] =
    {   0,
        0,   55,   85,  115,  147,    0,   59,   61,  203,    0,
      257,  287,   63,   65,   78,  305,  334,    0,  390,    0,
      100,  272,   69,   75,   67,   76,  445,  496,   81,  102,
      105,  107,  548,    0,  604,  275,  660,    0, 2115, 2116,
       71, 2116,  121, 2116, 2106,  118, 2081,    0,  709, 2116,
      448,  453,  753,    0, 2116,  130,    0, 2104, 2116, 2116,
     2116, 2116,  123, 2116, 2116,  265, 2116, 2116,  138, 2094,
        0,    0, 2116, 2116, 2116,  260, 2093,    0,  321,    0,
     2116,  263,    0, 2101, 2116, 2116, 2116,  265, 2116,  326,
     2116,  276, 2116, 2116,  268, 2116,    0, 2116,  299,    0,

     2100, 2116,  445,  461,  466, 2116,  457, 2116,  469, 2116,
      308, 2116, 2097, 2116, 2116, 2085,  461, 2089,    0,    0,
     2049, 2116, 2116,  317, 2116,    0, 2116, 2055,    0, 2116,
      482, 2116, 2116, 2065, 2068, 2055, 2062, 2061,    0, 2116,
     2116,  486, 2060, 2116, 2116,  488, 2088,    0,  501, 2116,
      504, 2116,  490, 2116, 2116, 2063,    0,  487,  507,  716,
      493, 2116, 2116,  511, 2116,    0,  525,  506, 2116,  517,
     2086,  719,  724, 2061, 2060, 2059, 2116, 2058,    0,  503,
     2116,   62,  699,  717,  248,  421,  731,  763, 2046,  771,
       60,    0, 2116,  537, 2080, 2116,    0, 2116, 2055, 2054,

     2116, 2116,  539, 2116,    0,    0, 2116,  541, 2116,    0,
      777, 2116,  543,    0, 2116,  748, 2077, 2116,    0, 2116,
      795, 2116,  750, 2116, 2052, 2116,  754,    0, 2116,  783,
     2075, 2116, 2053, 2116,  803, 2116,  788,  808, 2116, 2116,
      812,  814,  730, 2116,  816, 2116, 2116, 2116,    0, 2060,
        0,    0, 2116, 2116,  818, 2116, 2034,    0,  737, 2040,
     2028,  788, 2023, 2028,    0, 2116,  822, 2030, 2116,  824,
     2066,    0, 2116,  827, 2116,  832,  762, 2116,  834, 2041,
     2040, 2039, 2116, 2038, 2037,  808, 2116,  839,  844,  485,
     2116,  848,    0, 2116,  851, 2116,  855, 2116,  858, 2031,

      863, 2116,  871, 2030, 2116, 2034, 2033, 2032, 2031,  746,
      770,   26,  836,  831,  846,  441,  848,  851, 2021,  451,
     2116,    0, 2029, 2028, 2027, 2050, 2116,  881, 2116,    0,
      886, 2116,  892, 2049, 2116, 2027,  895,  898, 2116,  902,
      904,    0, 2116, 2005, 2013, 2020,  285,  908, 2021, 2002,
     2014, 2116,  914, 2116,  910,  918, 2116, 2017, 2016, 2015,
     2038,  901,  887,  932, 2116,  925,  927, 1997, 1996, 2011,
     2116,  734,  817,  829,  905,  908,  491,  251,  861,  909,
      911,  894,  692, 1997,  756, 2116, 2116, 2116, 2116,  944,
     2004, 1995, 2008, 2002, 1983, 2116, 1989,  911, 1994, 1987,

     2116, 2116,  926,  929,  925, 1992, 1991,  877,  932,  924,
     1999,  928,  933,  931,  935,  938,  936,  282,  940,  942,
     1993,  979, 1994, 1986,  942, 1975, 1940, 1938, 1914, 1919,
     1890, 1880, 1849,  952,  961,  988, 1853, 1839,  959,  966,
      963, 1849, 1820, 1819, 1775,  964,  965,  971,  973,  974,
     1008, 1015, 1756, 1758, 1756, 1761, 1752, 1746, 1749, 1736,
     1727, 1717, 1721, 1706,  984,  990, 1718, 1704,  992,  994,
     1704, 1703,  995, 1032, 1057, 1058, 1025, 1089, 2116, 1094,
     1099, 1681, 1682, 1677, 1687, 1694, 1662, 1676,  985, 1658,
     1100, 1647, 1077, 1079, 1646, 1640, 1081, 1083, 1657, 2116,

     1115, 2116, 1656, 1655, 1062, 1090, 1120, 1123, 1640, 1628,
     1622, 1124, 1628, 1623, 1617, 1625, 1604, 1599, 1126, 1131,
     1607, 1107, 1109, 1597, 1591, 1604, 1603, 1111, 1112, 1584,
     1591, 1556,    0, 1146, 1562, 1552, 1147, 1542, 1526, 1521,
     1151, 1154, 2116, 1521, 1523, 1518, 1501, 1500, 1515, 1099,
     1509, 1159, 1505, 1502, 1488, 1164, 2116, 1500, 1499, 1167,
     1464, 1505, 1502, 1132, 1472, 1174, 2116, 1461, 1447, 1177,
     1433, 1179, 1180, 1443, 1435, 1434, 1444, 1409, 1408, 1413,
     1187, 1188, 1196, 1440, 1411, 1405, 1404, 1407, 1189, 1168,
     1204, 1435, 1430, 1197, 2116, 1392, 1390, 1398, 1391, 1423,

     1210, 2116, 1380, 1374, 1378, 2116, 1391, 1390, 1382, 1173,
     1177, 1373, 1170, 1381, 1372, 1179, 1367, 1370, 1359, 1383,
     1346, 1342, 1355,    0, 1167, 1159, 1190, 1179, 1167, 1124,
     1122,    0,    0, 1086, 1079, 1091,  992, 2116,  953,  873,
        0,  810,    0, 2116,  796,  800,  717,  438,    0,  269,
     2116,  109,  125,    0,   99,   43,    0, 2116, 2116, 1226,
     1241, 1256, 1271, 1286, 1301, 1316, 1331, 1346, 1361, 1376,
     1386, 1401, 1412, 1427, 1437, 1441, 1455, 1459, 1473, 1488,
     1503, 1518, 1531, 1539, 1553, 1568, 1583, 1598, 1602, 1616,
     1626, 1641, 1651, 1655, 1669, 1679, 1694, 1708, 1718, 1733,

     1748, 1763, 1778, 1788, 1803, 1818, 1833, 1848, 1863, 1878,
     1893, 1908, 1923, 1938, 1953, 1968, 1983, 1998, 2013
    } ;

static const flex_int32_t yy_def[720] =
    {   0,
      659,    1,  660,  660,  659,    5,  661,  661,  659,    9,
      662,  662,  663,  663,  664,  664,  659,   17,  659,   19,
      665,  665,  666,  666,  667,  667,  668,  668,  669,  669,
      670,  670,  659,   33,  659,   35,  659,   37,  659,  659,
      659,  659,  659,  659,  659,  659,  671,  672,  673,  659,
      659,  659,  673,  674,  659,  659,  674,  659,  659,  659,
      659,  659,  659,  659,  659,  675,  659,  659,  659,  659,
      676,  677,  659,  659,  659,  659,  659,  678,  659,  679,
      659,  659,  679,  659,  659,  659,  659,  659,  659,  680,
      659,  679,  659,  659,  659,  659,  681,  659,  659,  681,

      659,  659,  659,  682,  659,  659,  683,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  684,  685,
      659,  659,  659,  659,  659,  686,  659,  659,  687,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  688,  659,
      659,  659,  659,  659,  659,  659,  659,  689,  690,  659,
      659,  659,  659,  659,  659,  691,  692,  693,  659,  659,
      693,  659,  659,  659,  659,  694,  695,  659,  659,  659,
      659,  659,  659,  671,  659,  672,  659,  696,  697,  696,
      659,  696,  696,  696,  696,  696,  659,  659,  659,  659,
      696,  674,  659,  659,  659,  659,  698,  659,  699,  700,

      659,  659,  659,  659,  676,  677,  659,  659,  659,  678,
      659,  659,  659,  679,  659,  659,  659,  659,  701,  659,
      659,  659,  659,  659,  659,  659,  659,  681,  659,  659,
      659,  659,  702,  659,  659,  659,  659,  659,  659,  659,
      683,  659,  659,  659,  659,  659,  659,  659,  703,  659,
      684,  685,  659,  659,  659,  659,  659,  687,  659,  659,
      659,  659,  659,  659,  688,  659,  659,  659,  659,  659,
      659,  689,  659,  659,  659,  659,  659,  659,  659,  691,
      659,  692,  659,  704,  705,  704,  659,  659,  659,  704,
      659,  659,  694,  659,  659,  659,  659,  659,  659,  659,

      659,  659,  659,  659,  659,  672,  696,  659,  697,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  659,  696,
      659,  698,  699,  659,  700,  659,  659,  659,  659,  701,
      659,  659,  659,  659,  659,  702,  702,  659,  659,  659,
      659,  703,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  704,  659,  705,
      659,  704,  704,  659,  659,  659,  659,  659,  659,  672,
      659,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  659,  696,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,

      659,  659,  704,  704,  704,  659,  659,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      659,  696,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  704,  704,  704,  659,  659,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      659,  706,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  704,  704,  659,  659,  696,  696,
      696,  696,  696,  659,  696,  696,  706,  706,  659,  706,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  704,  704,  659,  659,  696,  696,  696,  659,

      707,  659,  696,  659,  696,  696,  706,  659,  659,  659,
      659,  708,  659,  659,  659,  659,  659,  659,  659,  709,
      659,  704,  704,  659,  659,  696,  696,  696,  696,  659,
      659,  659,  708,  708,  659,  659,  659,  659,  659,  659,
      709,  709,  659,  659,  704,  704,  659,  659,  696,  696,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  696,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  696,  659,  659,  659,
      659,  659,  659,  710,  659,  659,  659,  659,  659,  659,
      659,  711,  710,  710,  659,  659,  659,  659,  659,  711,

      711,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  712,
      659,  659,  659,  713,  659,  659,  714,  712,  659,  659,
      659,  715,  713,  659,  659,  714,  659,  659,  659,  716,
      715,  659,  717,  659,  659,  716,  659,  659,  717,  659,
      659,  659,  718,  719,  718,  659,  719,  659,    0,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,

      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659
    } ;

static const flex_int32_t yy_nxt[2173] =
    {   0,
       40,   41,   42,   43,   44,   41,   40,   45,   40,   40,
       40,   40,   40,   40,   40,   40,   46,   40,   40,   40,
       40,   47,   47,   47,   47,   47,   47,   40,   48,   40,
       47,   49,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   40,   50,   51,  308,   52,  658,
       51,   73,   73,   73,   73,   94,   95,   94,   95,   73,
       73,   73,  168,   96,  375,   96,  168,   73,   73,   73,
       98,   99,  100,   73,   73,  101,   53,   55,   56,   57,
      102,  308,   58,  308,  103,   59,   60,   61,  311,   62,

      320,   63,  123,  124,   73,   73,  104,  141,  142,  141,
      142,  656,   64,   61,   65,  128,   66,   55,   56,   57,
      125,  128,   58,  169,  170,   59,   60,   61,  126,   62,
      172,   63,  193,  194,  173,  196,  143,  656,  143,  197,
      202,  203,   64,   61,   65,  654,   66,   67,   67,   68,
       69,   67,   67,   67,   67,   67,   67,   67,   67,   70,
       67,   67,   67,   67,   71,   67,   67,   67,   71,   71,
       71,   71,   71,   71,   67,   67,   67,   71,   67,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,

       71,   67,   67,   74,   74,   75,   76,   74,   74,   74,
       74,   74,   74,   74,   74,   77,   74,   74,   74,   74,
       78,   74,   74,   74,   78,   78,   78,   78,   78,   78,
       74,   79,   74,   78,   74,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   74,   74,   81,
       82,   83,  207,  208,   84,  215,  216,   85,   86,   87,
      226,  227,  198,   88,  123,  124,  159,  218,  160,  308,
      159,  219,  308,  224,   89,   90,   91,  415,   92,   81,
       82,   83,  125,  200,   84,  317,  201,   85,   86,   87,

      126,  229,  230,   88,  225,  653,  161,   98,   99,  100,
      244,  245,  101,  308,   89,   90,   91,  102,   92,  254,
      255,  103,  211,  212,  213,  448,  211,  221,  222,  223,
      394,  221,  395,  104,   73,  105,  106,  106,   73,  105,
       73,   73,   73,   73,   73,   73,   73,  107,   73,   73,
      107,  107,   73,   73,   73,  107,  107,  107,  107,  107,
      107,   73,   73,   73,   73,   73,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,   73,   73,
      108,  109,  110,  111,  108,  109,  112,  108,  108,  113,

      114,  115,  108,  108,  108,  116,  117,  108,  118,  108,
      108,  119,  119,  119,  119,  119,  119,  108,  120,  108,
      119,  108,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  121,  108,  131,  132,  133,  187,
      131,  188,  308,  187,  188,  169,  190,  232,  188,  240,
      240,  233,  235,  236,  237,  318,  235,  238,  239,  239,
      243,  238,  308,  248,  243,  380,  242,  249,  134,  189,
      135,  136,  308,  259,  189,  652,  137,  259,  266,  267,
      269,  270,  278,  279,  283,  385,  138,  131,  132,  133,

      283,  131,  274,  275,  276,  277,  274,  168,  288,  277,
      188,  168,  288,  291,  292,  285,  359,  286,  287,  169,
      170,  285,  308,  286,  287,  363,  295,  296,  297,  134,
      295,  135,  136,  310,  308,  290,  414,  137,  189,  193,
      194,  202,  203,  207,  208,  212,  213,  138,  144,  144,
      145,  146,  144,  144,  144,  147,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  148,  144,  144,  144,  148,
      148,  148,  148,  148,  148,  144,  149,  144,  148,  144,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,

      148,  148,  144,  144,  150,  151,  152,  153,  154,  151,
      150,  155,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  156,  156,  156,  156,  156,
      156,  150,  157,  150,  156,  158,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  150,  150,
      162,  162,  163,  164,  162,  162,  162,  165,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  166,  162,  162,
      162,  166,  166,  166,  166,  166,  166,  162,  167,  162,
      166,  162,  166,  166,  166,  166,  166,  166,  166,  166,

      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  162,  162,  177,  188,  278,  289,
      299,  188,  299,  308,  299,  301,  302,  303,  420,  301,
      308,  243,  187,  651,  188,  243,  187,  179,  259,  180,
      181,  312,  259,  313,  182,  183,  314,  189,  308,  184,
      215,  216,  222,  223,  315,  185,  226,  227,  408,  186,
      177,  316,  189,  277,  188,  308,  188,  277,  188,  372,
      300,  373,  188,  169,  190,  304,  188,  308,  211,  327,
      328,  179,  211,  180,  181,  229,  230,  308,  182,  183,
      236,  237,  422,  184,  189,  191,  331,  332,  333,  185,

      331,  308,  189,  186,  338,  339,  340,  374,  338,  238,
      239,  239,  647,  238,  240,  240,  240,  240,  244,  245,
      254,  255,  347,  348,  266,  267,  269,  270,  353,  354,
      355,  242,  353,  341,  275,  356,  278,  279,  362,  359,
      288,  409,  188,  650,  288,  188,  278,  289,  308,  188,
      291,  292,  364,  365,  366,  648,  364,  296,  367,  299,
      308,  299,  308,  299,  301,  302,  303,  308,  301,  410,
      189,  376,  301,  302,  303,  189,  301,  308,  377,  308,
      381,  378,  308,  327,  328,  647,  383,  331,  332,  333,
      379,  331,  308,  382,  332,  333,  416,  389,  390,  338,

      339,  340,  439,  338,  339,  340,  240,  240,  308,  300,
      396,  396,  354,  355,  304,  353,  354,  355,  359,  353,
      275,  356,  304,  337,  403,  308,  404,  365,  366,  296,
      367,  405,  359,  364,  365,  366,  308,  364,  397,  308,
      308,  411,  308,  419,  429,  412,  389,  390,  413,  418,
      434,  417,  430,  435,  431,  308,  359,  359,  440,  308,
      359,  436,  308,  308,  308,  442,  308,  308,  441,  308,
      443,  308,  445,  308,  446,  455,  449,  465,  444,  450,
      452,  469,  452,  359,  452,  456,  447,  466,  470,  452,
      308,  452,  359,  452,  308,  308,  308,  308,  645,  471,

      473,  472,  308,  474,  308,  308,  493,  475,  644,  452,
      308,  452,  494,  452,  476,  359,  478,  479,  480,  359,
      478,  359,  497,  308,  498,  308,  308,  479,  507,  516,
      517,  499,  500,  501,  502,  502,  500,  501,  500,  500,
      503,  500,  500,  500,  500,  500,  500,  500,  500,  503,
      500,  500,  500,  503,  503,  503,  503,  503,  503,  500,
      500,  500,  503,  504,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  500,  500,  308,  308,
      478,  479,  480,  308,  478,  478,  479,  480,  528,  478,

      508,  519,  506,  637,  508,  519,  505,  522,  359,  523,
      359,  526,  308,  527,  308,  643,  501,  502,  502,  520,
      501,  308,  479,  507,  508,  534,  529,  519,  508,  534,
      308,  519,  542,  543,  543,  642,  542,  545,  359,  546,
      359,  564,  308,  308,  550,  520,  549,  534,  556,  557,
      557,  534,  556,  543,  543,  542,  543,  543,  640,  542,
      566,  567,  567,  308,  566,  556,  557,  557,  572,  556,
      396,  396,  572,  639,  577,  566,  567,  567,  581,  566,
      572,  583,  581,  638,  572,  583,  573,  584,  581,  591,
      581,  629,  581,  591,  581,  592,  582,  583,  573,  602,

      602,  583,  637,  584,  594,  591,  582,  619,  582,  591,
      635,  592,  606,  606,  620,  634,  623,  601,  613,  599,
      614,  615,  616,  624,  617,  618,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,

       97,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  174,  632,  631,  630,  629,  627,  174,  174,  174,

      174,  176,  626,  625,  622,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  178,  621,  570,  612,
      611,  610,  609,  608,  178,  178,  178,  192,  192,  607,
      601,  605,  192,  590,  604,  192,  603,  594,  192,  192,
      192,  199,  601,  598,  597,  596,  595,  594,  590,  199,
      199,  199,  205,  205,  205,  206,  206,  589,  588,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      210,  210,  210,  214,  214,  308,  587,  586,  214,  585,
      570,  214,  214,  580,  214,  214,  214,  214,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,

      220,  220,  220,  228,  228,  579,  578,  576,  228,  228,
      575,  228,  228,  574,  228,  228,  228,  228,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  241,  241,  571,  570,  569,  568,  241,
      560,  241,  241,  241,  251,  565,  308,  563,  562,  359,
      251,  251,  251,  252,  359,  561,  560,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  256,  256,
      559,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  258,  258,  558,  555,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  265,  265,

      554,  553,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  272,  272,  272,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  280,  552,  551,  308,  308,  548,  280,  280,  280,
      280,  282,  547,  544,  540,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  284,  539,  538,  537,  536,
      535,  532,  531,  284,  284,  284,  293,  293,  293,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  307,  530,  371,  308,  308,  525,
      307,  307,  307,  307,  309,  524,  521,  518,  309,  309,

      309,  309,  309,  309,  309,  309,  309,  309,  322,  322,
      515,  514,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  323,  513,  512,  511,  510,  509,  323,
      323,  323,  323,  325,  308,  308,  496,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  330,  330,
      495,  492,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  336,  336,  491,  490,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  342,  342,
      489,  488,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  358,  487,  486,  485,  484,  483,  358,

      358,  358,  358,  360,  482,  481,  308,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  533,  533,
      308,  308,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  593,  593,
      308,  468,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  600,  600,  467,  464,  600,  600,  600,

      600,  600,  600,  600,  600,  600,  600,  600,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  633,  633,  463,  462,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  641,  641,  461,  460,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  649,  649,  459,  458,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  655,  655,

      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  657,  657,  457,  454,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  453,  451,
      308,  438,  437,  433,  432,  428,  427,  426,  425,  424,
      423,  421,  370,  407,  406,  402,  359,  401,  359,  400,
      399,  398,  393,  392,  391,  337,  388,  387,  324,  386,
      324,  384,  308,  371,  308,  370,  369,  368,  361,  359,
      281,  357,  281,  352,  351,  350,  349,  346,  345,  344,
      343,  337,  335,  334,  329,  326,  324,  321,  319,  308,
      306,  305,  175,  298,  281,  271,  268,  264,  263,  262,

      261,  260,  257,  253,  250,  247,  246,  231,  217,  209,
      204,  195,  175,  171,  659,   39,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659
    } ;

static const flex_int32_t yy_chk[2173] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    2,  312,    2,  656,
        2,    7,    7,    8,    8,   13,   13,   14,   14,   25,
       25,   23,   41,   13,  312,   14,   41,   24,   26,   26,
       15,   15,   15,   29,   29,   15,    2,    3,    3,    3,
       15,  191,    3,  182,   15,    3,    3,    3,  182,    3,

      191,    3,   21,   21,   30,   30,   15,   31,   31,   32,
       32,  655,    3,    3,    3,   23,    3,    4,    4,    4,
       21,   24,    4,   43,   43,    4,    4,    4,   21,    4,
       46,    4,   56,   56,   46,   63,   31,  653,   32,   63,
       69,   69,    4,    4,    4,  652,    4,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   11,
       11,   11,   76,   76,   11,   82,   82,   11,   11,   11,
       95,   95,   66,   11,   22,   22,   36,   88,   36,  185,
       36,   88,  378,   92,   11,   11,   11,  378,   11,   12,
       12,   12,   22,   66,   12,  185,   66,   12,   12,   12,

       22,   99,   99,   12,   92,  650,   36,   16,   16,   16,
      111,  111,   16,  418,   12,   12,   12,   16,   12,  124,
      124,   16,   79,   79,   79,  418,   79,   90,   90,   90,
      347,   90,  347,   16,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   27,   27,   27,   51,
       27,   51,  186,   51,   52,   52,   52,  103,   52,  107,
      107,  103,  104,  104,  104,  186,  104,  105,  105,  105,
      109,  105,  316,  117,  109,  316,  107,  117,   27,   51,
       27,   27,  320,  131,   52,  648,   27,  131,  142,  142,
      146,  146,  153,  153,  158,  320,   27,   28,   28,   28,

      161,   28,  149,  149,  149,  151,  149,  168,  159,  151,
      159,  168,  159,  164,  164,  158,  290,  158,  158,  170,
      170,  161,  377,  161,  161,  290,  167,  167,  167,   28,
      167,   28,   28,  180,  180,  161,  377,   28,  159,  194,
      194,  203,  203,  208,  208,  213,  213,   28,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   49,  160,  160,  160,
      172,  160,  172,  383,  172,  173,  173,  173,  383,  173,
      183,  243,  187,  647,  187,  243,  187,   49,  259,   49,
       49,  183,  259,  183,   49,   49,  183,  160,  184,   49,
      216,  216,  223,  223,  184,   49,  227,  227,  372,   49,
       53,  184,  187,  277,  188,  372,  188,  277,  188,  310,
      172,  310,  190,  190,  190,  173,  190,  310,  211,  211,
      211,   53,  211,   53,   53,  230,  230,  385,   53,   53,
      237,  237,  385,   53,  188,   53,  221,  221,  221,   53,

      221,  311,  190,   53,  235,  235,  235,  311,  235,  238,
      238,  238,  646,  238,  241,  241,  242,  242,  245,  245,
      255,  255,  262,  262,  267,  267,  270,  270,  274,  274,
      274,  241,  274,  242,  276,  276,  279,  279,  286,  286,
      288,  373,  288,  645,  288,  289,  289,  289,  373,  289,
      292,  292,  295,  295,  295,  642,  295,  297,  297,  299,
      374,  299,  314,  299,  301,  301,  301,  313,  301,  374,
      288,  313,  303,  303,  303,  289,  303,  315,  314,  317,
      317,  315,  318,  328,  328,  640,  318,  331,  331,  331,
      315,  331,  379,  317,  333,  333,  379,  337,  337,  338,

      338,  338,  408,  338,  340,  340,  341,  341,  408,  299,
      348,  348,  355,  355,  301,  353,  353,  353,  363,  353,
      356,  356,  303,  337,  362,  382,  362,  366,  366,  367,
      367,  363,  362,  364,  364,  364,  375,  364,  348,  376,
      380,  375,  381,  382,  398,  375,  390,  390,  376,  381,
      403,  380,  398,  404,  398,  410,  405,  403,  409,  412,
      404,  405,  414,  409,  413,  412,  415,  417,  410,  416,
      413,  419,  415,  420,  416,  425,  419,  434,  414,  420,
      422,  439,  422,  434,  422,  425,  417,  435,  440,  436,
      439,  436,  435,  436,  441,  446,  447,  440,  639,  441,

      447,  446,  448,  448,  449,  450,  465,  449,  637,  451,
      422,  451,  466,  451,  450,  465,  452,  452,  452,  436,
      452,  466,  469,  469,  470,  470,  473,  477,  477,  489,
      489,  473,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  475,  476,
      478,  478,  478,  505,  478,  480,  480,  480,  505,  480,

      481,  491,  476,  636,  481,  491,  475,  493,  493,  494,
      494,  497,  497,  498,  498,  635,  501,  501,  501,  491,
      501,  506,  507,  507,  508,  512,  506,  519,  508,  512,
      550,  519,  520,  520,  520,  634,  520,  522,  522,  523,
      523,  550,  528,  529,  529,  519,  528,  534,  537,  537,
      537,  534,  537,  541,  541,  542,  542,  542,  631,  542,
      552,  552,  552,  564,  552,  556,  556,  556,  560,  556,
      590,  590,  560,  630,  564,  566,  566,  566,  570,  566,
      572,  573,  570,  629,  572,  573,  560,  573,  581,  582,
      589,  628,  581,  582,  589,  582,  570,  583,  572,  594,

      594,  583,  627,  583,  594,  591,  581,  613,  589,  591,
      626,  591,  601,  601,  613,  625,  616,  601,  610,  589,
      610,  610,  611,  616,  611,  611,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,

      664,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  671,  623,  622,  621,  620,  619,  671,  671,  671,

      671,  672,  618,  617,  615,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  673,  614,  612,  609,
      608,  607,  605,  604,  673,  673,  673,  674,  674,  603,
      600,  599,  674,  598,  597,  674,  596,  593,  674,  674,
      674,  675,  592,  588,  587,  586,  585,  584,  580,  675,
      675,  675,  676,  676,  676,  677,  677,  579,  578,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      678,  678,  678,  679,  679,  577,  576,  575,  679,  574,
      571,  679,  679,  569,  679,  679,  679,  679,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,

      680,  680,  680,  681,  681,  568,  565,  563,  681,  681,
      562,  681,  681,  561,  681,  681,  681,  681,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  683,  683,  559,  558,  555,  554,  683,
      553,  683,  683,  683,  684,  551,  549,  548,  547,  546,
      684,  684,  684,  685,  545,  544,  540,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  686,  686,
      539,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  687,  687,  538,  536,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  688,  688,

      535,  532,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  689,  689,  689,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  691,  531,  530,  527,  526,  525,  691,  691,  691,
      691,  692,  524,  521,  518,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  693,  517,  516,  515,  514,
      513,  511,  510,  693,  693,  693,  694,  694,  694,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  696,  509,  504,  503,  499,  496,
      696,  696,  696,  696,  697,  495,  492,  490,  697,  697,

      697,  697,  697,  697,  697,  697,  697,  697,  698,  698,
      488,  487,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  699,  486,  485,  484,  483,  482,  699,
      699,  699,  699,  700,  472,  471,  468,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  701,  701,
      467,  464,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  702,  702,  463,  462,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  703,  703,
      461,  460,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  704,  459,  458,  457,  456,  455,  704,

      704,  704,  704,  705,  454,  453,  445,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  708,  708,
      444,  443,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  710,  710,
      442,  438,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  711,  711,  437,  433,  711,  711,  711,

      711,  711,  711,  711,  711,  711,  711,  711,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  713,  713,  432,  431,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  715,  715,  430,  429,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  717,  717,  428,  427,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  718,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  719,  719,  426,  424,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  423,  421,
      411,  407,  406,  400,  399,  397,  395,  394,  393,  392,
      391,  384,  370,  369,  368,  361,  360,  359,  358,  351,
      350,  349,  346,  345,  344,  336,  334,  326,  325,  324,
      323,  319,  309,  308,  307,  306,  304,  300,  285,  284,
      282,  281,  280,  271,  268,  264,  263,  261,  260,  257,
      250,  233,  231,  225,  217,  200,  199,  195,  189,  178,
      176,  175,  174,  171,  156,  147,  143,  138,  137,  136,

      135,  134,  128,  121,  118,  116,  113,  101,   84,   77,
       70,   58,   47,   45,   39,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
/**************************************************************************
 * DESCRIPTION: Verilator: Flex verilog preprocessor
 *
 * Code available from: https://verilator.org
 *
 **************************************************************************
 *
 * Copyright 2003-2024 by Wilson Snyder. This program is free software; you
 * can redistribute it and/or modify it under the terms of either the
 * GNU Lesser General Public License Version 3 or the Perl Artistic License
 * Version 2.0.
 * SPDX-License-Identifier: LGPL-3.0-only OR Artistic-2.0
 *
 **************************************************************************
 * Do not use Flex in C++ mode.  It has bugs with yyunput() which result in
 * lost characters.
 **************************************************************************/
/* clang-format off */
#line 25 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
#ifdef NEVER_JUST_FOR_CLANG_FORMAT
 }
#endif

#include "V3PreProc.h"
#include "V3PreLex.h"
#ifdef _WIN32
# include <io.h> // for isatty
#endif

/* clang-format on */

V3PreLex* V3PreLex::s_currentLexp = nullptr;  // Current lexing point

#define LEXP V3PreLex::s_currentLexp

#define YY_INPUT(buf, result, max_size) \
    do { result = LEXP->inputToLex(buf, max_size); } while (false)

// Accessors, because flex keeps changing the type of yyleng
char* yyourtext() { return yytext; }
size_t yyourleng() { return yyleng; }
void yyourtext(const char* textp, size_t size) {
    yytext = (char*)textp;
    yyleng = size;
}

// FL_FWD only tracks columns; preproc uses linenoInc() to track lines, so
// insertion of a \n does not mess up line count
#define FL_FWDC (LEXP->curFilelinep()->forwardToken(yytext, yyleng, false))
// Use this to break between tokens whereever not return'ing a token (e.g. skipping inside lexer)
#define FL_BRK (LEXP->curFilelinep()->startToken())

static void linenoInc() { LEXP->linenoInc(); }
static bool pedantic() { return LEXP->m_pedantic; }
static void yyerror(char* msg) { LEXP->curFilelinep()->v3error(msg); }
static void yyerrorf(const char* msg) { LEXP->curFilelinep()->v3error(msg); }
static void appendDefValue(const char* t, size_t l) { LEXP->appendDefValue(t, l); }

/* clang-format off */
/**********************************************************************/
#line 1475 "/content/cad4u/hdl/verilator-5.024/src/V3PreLex_pregen.yy.cpp"

/* drop: Drop Ctrl-Z - can't pass thru or may EOF the output too soon */
/* Where we use symb/symbdef, we must also look for a `` join */
/* Note in the preprocessor \ESCaped is *not* always special; mantis1537/bug441 */
#line 104 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
        /**************************************************************/
#line 1482 "/content/cad4u/hdl/verilator-5.024/src/V3PreLex_pregen.yy.cpp"

#define INITIAL 0
#define ARGMODE 1
#define CMTMODE 2
#define CMTONEM 3
#define DEFCMT 4
#define DEFFORM 5
#define DEFFPAR 6
#define DEFVAL 7
#define ENCBASE64 8
#define EXPR 9
#define INCMODE 10
#define PRAGMA 11
#define PRAGMAERR 12
#define PRAGMAPRT 13
#define PRAGMAPRTERR 14
#define PRTMODE 15
#define QQQMODE 16
#define STRIFY 17
#define STRMODE 18

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state ( int _new_state );
    
    static void yy_pop_state ( void );
    
    static int yy_top_state ( void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 105 "/content/cad4u/hdl/verilator/src/V3PreLex.l"


#line 1733 "/content/cad4u/hdl/verilator-5.024/src/V3PreLex_pregen.yy.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (int) ((yy_c_buf_p) - (yytext_ptr));
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 660 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2116 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 107 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 108 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; LEXP->lineDirective(yytext);
                                                  return VP_LINE; }
	YY_BREAK
/* Special directives we recognize */
case 3:
YY_RULE_SETUP
#line 112 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_DEFINE; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 113 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_ELSE; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 114 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_ELSIF; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 115 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_ENDIF; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 116 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_IFDEF; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 117 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_IFNDEF; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 118 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_INCLUDE; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 119 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_UNDEF; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 120 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_UNDEFINEALL; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 121 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; if (!pedantic()) return VP_ERROR; else return VP_DEFREF; }
	YY_BREAK
/* We wanted this to be next to `protect But it must be before `pramga */
/* we win only because we both match to the end of the line so the length */
/* is equal and we are first*/
case 13:
YY_RULE_SETUP
#line 125 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC;
                          int res;
                          char enctype[16]; // long enough to hold "quote-printable"
                          if (LEXP->m_protBytes > 0) {
                              LEXP->curFilelinep()->v3warn(BADSTDPRAGMA, "Multiple `pragma protected encoding sections");
                          }
                          res = sscanf(yytext + std::strlen("encoding"), " = (enctype = \"%15[A-Za-z0-9]\", line_length = %d, bytes = %d)", &enctype[0], &LEXP->m_protLength, &LEXP->m_protBytes);
                          if (res == 0)
                              LEXP->curFilelinep()->v3warn(BADSTDPRAGMA, "`pragma protected encoding must have an \"enctype\" field");
                          LEXP->m_encType = !VL_STRCASECMP(enctype, "uuencode") ? Enctype::UUENCODE :
                                            !VL_STRCASECMP(enctype, "base64") ? Enctype::BASE64 :
                                            !VL_STRCASECMP(enctype, "quoted-printable") ? Enctype::QUOTE_PRINTABLE :
                                            !VL_STRCASECMP(enctype, "raw") ? Enctype::RAW : Enctype::ERR;
                          if (LEXP->m_encType == Enctype::ERR)
                              LEXP->curFilelinep()->v3warn(BADSTDPRAGMA, "Illegal encoding type for `pragma protected encoding");
                          if (LEXP->m_encType != Enctype::BASE64)
                              LEXP->curFilelinep()->v3warn(E_UNSUPPORTED, "Unsupported: only BASE64 is recognized for `pragma protected encoding");
                          if (res == 3) {
                              if ((LEXP->m_encType == Enctype::BASE64) && (LEXP->m_protLength & 3))
                                  LEXP->curFilelinep()->v3warn(BADSTDPRAGMA, "line_length must be multiple of 4 for BASE64");
                          } else {
                              // default values
                              LEXP->m_protBytes = 0;
                              LEXP->m_protLength = 76; // ?? default value not mentioned in IEEE spec
                          }
                          BEGIN(INITIAL);
                          return VP_TEXT;
                        }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 153 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{
                          FL_FWDC;
                          linenoInc();
                          BEGIN(ENCBASE64);
                          return VP_TEXT; }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 158 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{
                          FL_FWDC;
                          linenoInc();
                          LEXP->curFilelinep()->v3warn(PROTECTED, "A '`pragma protected data_block' encrypted section was detected and will be skipped.");
                          BEGIN(ENCBASE64);
                          return VP_TEXT; }
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 164 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; linenoInc(); BEGIN(INITIAL); return VP_TEXT; }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 165 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{
                          FL_FWDC;
                          linenoInc();
                          BEGIN(INITIAL);
                          return VP_TEXT; }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 170 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{
                          FL_FWDC;
                          linenoInc();
                          BEGIN(INITIAL);
                          return VP_TEXT; }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 175 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{
                          FL_FWDC;
                          linenoInc();
                          BEGIN(INITIAL);
                          return VP_TEXT; }
	YY_BREAK
/* end of `pragma protect */
case 20:
YY_RULE_SETUP
#line 181 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_TEXT; }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 182 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; linenoInc(); BEGIN(INITIAL); return VP_TEXT; }
	YY_BREAK
/* catch-all for unknown '`pragma protect' rules */
case 22:
YY_RULE_SETUP
#line 185 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ yyless(0);
                          BEGIN(PRAGMAPRTERR);
                          return VP_TEXT; }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 188 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; linenoInc(); FL_BRK;
                          if ((yyourleng()-1) <= size_t(LEXP->m_protLength) && ((yyleng & 3) == 1)) {
                              LEXP->m_protBytes -= (yyleng-1)/4*3;
                          } else {
                              LEXP->curFilelinep()->v3warn(BADSTDPRAGMA, "BASE64 line too long in `pragma protect key_bloock/data_block");
                          }
                          if (yytext[yyleng-3] == '=')
                              LEXP->m_protBytes++;
                          if (yytext[yyleng-2] == '=')
                              LEXP->m_protBytes++;
                          if (LEXP->m_protBytes == 0) {
                              BEGIN(INITIAL);
                          } else if (LEXP->m_protBytes < 0)
                              LEXP->curFilelinep()->v3warn(BADSTDPRAGMA, "BASE64 encoding (too short) in `pragma protect key_bloock/data_block");
                          /*return VP_TEXT;*/ }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 203 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC;
                          if (LEXP->m_protBytes != 0)
                              LEXP->curFilelinep()->v3warn(BADSTDPRAGMA, "BASE64 encoding length mismatch in `pragma protect key_bloock/data_block");
                          linenoInc(); BEGIN(INITIAL);
                          return VP_TEXT; }
	YY_BREAK
/* Catch only empty `pragma lines */
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 210 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{
                          yyless(yyleng - 1); FL_FWDC;
                          if (v3Global.opt.pedantic()) {
                              LEXP->curFilelinep()->v3warn(BADSTDPRAGMA, "`pragma is missing a pragma_expression.");
                          }
                          return VP_TEXT; }
	YY_BREAK
/* catch all other nonempty `pragma */
case 26:
YY_RULE_SETUP
#line 218 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{
                          yyless(yyleng - 1); FL_FWDC;
                          if (!v3Global.opt.preprocOnly())
                              BEGIN(PRAGMA);
                          return VP_TEXT; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 223 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; BEGIN(PRAGMAPRT); return VP_TEXT;}
	YY_BREAK
/* catch-all for unknown `pragma rules */
case 28:
YY_RULE_SETUP
#line 225 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ yyless(0);
                          BEGIN(PRAGMAERR);
                          return VP_TEXT; }
	YY_BREAK
/* the catch-all rule only got 1 char, lets get all line */
case 29:
YY_RULE_SETUP
#line 230 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC;
                          /* Add a warning here for unknown pragmas if desired, at the moment , we don't */
                          /* LEXP->curFilelinep()->v3warn(BADPRAGMA, "Unknown `pragma"); */
                          BEGIN(INITIAL);
                          return VP_TEXT; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 235 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC;
                          LEXP->curFilelinep()->v3warn(BADSTDPRAGMA, "Unknown '`pragma protect' error");
                          BEGIN(INITIAL);
                          return VP_TEXT; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 239 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC;
                          static string rtnfile;
                          rtnfile = '"'; rtnfile += LEXP->curFilelinep()->filename();
                          rtnfile += '"'; yytext = (char*)rtnfile.c_str(); yyleng = rtnfile.length();
                          return VP_STRING; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 244 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC;
                          static char buf[25];
                          VL_SNPRINTF(buf, 25, "%d", LEXP->curFilelinep()->lastLineno());
                          yytext = buf; yyleng = std::strlen(yytext);
                          return VP_TEXT; }
	YY_BREAK
/* Pass-through strings */
case 33:
YY_RULE_SETUP
#line 251 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ yy_push_state(STRMODE); yymore(); }
	YY_BREAK
case YY_STATE_EOF(STRMODE):
#line 252 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; linenoInc(); yyerrorf("EOF in unterminated string");
                          yyleng=0; return VP_EOF_ERROR; }
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 254 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; linenoInc(); yyerrorf("Unterminated string");
                          FL_BRK; BEGIN(INITIAL); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 256 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 257 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 258 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ linenoInc(); yymore(); }
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 259 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ LEXP->warnBackslashSpace(); yyless(1); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 260 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 261 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; yy_pop_state();
                          if (LEXP->m_parenLevel || LEXP->m_defQuote) {
                              LEXP->m_defQuote=false; appendDefValue(yytext, yyleng);
                              yyleng=0; FL_BRK;
                          } else return VP_STRING; }
	YY_BREAK
/* Pass-through quote-quote-quote */
case 41:
YY_RULE_SETUP
#line 268 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ yy_push_state(QQQMODE); yymore(); }
	YY_BREAK
case YY_STATE_EOF(QQQMODE):
#line 269 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; linenoInc(); yyerrorf("EOF in unterminated \"\"\" string");
                          yyleng=0; return VP_EOF_ERROR; }
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 271 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; linenoInc(); yymore(); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 272 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 273 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 274 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ linenoInc(); yymore(); }
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 275 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ LEXP->warnBackslashSpace(); yyless(1); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 276 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 277 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 278 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; yy_pop_state();
                          if (LEXP->m_parenLevel || LEXP->m_defQuote) {
                              LEXP->m_defQuote=false; appendDefValue(yytext, yyleng);
                              yyleng=0; FL_BRK;
                          } else return VP_STRING; }
	YY_BREAK
/* Stringification */
case 50:
YY_RULE_SETUP
#line 285 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; yy_push_state(STRIFY); return VP_STRIFY; }
	YY_BREAK
case YY_STATE_EOF(STRIFY):
#line 286 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; linenoInc(); yyerrorf("EOF in unterminated '\"");
                          yyleng=0; return VP_EOF_ERROR; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 288 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_BACKQUOTE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 289 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ yy_push_state(STRMODE); yymore(); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 290 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; yy_pop_state(); return VP_STRIFY; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 291 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_SYMBOL; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 292 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; yyleng-=2; return VP_SYMBOL_JOIN; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 293 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_DEFREF; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 294 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; yyleng-=2; return VP_DEFREF_JOIN; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 295 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; yyleng-=2; return VP_JOIN; }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 296 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; linenoInc(); yytext = (char*)"\n"; yyleng = 1; return VP_WHITE; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 297 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_WHITE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 298 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; FL_BRK; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 299 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; FL_BRK; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 300 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_TEXT; }
	YY_BREAK
/* Protected blocks */
case 64:
YY_RULE_SETUP
#line 303 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ yy_push_state(PRTMODE); yymore(); }
	YY_BREAK
case YY_STATE_EOF(PRTMODE):
#line 304 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; linenoInc(); yyerrorf("EOF in `protected");
                          yyleng = 0; return VP_EOF_ERROR; }
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 306 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; linenoInc(); return VP_TEXT; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 307 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 308 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; yy_pop_state(); return VP_TEXT; }
	YY_BREAK
/* Pass-through include <> filenames */
case YY_STATE_EOF(INCMODE):
#line 311 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; linenoInc(); yyerrorf("EOF in unterminated include filename");
                          yyleng = 0; return VP_EOF_ERROR; }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 313 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; linenoInc(); yyerrorf("Unterminated include filename");
                          FL_BRK; BEGIN(INITIAL); }
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 315 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 316 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 317 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; yy_pop_state(); return VP_STRING; }
	YY_BREAK
/* Reading definition formal parenthesis (or not) to begin formal arguments */
/* Note '(' must IMMEDIATELY follow definition name */
case 72:
YY_RULE_SETUP
#line 321 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; appendDefValue("(", 1); LEXP->m_formalLevel=1;
                          FL_BRK; BEGIN(DEFFORM); }
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 323 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; yy_pop_state(); unput('\n'); yyleng=0; return VP_DEFFORM; }  /* DEFVAL will later grab the return */
	YY_BREAK
case YY_STATE_EOF(DEFFPAR):
#line 324 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; yy_pop_state(); return VP_DEFFORM; }  /* empty formals */
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 325 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; yy_pop_state(); unput(yytext[yyleng-1]); yyleng=0; return VP_DEFFORM; }  /* empty formals */
	YY_BREAK
/* Reading definition formals (declaration of a define) */
case 75:
YY_RULE_SETUP
#line 328 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; appendDefValue(yytext, yyleng); FL_BRK; yyleng=0; ++LEXP->m_formalLevel; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 329 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; appendDefValue(yytext, yyleng); yyleng=0;
                          if ((--LEXP->m_formalLevel)==0) { yy_pop_state(); return VP_DEFFORM; }
                          FL_BRK; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 332 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ yy_push_state(CMTMODE); yymore(); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 333 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_COMMENT;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 334 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; FL_BRK; }
	YY_BREAK
case YY_STATE_EOF(DEFFORM):
#line 335 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; linenoInc(); yy_pop_state(); yyerrorf("Unterminated ( in define formal arguments.");
                          yyleng=0; return VP_DEFFORM; }
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 337 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; linenoInc(); appendDefValue((char*)"\n", 1); FL_BRK; }  /* Include return so can maintain output line count */
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 338 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ LEXP->warnBackslashSpace(); yyless(1); }
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 339 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; linenoInc(); appendDefValue((char*)"\\\n", 2); FL_BRK; }  /* Include return so can maintain output line count */
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 340 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ LEXP->m_defQuote=true; yy_push_state(STRMODE); yymore(); }  /* Legal only in default values */
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 341 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ LEXP->m_defQuote=true; yy_push_state(QQQMODE); yymore(); }  /* Legal only in default values */
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 342 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; appendDefValue(yytext, yyleng); FL_BRK; }  /* Maybe illegal, otherwise in default value */
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 343 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; appendDefValue(yytext, yyleng); FL_BRK; }  /* Maybe illegal, otherwise in default value */
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 344 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; LEXP->m_formalLevel++; appendDefValue(yytext, yyleng); FL_BRK; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 345 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; LEXP->m_formalLevel--; appendDefValue(yytext, yyleng); FL_BRK; }
	YY_BREAK
case 89:
#line 347 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
case 90:
#line 348 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
case 91:
YY_RULE_SETUP
#line 348 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; appendDefValue(yytext, yyleng); FL_BRK; }
	YY_BREAK
/* Reading definition value (declaration of a define's text) */
case 92:
YY_RULE_SETUP
#line 351 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ LEXP->m_defCmtSlash=false; yy_push_state(DEFCMT); yymore(); }  /* Special comment parser */
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 352 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; linenoInc(); appendDefValue((char*)"\n", 1); FL_BRK; }  /* Spec says // not part of define value */
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 353 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_COMMENT;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 354 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; FL_BRK; }
	YY_BREAK
case YY_STATE_EOF(DEFVAL):
#line 355 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; linenoInc(); yy_pop_state(); yytext=(char*)"\n"; yyleng=1; return VP_DEFVALUE; }  /* Technically illegal, but people complained */
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 356 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; linenoInc(); yy_pop_state(); yytext=(char*)"\n"; yyleng=1; return VP_DEFVALUE; }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 357 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ LEXP->warnBackslashSpace(); yyless(1); }
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 358 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; linenoInc(); appendDefValue((char*)"\\\n", 2); FL_BRK; }  /* Return, AND \ is part of define value */
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 359 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ LEXP->m_defQuote = true; yy_push_state(STRMODE); yymore(); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 360 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ LEXP->m_defQuote = true; yy_push_state(QQQMODE); yymore(); }
	YY_BREAK
case 101:
#line 362 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
case 102:
#line 363 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
case 103:
YY_RULE_SETUP
#line 363 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; appendDefValue(yytext, yyleng); FL_BRK; }
	YY_BREAK
/* Comments inside define values - if embedded get added to define value per spec */
/* - if no \{crnl} ending then the comment belongs to the next line, as a non-embedded comment */
/* - if all but (say) 3rd line is missing \ then it's indeterminate */
case 104:
YY_RULE_SETUP
#line 368 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; yy_pop_state(); appendDefValue(yytext, yyleng); FL_BRK; }
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 369 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ LEXP->warnBackslashSpace(); yyless(1); }
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 370 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; linenoInc(); LEXP->m_defCmtSlash=true;
                          appendDefValue(yytext, yyleng-2); appendDefValue((char*)"\n", 1);  /* Return but not \ */
                          FL_BRK; }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 373 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ linenoInc(); yymore(); if (LEXP->m_defCmtSlash) yyerrorf("One line of /* ... */ is missing \\ before newline");
                          BEGIN(CMTMODE); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 375 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 376 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ yymore(); }
	YY_BREAK
case YY_STATE_EOF(DEFCMT):
#line 377 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; yyerrorf("EOF in '/* ... */' block comment\n");
                          yyleng=0; return VP_EOF_ERROR; }
	YY_BREAK
/* Preprocessor expression */
case YY_STATE_EOF(EXPR):
#line 381 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; linenoInc(); yyerrorf("EOF in unterminated preprocessor expression");
                          yyleng = 0; return VP_EOF_ERROR; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 383 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ yy_push_state(CMTMODE); yymore(); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 384 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_COMMENT;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 385 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_TEXT; }  /* V3PreProc will push another EXPR state to stack */
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 386 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; yy_pop_state(); return VP_TEXT; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 387 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_TEXT; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 388 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_TEXT; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 389 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_TEXT; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 390 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_TEXT; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 391 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_TEXT; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 392 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_SYMBOL; }
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 393 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; linenoInc(); yytext=(char*)"\n"; yyleng=1; return VP_WHITE; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 394 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_WHITE; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 395 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_TEXT; }
	YY_BREAK
/* Define arguments (use of a define) */
case 123:
YY_RULE_SETUP
#line 398 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ yy_push_state(CMTMODE); yymore(); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 399 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_COMMENT; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 400 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; FL_BRK; }
	YY_BREAK
case YY_STATE_EOF(ARGMODE):
#line 401 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; yyerrorf("EOF in define argument list\n");
                          yyleng = 0; return VP_EOF_ERROR; }
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 403 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; linenoInc(); yytext=(char*)"\n"; yyleng=1; return VP_WHITE; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 404 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ yy_push_state(STRMODE); yymore(); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 405 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ yy_push_state(QQQMODE); yymore(); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 406 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; appendDefValue(yytext, yyleng); FL_BRK; }  /* Literal text */
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 407 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; yy_push_state(STRIFY); return VP_STRIFY; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 408 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; LEXP->m_parenLevel++; appendDefValue(yytext, yyleng); FL_BRK; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 409 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; LEXP->m_parenLevel--; appendDefValue(yytext, yyleng); FL_BRK; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 410 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; LEXP->m_parenLevel++;
                          // Note paren level 0 means before "(" of starting args
                          // Level 1 means "," between arguments
                          // Level 2+ means one inside the () of an argument
                          if (LEXP->m_parenLevel == 1) {  // Starting (
                              if (!VString::isWhitespace(LEXP->m_defValue)) {
                                  yyerrorf("Illegal text before '(' that starts define arguments");
                              }
                          }
                          if (LEXP->m_parenLevel>1) {
                              appendDefValue(yytext, yyleng); FL_BRK;
                          } else {
                              return VP_TEXT;
                        }}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 424 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; LEXP->m_parenLevel--;
                          if (LEXP->m_parenLevel>0) {
                              appendDefValue(yytext, yyleng); FL_BRK;
                          } else {
                              yy_pop_state(); return VP_DEFARG;
                        }}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 430 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; if (LEXP->m_parenLevel>1) {
                              appendDefValue(yytext, yyleng); FL_BRK;
                          } else {
                              yy_pop_state(); return VP_DEFARG;
                        }}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 435 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; appendDefValue(yytext, yyleng); FL_BRK; }  /* defref in defref - outer macro expands first */
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 436 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; appendDefValue(yytext, yyleng); FL_BRK; }  /* defref in defref - outer macro expands first */
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 437 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; appendDefValue(yytext, yyleng); FL_BRK; }  /* defref in defref - outer macro expands first */
	YY_BREAK
case 139:
#line 439 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
case 140:
YY_RULE_SETUP
#line 439 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; appendDefValue(yytext, yyleng); FL_BRK; }
	YY_BREAK
/* Pragma comments. */
case 141:
YY_RULE_SETUP
#line 442 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; LEXP->verilatorCmtLint(yytext + 2, true); return VP_COMMENT; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 443 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; LEXP->verilatorCmtLint(yytext + 2, false); return VP_COMMENT; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 444 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; LEXP->verilatorCmtLintRestore(); return VP_COMMENT; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 445 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; LEXP->verilatorCmtLintSave(); return VP_COMMENT; }
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 446 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; LEXP->verilatorCmtLint(yytext + 2, true); return VP_COMMENT; }
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 447 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; LEXP->verilatorCmtLint(yytext + 2, false); return VP_COMMENT; }
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 448 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; LEXP->verilatorCmtLintRestore(); return VP_COMMENT; }
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 449 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; LEXP->verilatorCmtLintSave(); return VP_COMMENT; }
	YY_BREAK
/* One line comments. */
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 452 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; linenoInc(); yytext=(char*)"\n"; yyleng=1; return VP_WHITE; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 453 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ yy_push_state(CMTONEM); yymore(); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 454 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; yy_pop_state(); return VP_COMMENT; }
	YY_BREAK
/* C-style comments. */
/**** See also DEFCMT */
case 152:
YY_RULE_SETUP
#line 458 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ yy_push_state(CMTMODE); yymore(); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 459 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; yy_pop_state(); return VP_COMMENT; }
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 460 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ linenoInc(); yymore(); }
	YY_BREAK
case YY_STATE_EOF(CMTMODE):
#line 461 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; yyerrorf("EOF in '/* ... */' block comment\n");
                                  yyleng=0; return VP_EOF_ERROR; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 463 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 464 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ yymore(); }
	YY_BREAK
/* Define calls */
/* symbdef prevents normal lex rules from making `\`"foo a symbol {`"foo} instead of a BACKQUOTE */
case 157:
YY_RULE_SETUP
#line 468 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_DEFREF; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 469 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; yyleng-=2; return VP_DEFREF_JOIN; }
	YY_BREAK
/* Generics */
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 472 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; linenoInc(); yytext=(char*)"\n"; yyleng=1; return VP_WHITE; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 473 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_EOF; }  /* A "normal" EOF */
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 474 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_SYMBOL; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 475 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; yyleng-=2; return VP_SYMBOL_JOIN; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 476 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; yyleng-=2; return VP_JOIN; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 477 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_WHITE; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 478 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; FL_BRK; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 479 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; FL_BRK; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 480 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
{ FL_FWDC; return VP_TEXT; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 481 "/content/cad4u/hdl/verilator/src/V3PreLex.l"
ECHO;
	YY_BREAK
#line 2886 "/content/cad4u/hdl/verilator-5.024/src/V3PreLex_pregen.yy.cpp"
case YY_STATE_EOF(CMTONEM):
case YY_STATE_EOF(ENCBASE64):
case YY_STATE_EOF(PRAGMA):
case YY_STATE_EOF(PRAGMAERR):
case YY_STATE_EOF(PRAGMAPRT):
case YY_STATE_EOF(PRAGMAPRTERR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 660 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 660 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 659);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree( (yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 481 "/content/cad4u/hdl/verilator/src/V3PreLex.l"

// clang-format on

void V3PreLex::pushStateDefArg(int level) {
    // Enter define substitution argument state
    yy_push_state(ARGMODE);
    m_parenLevel = level;
    m_defValue = "";
}

void V3PreLex::pushStateDefForm() {
    // Enter define formal arguments state
    yy_push_state(DEFFPAR);  // First is an optional ( to begin args
    m_parenLevel = 0;
    m_defValue = "";
}

void V3PreLex::pushStateDefValue() {
    // Enter define value state
    yy_push_state(DEFVAL);
    m_parenLevel = 0;
    m_defValue = "";
}

void V3PreLex::pushStateExpr() {
    // Enter preprocessor expression state
    yy_push_state(EXPR);
}

void V3PreLex::pushStateIncFilename() {
    // Enter include <> filename state
    yy_push_state(INCMODE);
    yymore();
}

void V3PreLex::setYYDebug(bool on) {
    yy_flex_debug = static_cast<int>(on); }

int V3PreLex::lex() {
    V3PreLex::s_currentLexp = this;  // Tell parser where to get/put data
    // Remember token start location, may be updated by the lexer later
    m_tokFilelinep = curFilelinep();
    return yylex();
}

size_t V3PreLex::inputToLex(char* buf, size_t max_size) {
    // We need a custom YY_INPUT because we can't use flex buffers.
    // Flex buffers are limited to 2GB, and we can't chop into 2G pieces
    // because buffers can't end in the middle of tokens.
    // Note if we switched streams here (which we don't) "buf" would be
    // become a stale invalid pointer.
    //
    VPreStream* streamp = curStreamp();
    if (debug() >= 10) {  // LCOV_EXCL_START
        cout << "-  pp:inputToLex ITL s=" << max_size << " bs=" << streamp->m_buffers.size()
             << endl;
        dumpStack();
    }  // LCOV_EXCL_STOP
    // For testing, use really small chunks
    // if (max_size > 13) max_size=13;
again:
    size_t got = 0;
    // Get from this stream
    while (got < max_size  // Haven't got enough
           && !streamp->m_buffers.empty()) {  // And something buffered
        string front = curStreamp()->m_buffers.front();
        streamp->m_buffers.pop_front();
        size_t len = front.length();
        if (len > (max_size - got)) {  // Front string too big
            len = (max_size - got);
            string remainder = front.substr(len);
            front = front.substr(0, len);
            streamp->m_buffers.push_front(remainder);  // Put back remainder for next time
        }
        strncpy(buf + got, front.c_str(), len);
        got += len;
    }
    if (!got) {  // end of stream; try "above" file
        bool again = false;
        string forceOut = endOfStream(again /*ref*/);
        streamp = curStreamp();  // May have been updated
        if (forceOut != "") {
            if (forceOut.length() > max_size) {  // LCOV_EXCL_LINE
                yyerrorf("Output buffer too small for a `line");  // LCOV_EXCL_LINE
            } else {
                got = forceOut.length();
                strncpy(buf, forceOut.c_str(), got);
            }
        } else {
            if (streamp->m_eof) {
                if (yy_flex_debug) cout << "-  EOF\n";
            }
            got = 0;  // 0=EOF/EOS - although got was already 0.
            if (again) goto again;
        }
    }
    if (debug() >= 10) {
        cout << "-  pp::inputToLex  got=" << got << " '" << std::string{buf, got} << "'" << endl;
    }
    return got;
}

string V3PreLex::endOfStream(bool& againr) {
    // Switch to file or next unputString
    againr = false;
    if (yy_flex_debug) {
        cout << "-EOS state=" << curStreamp()->m_termState << " at " << curFilelinep() << endl;
    }
    if (curStreamp()->m_eof) return "";  // Don't delete the final "EOF" stream
    bool exited_file = curStreamp()->m_file;
    if (!exited_file) {
        // Midpoint of stream, just change buffers
        delete curStreamp();
        m_streampStack.pop();  // Must work as size>1; EOF is entry 0
        againr = true;
        return "";
    }
    // Multiple steps because we need FLEX to see ending \n and EOS to end
    // any illegal states, like an unterminated `protected region
    else if (!curStreamp()->m_termState) {
        // First shutdown phase for a file
        // Terminate all files with a newline.  This prevents problems if
        // the user had a define without a terminating newline,
        // otherwise the resumed file's next line would get tacked on.
        // Also makes it likely the `line that changes files comes out
        // immediately.
        curStreamp()->m_termState = 1;
        return "\n";  // Exit old file
    } else if (curStreamp()->m_termState == 1) {
        // Now the EOF - can't be sent with other characters
        curStreamp()->m_termState = 2;
        return "";  // End of file
    } else if (curStreamp()->m_termState == 2) {
        // Now ending `line
        curStreamp()->m_termState = 3;
        return curFilelinep()->lineDirectiveStrg(0);  // THe "2" exit is below
    } else {
        // Final shutdown phase for a stream, we can finally change the
        // current fileline to the new stream
        curStreamp()->m_termState = 0;
        FileLine* const filelinep = curFilelinep();
        delete curStreamp();
        m_streampStack.pop();  // Must work as size>1; EOF is entry 0
        if (curStreamp()->m_eof) {
            // EOF doesn't have a "real" fileline, but a linenumber of 0 from init time
            // Inherit whatever we last parsed so it's more obvious.
            curFilelinep(filelinep);
        }
        // The caller parser remembered the start location for the text we are parsing,
        // but we've discovered there was a file switch along the way, so update it.
        m_tokFilelinep = curFilelinep();
        //
        if (curStreamp()->m_eof) {
            return "";
        } else {
            return curFilelinep()->lineDirectiveStrg(2);  // Reenter resumed file
        }
    }
}

void V3PreLex::initFirstBuffer(FileLine* filelinep) {
    // Called from constructor to make first buffer
    // yy_create_buffer also sets yy_fill_buffer=1 so reads from YY_INPUT
    VPreStream* const streamp = new VPreStream{filelinep, this};
    streamp->m_eof = true;
    m_streampStack.push(streamp);
    //
    m_bufferState = yy_create_buffer(nullptr, YY_BUF_SIZE);
    yy_switch_to_buffer(m_bufferState);
    yyrestart(nullptr);
}

void V3PreLex::scanNewFile(FileLine* filelinep) {
    // Called on new open file.  scanBytesBack will be called next.
    if (streamDepth() > V3PreProc::DEFINE_RECURSION_LEVEL_MAX) {
        // The recursive `include in VPreProcImp should trigger first
        yyerrorf("Recursive `define or other nested inclusion");
        curStreamp()->m_eof = true;  // Fake it to stop recursion
    } else {
        VPreStream* const streamp = new VPreStream{filelinep, this};
        m_tokFilelinep = curFilelinep();
        streamp->m_file = true;
        scanSwitchStream(streamp);
    }
}

void V3PreLex::scanBytes(const string& str) {
    // Note buffers also appended in ::scanBytesBack
    // Not "m_buffers.push_front(std::string{strp,len})" as we need a `define
    // to take effect immediately, in the middle of the current buffer
    // Also we don't use scan_bytes that would set yy_fill_buffer
    // which would force Flex to bypass our YY_INPUT routine.
    if (streamDepth() > V3PreProc::DEFINE_RECURSION_LEVEL_MAX) {
        // More streams if recursive `define with complex insertion
        // More buffers mostly if something internal goes funky
        yyerrorf("Recursive `define or other nested inclusion");
        curStreamp()->m_eof = true;  // Fake it to stop recursion
    } else {
        VPreStream* const streamp = new VPreStream{curFilelinep(), this};
        streamp->m_buffers.push_front(str);
        scanSwitchStream(streamp);
    }
}

void V3PreLex::scanSwitchStream(VPreStream* streamp) {
    curStreamp()->m_buffers.push_front(currentUnreadChars());
    m_streampStack.push(streamp);
    yyrestart(nullptr);
}

void V3PreLex::scanBytesBack(const string& str) {
    // Initial creation, that will pull from YY_INPUT==inputToLex
    // Note buffers also appended in ::scanBytes
    if (VL_UNCOVERABLE(curStreamp()->m_eof)) yyerrorf("scanBytesBack not under scanNewFile");
    curStreamp()->m_buffers.push_back(str);
}

string V3PreLex::currentUnreadChars() {
    // WARNING - Peeking at internals
    ssize_t left = (yy_n_chars - (yy_c_buf_p - currentBuffer()->yy_ch_buf));
    if (left > 0) {  // left may be -1 at EOS
        *(yy_c_buf_p) = (yy_hold_char);
        return std::string(yy_c_buf_p, left);  // () narrowing conversion
    } else {
        return "";
    }
}

YY_BUFFER_STATE V3PreLex::currentBuffer() {
    return YY_CURRENT_BUFFER;
}

int V3PreLex::currentStartState() const {
    return YY_START;
}

void V3PreLex::lineDirective(const char* textp) {
    curFilelinep()->lineDirective(textp, m_enterExit /*ref*/);
    // Make sure we have a dependency on whatever file was specified
    V3File::addSrcDepend(curFilelinep()->filename());
}

void V3PreLex::warnBackslashSpace() {
    // Make fileline highlight the specific backslash and space
    curFilelinep()->v3warn(
        BSSPACE, "Backslash followed by whitespace, perhaps the whitespace is accidental?");
}

void V3PreLex::dumpSummary() {  // LCOV_EXCL_START
    cout << "-  pp::dumpSummary  curBuf=" << cvtToHex(currentBuffer());
#ifdef FLEX_DEBUG  // Else peeking at internals may cause portability issues
    ssize_t left = (yy_n_chars - (yy_c_buf_p - currentBuffer()->yy_ch_buf));
    cout << " left=" << std::dec << left;
#endif
    cout << endl;
}  // LCOV_EXCL_STOP

void V3PreLex::dumpStack() {  // LCOV_EXCL_START
    // For debug use
    dumpSummary();
    std::stack<VPreStream*> tmpstack = LEXP->m_streampStack;
    while (!tmpstack.empty()) {
        const VPreStream* const streamp = tmpstack.top();
        cout << "-    bufferStack[" << cvtToHex(streamp) << "]: "
             << " at=" << streamp->m_curFilelinep << " nBuf=" << streamp->m_buffers.size()
             << " size0=" << (streamp->m_buffers.empty() ? 0 : streamp->m_buffers.front().length())
             << (streamp->m_eof ? " [EOF]" : "") << (streamp->m_file ? " [FILE]" : "") << endl;
        tmpstack.pop();
    }
}  // LCOV_EXCL_STOP

string V3PreLex::cleanDbgStrg(const string& in) {
    string result = in;
    string::size_type pos;
    while ((pos = result.find('\n')) != string::npos) result.replace(pos, 1, "\\n");
    while ((pos = result.find('\r')) != string::npos) result.replace(pos, 1, "\\r");
    return result;
}

void V3PreLex::unused() {
    if (VL_UNCOVERABLE(false)) {  // LCOV_EXCL_START
        // Prevent unused warnings
        yy_top_state();
        yyerror((char*)"");
    }  // LCOV_EXCL_STOP
}

void V3PreLex::verilatorCmtLintSave() {
    m_lexLintState.push_back(*curFilelinep());
}
void V3PreLex::verilatorCmtLintRestore() {
    // No error here on restore without save - the verilog.y parse will report as appropriate
    if (m_lexLintState.empty()) return;
    curFilelinep()->warnStateFrom(m_lexLintState.back());
    m_lexLintState.pop_back();
}
void V3PreLex::verilatorCmtLint(const char* textp, bool warnOff) {
    const char* sp = textp;
    while (*sp && std::isspace(*sp)) ++sp;
    while (*sp && !std::isspace(*sp)) ++sp;  // "verilator"
    while (*sp && std::isspace(*sp)) ++sp;
    while (*sp && !std::isspace(*sp)) ++sp;  // "lint_on/lint_off"
    while (*sp && std::isspace(*sp)) ++sp;
    string msg = sp;
    for (auto pos = msg.begin(); pos != msg.end(); ++pos) {
        if (std::isspace(*pos) || *pos == '*') {
            msg.erase(pos, msg.end());
            break;
        }
    }
    // No warnings on bad warning codes - the verilog.y parse will report as appropriate
    curFilelinep()->warnOff(msg, warnOff);
}

/*###################################################################
 * Local Variables:
 * mode: C++
 * End:
 */

