// Generated by astgen // -*- mode: C++; c-file-style: "cc-mode" -*-
// For internal use. They assume argument is not nullptr.
template<> inline bool AstNode::privateTypeTest<AstAcosD>(const AstNode* nodep) { return nodep->type() == VNType::atAcosD; }
template<> inline bool AstNode::privateTypeTest<AstAcoshD>(const AstNode* nodep) { return nodep->type() == VNType::atAcoshD; }
template<> inline bool AstNode::privateTypeTest<AstActive>(const AstNode* nodep) { return nodep->type() == VNType::atActive; }
template<> inline bool AstNode::privateTypeTest<AstAdd>(const AstNode* nodep) { return nodep->type() == VNType::atAdd; }
template<> inline bool AstNode::privateTypeTest<AstAddD>(const AstNode* nodep) { return nodep->type() == VNType::atAddD; }
template<> inline bool AstNode::privateTypeTest<AstAddrOfCFunc>(const AstNode* nodep) { return nodep->type() == VNType::atAddrOfCFunc; }
template<> inline bool AstNode::privateTypeTest<AstAlways>(const AstNode* nodep) { return nodep->type() == VNType::atAlways; }
template<> inline bool AstNode::privateTypeTest<AstAlwaysObserved>(const AstNode* nodep) { return nodep->type() == VNType::atAlwaysObserved; }
template<> inline bool AstNode::privateTypeTest<AstAlwaysPost>(const AstNode* nodep) { return nodep->type() == VNType::atAlwaysPost; }
template<> inline bool AstNode::privateTypeTest<AstAlwaysPostponed>(const AstNode* nodep) { return nodep->type() == VNType::atAlwaysPostponed; }
template<> inline bool AstNode::privateTypeTest<AstAlwaysPublic>(const AstNode* nodep) { return nodep->type() == VNType::atAlwaysPublic; }
template<> inline bool AstNode::privateTypeTest<AstAlwaysReactive>(const AstNode* nodep) { return nodep->type() == VNType::atAlwaysReactive; }
template<> inline bool AstNode::privateTypeTest<AstAnd>(const AstNode* nodep) { return nodep->type() == VNType::atAnd; }
template<> inline bool AstNode::privateTypeTest<AstArg>(const AstNode* nodep) { return nodep->type() == VNType::atArg; }
template<> inline bool AstNode::privateTypeTest<AstArraySel>(const AstNode* nodep) { return nodep->type() == VNType::atArraySel; }
template<> inline bool AstNode::privateTypeTest<AstAsinD>(const AstNode* nodep) { return nodep->type() == VNType::atAsinD; }
template<> inline bool AstNode::privateTypeTest<AstAsinhD>(const AstNode* nodep) { return nodep->type() == VNType::atAsinhD; }
template<> inline bool AstNode::privateTypeTest<AstAssert>(const AstNode* nodep) { return nodep->type() == VNType::atAssert; }
template<> inline bool AstNode::privateTypeTest<AstAssertIntrinsic>(const AstNode* nodep) { return nodep->type() == VNType::atAssertIntrinsic; }
template<> inline bool AstNode::privateTypeTest<AstAssign>(const AstNode* nodep) { return nodep->type() == VNType::atAssign; }
template<> inline bool AstNode::privateTypeTest<AstAssignAlias>(const AstNode* nodep) { return nodep->type() == VNType::atAssignAlias; }
template<> inline bool AstNode::privateTypeTest<AstAssignDly>(const AstNode* nodep) { return nodep->type() == VNType::atAssignDly; }
template<> inline bool AstNode::privateTypeTest<AstAssignForce>(const AstNode* nodep) { return nodep->type() == VNType::atAssignForce; }
template<> inline bool AstNode::privateTypeTest<AstAssignPost>(const AstNode* nodep) { return nodep->type() == VNType::atAssignPost; }
template<> inline bool AstNode::privateTypeTest<AstAssignPre>(const AstNode* nodep) { return nodep->type() == VNType::atAssignPre; }
template<> inline bool AstNode::privateTypeTest<AstAssignVarScope>(const AstNode* nodep) { return nodep->type() == VNType::atAssignVarScope; }
template<> inline bool AstNode::privateTypeTest<AstAssignW>(const AstNode* nodep) { return nodep->type() == VNType::atAssignW; }
template<> inline bool AstNode::privateTypeTest<AstAssocArrayDType>(const AstNode* nodep) { return nodep->type() == VNType::atAssocArrayDType; }
template<> inline bool AstNode::privateTypeTest<AstAssocSel>(const AstNode* nodep) { return nodep->type() == VNType::atAssocSel; }
template<> inline bool AstNode::privateTypeTest<AstAtan2D>(const AstNode* nodep) { return nodep->type() == VNType::atAtan2D; }
template<> inline bool AstNode::privateTypeTest<AstAtanD>(const AstNode* nodep) { return nodep->type() == VNType::atAtanD; }
template<> inline bool AstNode::privateTypeTest<AstAtanhD>(const AstNode* nodep) { return nodep->type() == VNType::atAtanhD; }
template<> inline bool AstNode::privateTypeTest<AstAtoN>(const AstNode* nodep) { return nodep->type() == VNType::atAtoN; }
template<> inline bool AstNode::privateTypeTest<AstAttrOf>(const AstNode* nodep) { return nodep->type() == VNType::atAttrOf; }
template<> inline bool AstNode::privateTypeTest<AstBasicDType>(const AstNode* nodep) { return nodep->type() == VNType::atBasicDType; }
template<> inline bool AstNode::privateTypeTest<AstBegin>(const AstNode* nodep) { return nodep->type() == VNType::atBegin; }
template<> inline bool AstNode::privateTypeTest<AstBind>(const AstNode* nodep) { return nodep->type() == VNType::atBind; }
template<> inline bool AstNode::privateTypeTest<AstBitsToRealD>(const AstNode* nodep) { return nodep->type() == VNType::atBitsToRealD; }
template<> inline bool AstNode::privateTypeTest<AstBracketArrayDType>(const AstNode* nodep) { return nodep->type() == VNType::atBracketArrayDType; }
template<> inline bool AstNode::privateTypeTest<AstBracketRange>(const AstNode* nodep) { return nodep->type() == VNType::atBracketRange; }
template<> inline bool AstNode::privateTypeTest<AstBreak>(const AstNode* nodep) { return nodep->type() == VNType::atBreak; }
template<> inline bool AstNode::privateTypeTest<AstBufIf1>(const AstNode* nodep) { return nodep->type() == VNType::atBufIf1; }
template<> inline bool AstNode::privateTypeTest<AstCAwait>(const AstNode* nodep) { return nodep->type() == VNType::atCAwait; }
template<> inline bool AstNode::privateTypeTest<AstCCall>(const AstNode* nodep) { return nodep->type() == VNType::atCCall; }
template<> inline bool AstNode::privateTypeTest<AstCCast>(const AstNode* nodep) { return nodep->type() == VNType::atCCast; }
template<> inline bool AstNode::privateTypeTest<AstCDType>(const AstNode* nodep) { return nodep->type() == VNType::atCDType; }
template<> inline bool AstNode::privateTypeTest<AstCExpr>(const AstNode* nodep) { return nodep->type() == VNType::atCExpr; }
template<> inline bool AstNode::privateTypeTest<AstCFile>(const AstNode* nodep) { return nodep->type() == VNType::atCFile; }
template<> inline bool AstNode::privateTypeTest<AstCFunc>(const AstNode* nodep) { return nodep->type() == VNType::atCFunc; }
template<> inline bool AstNode::privateTypeTest<AstCLocalScope>(const AstNode* nodep) { return nodep->type() == VNType::atCLocalScope; }
template<> inline bool AstNode::privateTypeTest<AstCLog2>(const AstNode* nodep) { return nodep->type() == VNType::atCLog2; }
template<> inline bool AstNode::privateTypeTest<AstCMethodCall>(const AstNode* nodep) { return nodep->type() == VNType::atCMethodCall; }
template<> inline bool AstNode::privateTypeTest<AstCMethodHard>(const AstNode* nodep) { return nodep->type() == VNType::atCMethodHard; }
template<> inline bool AstNode::privateTypeTest<AstCNew>(const AstNode* nodep) { return nodep->type() == VNType::atCNew; }
template<> inline bool AstNode::privateTypeTest<AstCReset>(const AstNode* nodep) { return nodep->type() == VNType::atCReset; }
template<> inline bool AstNode::privateTypeTest<AstCReturn>(const AstNode* nodep) { return nodep->type() == VNType::atCReturn; }
template<> inline bool AstNode::privateTypeTest<AstCStmt>(const AstNode* nodep) { return nodep->type() == VNType::atCStmt; }
template<> inline bool AstNode::privateTypeTest<AstCUse>(const AstNode* nodep) { return nodep->type() == VNType::atCUse; }
template<> inline bool AstNode::privateTypeTest<AstCase>(const AstNode* nodep) { return nodep->type() == VNType::atCase; }
template<> inline bool AstNode::privateTypeTest<AstCaseItem>(const AstNode* nodep) { return nodep->type() == VNType::atCaseItem; }
template<> inline bool AstNode::privateTypeTest<AstCast>(const AstNode* nodep) { return nodep->type() == VNType::atCast; }
template<> inline bool AstNode::privateTypeTest<AstCastDynamic>(const AstNode* nodep) { return nodep->type() == VNType::atCastDynamic; }
template<> inline bool AstNode::privateTypeTest<AstCastParse>(const AstNode* nodep) { return nodep->type() == VNType::atCastParse; }
template<> inline bool AstNode::privateTypeTest<AstCastSize>(const AstNode* nodep) { return nodep->type() == VNType::atCastSize; }
template<> inline bool AstNode::privateTypeTest<AstCastWrap>(const AstNode* nodep) { return nodep->type() == VNType::atCastWrap; }
template<> inline bool AstNode::privateTypeTest<AstCeilD>(const AstNode* nodep) { return nodep->type() == VNType::atCeilD; }
template<> inline bool AstNode::privateTypeTest<AstCell>(const AstNode* nodep) { return nodep->type() == VNType::atCell; }
template<> inline bool AstNode::privateTypeTest<AstCellArrayRef>(const AstNode* nodep) { return nodep->type() == VNType::atCellArrayRef; }
template<> inline bool AstNode::privateTypeTest<AstCellInline>(const AstNode* nodep) { return nodep->type() == VNType::atCellInline; }
template<> inline bool AstNode::privateTypeTest<AstCellInlineScope>(const AstNode* nodep) { return nodep->type() == VNType::atCellInlineScope; }
template<> inline bool AstNode::privateTypeTest<AstCellRef>(const AstNode* nodep) { return nodep->type() == VNType::atCellRef; }
template<> inline bool AstNode::privateTypeTest<AstClass>(const AstNode* nodep) { return nodep->type() == VNType::atClass; }
template<> inline bool AstNode::privateTypeTest<AstClassExtends>(const AstNode* nodep) { return nodep->type() == VNType::atClassExtends; }
template<> inline bool AstNode::privateTypeTest<AstClassOrPackageRef>(const AstNode* nodep) { return nodep->type() == VNType::atClassOrPackageRef; }
template<> inline bool AstNode::privateTypeTest<AstClassPackage>(const AstNode* nodep) { return nodep->type() == VNType::atClassPackage; }
template<> inline bool AstNode::privateTypeTest<AstClassRefDType>(const AstNode* nodep) { return nodep->type() == VNType::atClassRefDType; }
template<> inline bool AstNode::privateTypeTest<AstClocking>(const AstNode* nodep) { return nodep->type() == VNType::atClocking; }
template<> inline bool AstNode::privateTypeTest<AstClockingItem>(const AstNode* nodep) { return nodep->type() == VNType::atClockingItem; }
template<> inline bool AstNode::privateTypeTest<AstComment>(const AstNode* nodep) { return nodep->type() == VNType::atComment; }
template<> inline bool AstNode::privateTypeTest<AstCompareNN>(const AstNode* nodep) { return nodep->type() == VNType::atCompareNN; }
template<> inline bool AstNode::privateTypeTest<AstConcat>(const AstNode* nodep) { return nodep->type() == VNType::atConcat; }
template<> inline bool AstNode::privateTypeTest<AstConcatN>(const AstNode* nodep) { return nodep->type() == VNType::atConcatN; }
template<> inline bool AstNode::privateTypeTest<AstCond>(const AstNode* nodep) { return nodep->type() == VNType::atCond; }
template<> inline bool AstNode::privateTypeTest<AstCondBound>(const AstNode* nodep) { return nodep->type() == VNType::atCondBound; }
template<> inline bool AstNode::privateTypeTest<AstConsAssoc>(const AstNode* nodep) { return nodep->type() == VNType::atConsAssoc; }
template<> inline bool AstNode::privateTypeTest<AstConsDynArray>(const AstNode* nodep) { return nodep->type() == VNType::atConsDynArray; }
template<> inline bool AstNode::privateTypeTest<AstConsPackMember>(const AstNode* nodep) { return nodep->type() == VNType::atConsPackMember; }
template<> inline bool AstNode::privateTypeTest<AstConsPackUOrStruct>(const AstNode* nodep) { return nodep->type() == VNType::atConsPackUOrStruct; }
template<> inline bool AstNode::privateTypeTest<AstConsQueue>(const AstNode* nodep) { return nodep->type() == VNType::atConsQueue; }
template<> inline bool AstNode::privateTypeTest<AstConsWildcard>(const AstNode* nodep) { return nodep->type() == VNType::atConsWildcard; }
template<> inline bool AstNode::privateTypeTest<AstConst>(const AstNode* nodep) { return nodep->type() == VNType::atConst; }
template<> inline bool AstNode::privateTypeTest<AstConstDType>(const AstNode* nodep) { return nodep->type() == VNType::atConstDType; }
template<> inline bool AstNode::privateTypeTest<AstConstPool>(const AstNode* nodep) { return nodep->type() == VNType::atConstPool; }
template<> inline bool AstNode::privateTypeTest<AstConstraint>(const AstNode* nodep) { return nodep->type() == VNType::atConstraint; }
template<> inline bool AstNode::privateTypeTest<AstConstraintBefore>(const AstNode* nodep) { return nodep->type() == VNType::atConstraintBefore; }
template<> inline bool AstNode::privateTypeTest<AstConstraintExpr>(const AstNode* nodep) { return nodep->type() == VNType::atConstraintExpr; }
template<> inline bool AstNode::privateTypeTest<AstConstraintForeach>(const AstNode* nodep) { return nodep->type() == VNType::atConstraintForeach; }
template<> inline bool AstNode::privateTypeTest<AstConstraintIf>(const AstNode* nodep) { return nodep->type() == VNType::atConstraintIf; }
template<> inline bool AstNode::privateTypeTest<AstConstraintRef>(const AstNode* nodep) { return nodep->type() == VNType::atConstraintRef; }
template<> inline bool AstNode::privateTypeTest<AstConstraintRefDType>(const AstNode* nodep) { return nodep->type() == VNType::atConstraintRefDType; }
template<> inline bool AstNode::privateTypeTest<AstConstraintUnique>(const AstNode* nodep) { return nodep->type() == VNType::atConstraintUnique; }
template<> inline bool AstNode::privateTypeTest<AstContinue>(const AstNode* nodep) { return nodep->type() == VNType::atContinue; }
template<> inline bool AstNode::privateTypeTest<AstCosD>(const AstNode* nodep) { return nodep->type() == VNType::atCosD; }
template<> inline bool AstNode::privateTypeTest<AstCoshD>(const AstNode* nodep) { return nodep->type() == VNType::atCoshD; }
template<> inline bool AstNode::privateTypeTest<AstCountBits>(const AstNode* nodep) { return nodep->type() == VNType::atCountBits; }
template<> inline bool AstNode::privateTypeTest<AstCountOnes>(const AstNode* nodep) { return nodep->type() == VNType::atCountOnes; }
template<> inline bool AstNode::privateTypeTest<AstCover>(const AstNode* nodep) { return nodep->type() == VNType::atCover; }
template<> inline bool AstNode::privateTypeTest<AstCoverDecl>(const AstNode* nodep) { return nodep->type() == VNType::atCoverDecl; }
template<> inline bool AstNode::privateTypeTest<AstCoverInc>(const AstNode* nodep) { return nodep->type() == VNType::atCoverInc; }
template<> inline bool AstNode::privateTypeTest<AstCoverToggle>(const AstNode* nodep) { return nodep->type() == VNType::atCoverToggle; }
template<> inline bool AstNode::privateTypeTest<AstCvtDynArrayToPacked>(const AstNode* nodep) { return nodep->type() == VNType::atCvtDynArrayToPacked; }
template<> inline bool AstNode::privateTypeTest<AstCvtPackString>(const AstNode* nodep) { return nodep->type() == VNType::atCvtPackString; }
template<> inline bool AstNode::privateTypeTest<AstCvtPackedToDynArray>(const AstNode* nodep) { return nodep->type() == VNType::atCvtPackedToDynArray; }
template<> inline bool AstNode::privateTypeTest<AstCvtPackedToUnpackArray>(const AstNode* nodep) { return nodep->type() == VNType::atCvtPackedToUnpackArray; }
template<> inline bool AstNode::privateTypeTest<AstCvtUnpackArrayToPacked>(const AstNode* nodep) { return nodep->type() == VNType::atCvtUnpackArrayToPacked; }
template<> inline bool AstNode::privateTypeTest<AstDefImplicitDType>(const AstNode* nodep) { return nodep->type() == VNType::atDefImplicitDType; }
template<> inline bool AstNode::privateTypeTest<AstDefParam>(const AstNode* nodep) { return nodep->type() == VNType::atDefParam; }
template<> inline bool AstNode::privateTypeTest<AstDelay>(const AstNode* nodep) { return nodep->type() == VNType::atDelay; }
template<> inline bool AstNode::privateTypeTest<AstDisable>(const AstNode* nodep) { return nodep->type() == VNType::atDisable; }
template<> inline bool AstNode::privateTypeTest<AstDisableFork>(const AstNode* nodep) { return nodep->type() == VNType::atDisableFork; }
template<> inline bool AstNode::privateTypeTest<AstDisplay>(const AstNode* nodep) { return nodep->type() == VNType::atDisplay; }
template<> inline bool AstNode::privateTypeTest<AstDistChiSquare>(const AstNode* nodep) { return nodep->type() == VNType::atDistChiSquare; }
template<> inline bool AstNode::privateTypeTest<AstDistErlang>(const AstNode* nodep) { return nodep->type() == VNType::atDistErlang; }
template<> inline bool AstNode::privateTypeTest<AstDistExponential>(const AstNode* nodep) { return nodep->type() == VNType::atDistExponential; }
template<> inline bool AstNode::privateTypeTest<AstDistItem>(const AstNode* nodep) { return nodep->type() == VNType::atDistItem; }
template<> inline bool AstNode::privateTypeTest<AstDistNormal>(const AstNode* nodep) { return nodep->type() == VNType::atDistNormal; }
template<> inline bool AstNode::privateTypeTest<AstDistPoisson>(const AstNode* nodep) { return nodep->type() == VNType::atDistPoisson; }
template<> inline bool AstNode::privateTypeTest<AstDistT>(const AstNode* nodep) { return nodep->type() == VNType::atDistT; }
template<> inline bool AstNode::privateTypeTest<AstDistUniform>(const AstNode* nodep) { return nodep->type() == VNType::atDistUniform; }
template<> inline bool AstNode::privateTypeTest<AstDiv>(const AstNode* nodep) { return nodep->type() == VNType::atDiv; }
template<> inline bool AstNode::privateTypeTest<AstDivD>(const AstNode* nodep) { return nodep->type() == VNType::atDivD; }
template<> inline bool AstNode::privateTypeTest<AstDivS>(const AstNode* nodep) { return nodep->type() == VNType::atDivS; }
template<> inline bool AstNode::privateTypeTest<AstDoWhile>(const AstNode* nodep) { return nodep->type() == VNType::atDoWhile; }
template<> inline bool AstNode::privateTypeTest<AstDot>(const AstNode* nodep) { return nodep->type() == VNType::atDot; }
template<> inline bool AstNode::privateTypeTest<AstDpiExport>(const AstNode* nodep) { return nodep->type() == VNType::atDpiExport; }
template<> inline bool AstNode::privateTypeTest<AstDumpCtl>(const AstNode* nodep) { return nodep->type() == VNType::atDumpCtl; }
template<> inline bool AstNode::privateTypeTest<AstDynArrayDType>(const AstNode* nodep) { return nodep->type() == VNType::atDynArrayDType; }
template<> inline bool AstNode::privateTypeTest<AstElabDisplay>(const AstNode* nodep) { return nodep->type() == VNType::atElabDisplay; }
template<> inline bool AstNode::privateTypeTest<AstEmpty>(const AstNode* nodep) { return nodep->type() == VNType::atEmpty; }
template<> inline bool AstNode::privateTypeTest<AstEmptyQueue>(const AstNode* nodep) { return nodep->type() == VNType::atEmptyQueue; }
template<> inline bool AstNode::privateTypeTest<AstEmptyQueueDType>(const AstNode* nodep) { return nodep->type() == VNType::atEmptyQueueDType; }
template<> inline bool AstNode::privateTypeTest<AstEnumDType>(const AstNode* nodep) { return nodep->type() == VNType::atEnumDType; }
template<> inline bool AstNode::privateTypeTest<AstEnumItem>(const AstNode* nodep) { return nodep->type() == VNType::atEnumItem; }
template<> inline bool AstNode::privateTypeTest<AstEnumItemRef>(const AstNode* nodep) { return nodep->type() == VNType::atEnumItemRef; }
template<> inline bool AstNode::privateTypeTest<AstEq>(const AstNode* nodep) { return nodep->type() == VNType::atEq; }
template<> inline bool AstNode::privateTypeTest<AstEqCase>(const AstNode* nodep) { return nodep->type() == VNType::atEqCase; }
template<> inline bool AstNode::privateTypeTest<AstEqD>(const AstNode* nodep) { return nodep->type() == VNType::atEqD; }
template<> inline bool AstNode::privateTypeTest<AstEqN>(const AstNode* nodep) { return nodep->type() == VNType::atEqN; }
template<> inline bool AstNode::privateTypeTest<AstEqT>(const AstNode* nodep) { return nodep->type() == VNType::atEqT; }
template<> inline bool AstNode::privateTypeTest<AstEqWild>(const AstNode* nodep) { return nodep->type() == VNType::atEqWild; }
template<> inline bool AstNode::privateTypeTest<AstEventControl>(const AstNode* nodep) { return nodep->type() == VNType::atEventControl; }
template<> inline bool AstNode::privateTypeTest<AstExecGraph>(const AstNode* nodep) { return nodep->type() == VNType::atExecGraph; }
template<> inline bool AstNode::privateTypeTest<AstExpD>(const AstNode* nodep) { return nodep->type() == VNType::atExpD; }
template<> inline bool AstNode::privateTypeTest<AstExprStmt>(const AstNode* nodep) { return nodep->type() == VNType::atExprStmt; }
template<> inline bool AstNode::privateTypeTest<AstExtend>(const AstNode* nodep) { return nodep->type() == VNType::atExtend; }
template<> inline bool AstNode::privateTypeTest<AstExtendS>(const AstNode* nodep) { return nodep->type() == VNType::atExtendS; }
template<> inline bool AstNode::privateTypeTest<AstFClose>(const AstNode* nodep) { return nodep->type() == VNType::atFClose; }
template<> inline bool AstNode::privateTypeTest<AstFEof>(const AstNode* nodep) { return nodep->type() == VNType::atFEof; }
template<> inline bool AstNode::privateTypeTest<AstFError>(const AstNode* nodep) { return nodep->type() == VNType::atFError; }
template<> inline bool AstNode::privateTypeTest<AstFFlush>(const AstNode* nodep) { return nodep->type() == VNType::atFFlush; }
template<> inline bool AstNode::privateTypeTest<AstFGetC>(const AstNode* nodep) { return nodep->type() == VNType::atFGetC; }
template<> inline bool AstNode::privateTypeTest<AstFGetS>(const AstNode* nodep) { return nodep->type() == VNType::atFGetS; }
template<> inline bool AstNode::privateTypeTest<AstFOpen>(const AstNode* nodep) { return nodep->type() == VNType::atFOpen; }
template<> inline bool AstNode::privateTypeTest<AstFOpenMcd>(const AstNode* nodep) { return nodep->type() == VNType::atFOpenMcd; }
template<> inline bool AstNode::privateTypeTest<AstFRead>(const AstNode* nodep) { return nodep->type() == VNType::atFRead; }
template<> inline bool AstNode::privateTypeTest<AstFRewind>(const AstNode* nodep) { return nodep->type() == VNType::atFRewind; }
template<> inline bool AstNode::privateTypeTest<AstFScanF>(const AstNode* nodep) { return nodep->type() == VNType::atFScanF; }
template<> inline bool AstNode::privateTypeTest<AstFSeek>(const AstNode* nodep) { return nodep->type() == VNType::atFSeek; }
template<> inline bool AstNode::privateTypeTest<AstFTell>(const AstNode* nodep) { return nodep->type() == VNType::atFTell; }
template<> inline bool AstNode::privateTypeTest<AstFUngetC>(const AstNode* nodep) { return nodep->type() == VNType::atFUngetC; }
template<> inline bool AstNode::privateTypeTest<AstFell>(const AstNode* nodep) { return nodep->type() == VNType::atFell; }
template<> inline bool AstNode::privateTypeTest<AstFinal>(const AstNode* nodep) { return nodep->type() == VNType::atFinal; }
template<> inline bool AstNode::privateTypeTest<AstFinish>(const AstNode* nodep) { return nodep->type() == VNType::atFinish; }
template<> inline bool AstNode::privateTypeTest<AstFireEvent>(const AstNode* nodep) { return nodep->type() == VNType::atFireEvent; }
template<> inline bool AstNode::privateTypeTest<AstFloorD>(const AstNode* nodep) { return nodep->type() == VNType::atFloorD; }
template<> inline bool AstNode::privateTypeTest<AstForeach>(const AstNode* nodep) { return nodep->type() == VNType::atForeach; }
template<> inline bool AstNode::privateTypeTest<AstFork>(const AstNode* nodep) { return nodep->type() == VNType::atFork; }
template<> inline bool AstNode::privateTypeTest<AstFunc>(const AstNode* nodep) { return nodep->type() == VNType::atFunc; }
template<> inline bool AstNode::privateTypeTest<AstFuncRef>(const AstNode* nodep) { return nodep->type() == VNType::atFuncRef; }
template<> inline bool AstNode::privateTypeTest<AstGatePin>(const AstNode* nodep) { return nodep->type() == VNType::atGatePin; }
template<> inline bool AstNode::privateTypeTest<AstGenCase>(const AstNode* nodep) { return nodep->type() == VNType::atGenCase; }
template<> inline bool AstNode::privateTypeTest<AstGenFor>(const AstNode* nodep) { return nodep->type() == VNType::atGenFor; }
template<> inline bool AstNode::privateTypeTest<AstGenIf>(const AstNode* nodep) { return nodep->type() == VNType::atGenIf; }
template<> inline bool AstNode::privateTypeTest<AstGetcN>(const AstNode* nodep) { return nodep->type() == VNType::atGetcN; }
template<> inline bool AstNode::privateTypeTest<AstGetcRefN>(const AstNode* nodep) { return nodep->type() == VNType::atGetcRefN; }
template<> inline bool AstNode::privateTypeTest<AstGt>(const AstNode* nodep) { return nodep->type() == VNType::atGt; }
template<> inline bool AstNode::privateTypeTest<AstGtD>(const AstNode* nodep) { return nodep->type() == VNType::atGtD; }
template<> inline bool AstNode::privateTypeTest<AstGtN>(const AstNode* nodep) { return nodep->type() == VNType::atGtN; }
template<> inline bool AstNode::privateTypeTest<AstGtS>(const AstNode* nodep) { return nodep->type() == VNType::atGtS; }
template<> inline bool AstNode::privateTypeTest<AstGte>(const AstNode* nodep) { return nodep->type() == VNType::atGte; }
template<> inline bool AstNode::privateTypeTest<AstGteD>(const AstNode* nodep) { return nodep->type() == VNType::atGteD; }
template<> inline bool AstNode::privateTypeTest<AstGteN>(const AstNode* nodep) { return nodep->type() == VNType::atGteN; }
template<> inline bool AstNode::privateTypeTest<AstGteS>(const AstNode* nodep) { return nodep->type() == VNType::atGteS; }
template<> inline bool AstNode::privateTypeTest<AstHypotD>(const AstNode* nodep) { return nodep->type() == VNType::atHypotD; }
template<> inline bool AstNode::privateTypeTest<AstISToRD>(const AstNode* nodep) { return nodep->type() == VNType::atISToRD; }
template<> inline bool AstNode::privateTypeTest<AstIToRD>(const AstNode* nodep) { return nodep->type() == VNType::atIToRD; }
template<> inline bool AstNode::privateTypeTest<AstIf>(const AstNode* nodep) { return nodep->type() == VNType::atIf; }
template<> inline bool AstNode::privateTypeTest<AstIface>(const AstNode* nodep) { return nodep->type() == VNType::atIface; }
template<> inline bool AstNode::privateTypeTest<AstIfaceRefDType>(const AstNode* nodep) { return nodep->type() == VNType::atIfaceRefDType; }
template<> inline bool AstNode::privateTypeTest<AstImplication>(const AstNode* nodep) { return nodep->type() == VNType::atImplication; }
template<> inline bool AstNode::privateTypeTest<AstImplicit>(const AstNode* nodep) { return nodep->type() == VNType::atImplicit; }
template<> inline bool AstNode::privateTypeTest<AstInitArray>(const AstNode* nodep) { return nodep->type() == VNType::atInitArray; }
template<> inline bool AstNode::privateTypeTest<AstInitItem>(const AstNode* nodep) { return nodep->type() == VNType::atInitItem; }
template<> inline bool AstNode::privateTypeTest<AstInitial>(const AstNode* nodep) { return nodep->type() == VNType::atInitial; }
template<> inline bool AstNode::privateTypeTest<AstInitialAutomatic>(const AstNode* nodep) { return nodep->type() == VNType::atInitialAutomatic; }
template<> inline bool AstNode::privateTypeTest<AstInitialStatic>(const AstNode* nodep) { return nodep->type() == VNType::atInitialStatic; }
template<> inline bool AstNode::privateTypeTest<AstInside>(const AstNode* nodep) { return nodep->type() == VNType::atInside; }
template<> inline bool AstNode::privateTypeTest<AstInsideRange>(const AstNode* nodep) { return nodep->type() == VNType::atInsideRange; }
template<> inline bool AstNode::privateTypeTest<AstIntfRef>(const AstNode* nodep) { return nodep->type() == VNType::atIntfRef; }
template<> inline bool AstNode::privateTypeTest<AstIsUnbounded>(const AstNode* nodep) { return nodep->type() == VNType::atIsUnbounded; }
template<> inline bool AstNode::privateTypeTest<AstIsUnknown>(const AstNode* nodep) { return nodep->type() == VNType::atIsUnknown; }
template<> inline bool AstNode::privateTypeTest<AstJumpBlock>(const AstNode* nodep) { return nodep->type() == VNType::atJumpBlock; }
template<> inline bool AstNode::privateTypeTest<AstJumpGo>(const AstNode* nodep) { return nodep->type() == VNType::atJumpGo; }
template<> inline bool AstNode::privateTypeTest<AstJumpLabel>(const AstNode* nodep) { return nodep->type() == VNType::atJumpLabel; }
template<> inline bool AstNode::privateTypeTest<AstLambdaArgRef>(const AstNode* nodep) { return nodep->type() == VNType::atLambdaArgRef; }
template<> inline bool AstNode::privateTypeTest<AstLenN>(const AstNode* nodep) { return nodep->type() == VNType::atLenN; }
template<> inline bool AstNode::privateTypeTest<AstLet>(const AstNode* nodep) { return nodep->type() == VNType::atLet; }
template<> inline bool AstNode::privateTypeTest<AstLog10D>(const AstNode* nodep) { return nodep->type() == VNType::atLog10D; }
template<> inline bool AstNode::privateTypeTest<AstLogAnd>(const AstNode* nodep) { return nodep->type() == VNType::atLogAnd; }
template<> inline bool AstNode::privateTypeTest<AstLogD>(const AstNode* nodep) { return nodep->type() == VNType::atLogD; }
template<> inline bool AstNode::privateTypeTest<AstLogEq>(const AstNode* nodep) { return nodep->type() == VNType::atLogEq; }
template<> inline bool AstNode::privateTypeTest<AstLogIf>(const AstNode* nodep) { return nodep->type() == VNType::atLogIf; }
template<> inline bool AstNode::privateTypeTest<AstLogNot>(const AstNode* nodep) { return nodep->type() == VNType::atLogNot; }
template<> inline bool AstNode::privateTypeTest<AstLogOr>(const AstNode* nodep) { return nodep->type() == VNType::atLogOr; }
template<> inline bool AstNode::privateTypeTest<AstLt>(const AstNode* nodep) { return nodep->type() == VNType::atLt; }
template<> inline bool AstNode::privateTypeTest<AstLtD>(const AstNode* nodep) { return nodep->type() == VNType::atLtD; }
template<> inline bool AstNode::privateTypeTest<AstLtN>(const AstNode* nodep) { return nodep->type() == VNType::atLtN; }
template<> inline bool AstNode::privateTypeTest<AstLtS>(const AstNode* nodep) { return nodep->type() == VNType::atLtS; }
template<> inline bool AstNode::privateTypeTest<AstLte>(const AstNode* nodep) { return nodep->type() == VNType::atLte; }
template<> inline bool AstNode::privateTypeTest<AstLteD>(const AstNode* nodep) { return nodep->type() == VNType::atLteD; }
template<> inline bool AstNode::privateTypeTest<AstLteN>(const AstNode* nodep) { return nodep->type() == VNType::atLteN; }
template<> inline bool AstNode::privateTypeTest<AstLteS>(const AstNode* nodep) { return nodep->type() == VNType::atLteS; }
template<> inline bool AstNode::privateTypeTest<AstMTaskBody>(const AstNode* nodep) { return nodep->type() == VNType::atMTaskBody; }
template<> inline bool AstNode::privateTypeTest<AstMemberDType>(const AstNode* nodep) { return nodep->type() == VNType::atMemberDType; }
template<> inline bool AstNode::privateTypeTest<AstMemberSel>(const AstNode* nodep) { return nodep->type() == VNType::atMemberSel; }
template<> inline bool AstNode::privateTypeTest<AstMethodCall>(const AstNode* nodep) { return nodep->type() == VNType::atMethodCall; }
template<> inline bool AstNode::privateTypeTest<AstModDiv>(const AstNode* nodep) { return nodep->type() == VNType::atModDiv; }
template<> inline bool AstNode::privateTypeTest<AstModDivS>(const AstNode* nodep) { return nodep->type() == VNType::atModDivS; }
template<> inline bool AstNode::privateTypeTest<AstModport>(const AstNode* nodep) { return nodep->type() == VNType::atModport; }
template<> inline bool AstNode::privateTypeTest<AstModportFTaskRef>(const AstNode* nodep) { return nodep->type() == VNType::atModportFTaskRef; }
template<> inline bool AstNode::privateTypeTest<AstModportVarRef>(const AstNode* nodep) { return nodep->type() == VNType::atModportVarRef; }
template<> inline bool AstNode::privateTypeTest<AstModule>(const AstNode* nodep) { return nodep->type() == VNType::atModule; }
template<> inline bool AstNode::privateTypeTest<AstMonitorOff>(const AstNode* nodep) { return nodep->type() == VNType::atMonitorOff; }
template<> inline bool AstNode::privateTypeTest<AstMul>(const AstNode* nodep) { return nodep->type() == VNType::atMul; }
template<> inline bool AstNode::privateTypeTest<AstMulD>(const AstNode* nodep) { return nodep->type() == VNType::atMulD; }
template<> inline bool AstNode::privateTypeTest<AstMulS>(const AstNode* nodep) { return nodep->type() == VNType::atMulS; }
template<> inline bool AstNode::privateTypeTest<AstNToI>(const AstNode* nodep) { return nodep->type() == VNType::atNToI; }
template<> inline bool AstNode::privateTypeTest<AstNegate>(const AstNode* nodep) { return nodep->type() == VNType::atNegate; }
template<> inline bool AstNode::privateTypeTest<AstNegateD>(const AstNode* nodep) { return nodep->type() == VNType::atNegateD; }
template<> inline bool AstNode::privateTypeTest<AstNeq>(const AstNode* nodep) { return nodep->type() == VNType::atNeq; }
template<> inline bool AstNode::privateTypeTest<AstNeqCase>(const AstNode* nodep) { return nodep->type() == VNType::atNeqCase; }
template<> inline bool AstNode::privateTypeTest<AstNeqD>(const AstNode* nodep) { return nodep->type() == VNType::atNeqD; }
template<> inline bool AstNode::privateTypeTest<AstNeqN>(const AstNode* nodep) { return nodep->type() == VNType::atNeqN; }
template<> inline bool AstNode::privateTypeTest<AstNeqT>(const AstNode* nodep) { return nodep->type() == VNType::atNeqT; }
template<> inline bool AstNode::privateTypeTest<AstNeqWild>(const AstNode* nodep) { return nodep->type() == VNType::atNeqWild; }
template<> inline bool AstNode::privateTypeTest<AstNetlist>(const AstNode* nodep) { return nodep->type() == VNType::atNetlist; }
template<> inline bool AstNode::privateTypeTest<AstNew>(const AstNode* nodep) { return nodep->type() == VNType::atNew; }
template<> inline bool AstNode::privateTypeTest<AstNewCopy>(const AstNode* nodep) { return nodep->type() == VNType::atNewCopy; }
template<> inline bool AstNode::privateTypeTest<AstNewDynamic>(const AstNode* nodep) { return nodep->type() == VNType::atNewDynamic; }
template<> inline bool AstNode::privateTypeTest<AstNode>(const AstNode* nodep) { return true; }
template<> inline bool AstNode::privateTypeTest<AstNodeArrayDType>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeArrayDType) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeArrayDType); }
template<> inline bool AstNode::privateTypeTest<AstNodeAssign>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeAssign) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeAssign); }
template<> inline bool AstNode::privateTypeTest<AstNodeBiCom>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeBiCom) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeBiCom); }
template<> inline bool AstNode::privateTypeTest<AstNodeBiComAsv>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeBiComAsv) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeBiComAsv); }
template<> inline bool AstNode::privateTypeTest<AstNodeBiop>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeBiop) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeBiop); }
template<> inline bool AstNode::privateTypeTest<AstNodeBlock>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeBlock) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeBlock); }
template<> inline bool AstNode::privateTypeTest<AstNodeCCall>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeCCall) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeCCall); }
template<> inline bool AstNode::privateTypeTest<AstNodeCase>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeCase) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeCase); }
template<> inline bool AstNode::privateTypeTest<AstNodeCond>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeCond) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeCond); }
template<> inline bool AstNode::privateTypeTest<AstNodeCoverOrAssert>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeCoverOrAssert) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeCoverOrAssert); }
template<> inline bool AstNode::privateTypeTest<AstNodeDType>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeDType) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeDType); }
template<> inline bool AstNode::privateTypeTest<AstNodeDistBiop>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeDistBiop) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeDistBiop); }
template<> inline bool AstNode::privateTypeTest<AstNodeDistTriop>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeDistTriop) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeDistTriop); }
template<> inline bool AstNode::privateTypeTest<AstNodeExpr>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeExpr) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeExpr); }
template<> inline bool AstNode::privateTypeTest<AstNodeFTask>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeFTask) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeFTask); }
template<> inline bool AstNode::privateTypeTest<AstNodeFTaskRef>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeFTaskRef) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeFTaskRef); }
template<> inline bool AstNode::privateTypeTest<AstNodeFile>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeFile) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeFile); }
template<> inline bool AstNode::privateTypeTest<AstNodeFor>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeFor) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeFor); }
template<> inline bool AstNode::privateTypeTest<AstNodeForeach>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeForeach) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeForeach); }
template<> inline bool AstNode::privateTypeTest<AstNodeIf>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeIf) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeIf); }
template<> inline bool AstNode::privateTypeTest<AstNodeModule>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeModule) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeModule); }
template<> inline bool AstNode::privateTypeTest<AstNodePreSel>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodePreSel) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodePreSel); }
template<> inline bool AstNode::privateTypeTest<AstNodeProcedure>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeProcedure) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeProcedure); }
template<> inline bool AstNode::privateTypeTest<AstNodeQuadop>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeQuadop) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeQuadop); }
template<> inline bool AstNode::privateTypeTest<AstNodeRange>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeRange) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeRange); }
template<> inline bool AstNode::privateTypeTest<AstNodeReadWriteMem>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeReadWriteMem) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeReadWriteMem); }
template<> inline bool AstNode::privateTypeTest<AstNodeSel>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeSel) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeSel); }
template<> inline bool AstNode::privateTypeTest<AstNodeSimpleText>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeSimpleText) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeSimpleText); }
template<> inline bool AstNode::privateTypeTest<AstNodeStmt>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeStmt) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeStmt); }
template<> inline bool AstNode::privateTypeTest<AstNodeStream>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeStream) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeStream); }
template<> inline bool AstNode::privateTypeTest<AstNodeSystemBiopD>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeSystemBiopD) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeSystemBiopD); }
template<> inline bool AstNode::privateTypeTest<AstNodeSystemUniopD>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeSystemUniopD) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeSystemUniopD); }
template<> inline bool AstNode::privateTypeTest<AstNodeTermop>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeTermop) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeTermop); }
template<> inline bool AstNode::privateTypeTest<AstNodeText>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeText) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeText); }
template<> inline bool AstNode::privateTypeTest<AstNodeTriop>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeTriop) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeTriop); }
template<> inline bool AstNode::privateTypeTest<AstNodeUOrStructDType>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeUOrStructDType) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeUOrStructDType); }
template<> inline bool AstNode::privateTypeTest<AstNodeUniop>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeUniop) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeUniop); }
template<> inline bool AstNode::privateTypeTest<AstNodeVarRef>(const AstNode* nodep) { return static_cast<int>(nodep->type()) >= static_cast<int>(VNType::firstNodeVarRef) && static_cast<int>(nodep->type()) <= static_cast<int>(VNType::lastNodeVarRef); }
template<> inline bool AstNode::privateTypeTest<AstNot>(const AstNode* nodep) { return nodep->type() == VNType::atNot; }
template<> inline bool AstNode::privateTypeTest<AstNotFoundModule>(const AstNode* nodep) { return nodep->type() == VNType::atNotFoundModule; }
template<> inline bool AstNode::privateTypeTest<AstNullCheck>(const AstNode* nodep) { return nodep->type() == VNType::atNullCheck; }
template<> inline bool AstNode::privateTypeTest<AstOneHot>(const AstNode* nodep) { return nodep->type() == VNType::atOneHot; }
template<> inline bool AstNode::privateTypeTest<AstOneHot0>(const AstNode* nodep) { return nodep->type() == VNType::atOneHot0; }
template<> inline bool AstNode::privateTypeTest<AstOr>(const AstNode* nodep) { return nodep->type() == VNType::atOr; }
template<> inline bool AstNode::privateTypeTest<AstPackArrayDType>(const AstNode* nodep) { return nodep->type() == VNType::atPackArrayDType; }
template<> inline bool AstNode::privateTypeTest<AstPackage>(const AstNode* nodep) { return nodep->type() == VNType::atPackage; }
template<> inline bool AstNode::privateTypeTest<AstPackageExport>(const AstNode* nodep) { return nodep->type() == VNType::atPackageExport; }
template<> inline bool AstNode::privateTypeTest<AstPackageExportStarStar>(const AstNode* nodep) { return nodep->type() == VNType::atPackageExportStarStar; }
template<> inline bool AstNode::privateTypeTest<AstPackageImport>(const AstNode* nodep) { return nodep->type() == VNType::atPackageImport; }
template<> inline bool AstNode::privateTypeTest<AstParamTypeDType>(const AstNode* nodep) { return nodep->type() == VNType::atParamTypeDType; }
template<> inline bool AstNode::privateTypeTest<AstParseRef>(const AstNode* nodep) { return nodep->type() == VNType::atParseRef; }
template<> inline bool AstNode::privateTypeTest<AstParseTypeDType>(const AstNode* nodep) { return nodep->type() == VNType::atParseTypeDType; }
template<> inline bool AstNode::privateTypeTest<AstPast>(const AstNode* nodep) { return nodep->type() == VNType::atPast; }
template<> inline bool AstNode::privateTypeTest<AstPatMember>(const AstNode* nodep) { return nodep->type() == VNType::atPatMember; }
template<> inline bool AstNode::privateTypeTest<AstPattern>(const AstNode* nodep) { return nodep->type() == VNType::atPattern; }
template<> inline bool AstNode::privateTypeTest<AstPin>(const AstNode* nodep) { return nodep->type() == VNType::atPin; }
template<> inline bool AstNode::privateTypeTest<AstPort>(const AstNode* nodep) { return nodep->type() == VNType::atPort; }
template<> inline bool AstNode::privateTypeTest<AstPostAdd>(const AstNode* nodep) { return nodep->type() == VNType::atPostAdd; }
template<> inline bool AstNode::privateTypeTest<AstPostSub>(const AstNode* nodep) { return nodep->type() == VNType::atPostSub; }
template<> inline bool AstNode::privateTypeTest<AstPow>(const AstNode* nodep) { return nodep->type() == VNType::atPow; }
template<> inline bool AstNode::privateTypeTest<AstPowD>(const AstNode* nodep) { return nodep->type() == VNType::atPowD; }
template<> inline bool AstNode::privateTypeTest<AstPowSS>(const AstNode* nodep) { return nodep->type() == VNType::atPowSS; }
template<> inline bool AstNode::privateTypeTest<AstPowSU>(const AstNode* nodep) { return nodep->type() == VNType::atPowSU; }
template<> inline bool AstNode::privateTypeTest<AstPowUS>(const AstNode* nodep) { return nodep->type() == VNType::atPowUS; }
template<> inline bool AstNode::privateTypeTest<AstPragma>(const AstNode* nodep) { return nodep->type() == VNType::atPragma; }
template<> inline bool AstNode::privateTypeTest<AstPreAdd>(const AstNode* nodep) { return nodep->type() == VNType::atPreAdd; }
template<> inline bool AstNode::privateTypeTest<AstPreSub>(const AstNode* nodep) { return nodep->type() == VNType::atPreSub; }
template<> inline bool AstNode::privateTypeTest<AstPrimitive>(const AstNode* nodep) { return nodep->type() == VNType::atPrimitive; }
template<> inline bool AstNode::privateTypeTest<AstPrintTimeScale>(const AstNode* nodep) { return nodep->type() == VNType::atPrintTimeScale; }
template<> inline bool AstNode::privateTypeTest<AstPropSpec>(const AstNode* nodep) { return nodep->type() == VNType::atPropSpec; }
template<> inline bool AstNode::privateTypeTest<AstProperty>(const AstNode* nodep) { return nodep->type() == VNType::atProperty; }
template<> inline bool AstNode::privateTypeTest<AstPull>(const AstNode* nodep) { return nodep->type() == VNType::atPull; }
template<> inline bool AstNode::privateTypeTest<AstPutcN>(const AstNode* nodep) { return nodep->type() == VNType::atPutcN; }
template<> inline bool AstNode::privateTypeTest<AstQueueDType>(const AstNode* nodep) { return nodep->type() == VNType::atQueueDType; }
template<> inline bool AstNode::privateTypeTest<AstRToIRoundS>(const AstNode* nodep) { return nodep->type() == VNType::atRToIRoundS; }
template<> inline bool AstNode::privateTypeTest<AstRToIS>(const AstNode* nodep) { return nodep->type() == VNType::atRToIS; }
template<> inline bool AstNode::privateTypeTest<AstRand>(const AstNode* nodep) { return nodep->type() == VNType::atRand; }
template<> inline bool AstNode::privateTypeTest<AstRandCase>(const AstNode* nodep) { return nodep->type() == VNType::atRandCase; }
template<> inline bool AstNode::privateTypeTest<AstRandRNG>(const AstNode* nodep) { return nodep->type() == VNType::atRandRNG; }
template<> inline bool AstNode::privateTypeTest<AstRange>(const AstNode* nodep) { return nodep->type() == VNType::atRange; }
template<> inline bool AstNode::privateTypeTest<AstReadMem>(const AstNode* nodep) { return nodep->type() == VNType::atReadMem; }
template<> inline bool AstNode::privateTypeTest<AstRealToBits>(const AstNode* nodep) { return nodep->type() == VNType::atRealToBits; }
template<> inline bool AstNode::privateTypeTest<AstRedAnd>(const AstNode* nodep) { return nodep->type() == VNType::atRedAnd; }
template<> inline bool AstNode::privateTypeTest<AstRedOr>(const AstNode* nodep) { return nodep->type() == VNType::atRedOr; }
template<> inline bool AstNode::privateTypeTest<AstRedXor>(const AstNode* nodep) { return nodep->type() == VNType::atRedXor; }
template<> inline bool AstNode::privateTypeTest<AstRefDType>(const AstNode* nodep) { return nodep->type() == VNType::atRefDType; }
template<> inline bool AstNode::privateTypeTest<AstRelease>(const AstNode* nodep) { return nodep->type() == VNType::atRelease; }
template<> inline bool AstNode::privateTypeTest<AstRepeat>(const AstNode* nodep) { return nodep->type() == VNType::atRepeat; }
template<> inline bool AstNode::privateTypeTest<AstReplicate>(const AstNode* nodep) { return nodep->type() == VNType::atReplicate; }
template<> inline bool AstNode::privateTypeTest<AstReplicateN>(const AstNode* nodep) { return nodep->type() == VNType::atReplicateN; }
template<> inline bool AstNode::privateTypeTest<AstResizeLValue>(const AstNode* nodep) { return nodep->type() == VNType::atResizeLValue; }
template<> inline bool AstNode::privateTypeTest<AstRestrict>(const AstNode* nodep) { return nodep->type() == VNType::atRestrict; }
template<> inline bool AstNode::privateTypeTest<AstReturn>(const AstNode* nodep) { return nodep->type() == VNType::atReturn; }
template<> inline bool AstNode::privateTypeTest<AstRose>(const AstNode* nodep) { return nodep->type() == VNType::atRose; }
template<> inline bool AstNode::privateTypeTest<AstSFormat>(const AstNode* nodep) { return nodep->type() == VNType::atSFormat; }
template<> inline bool AstNode::privateTypeTest<AstSFormatF>(const AstNode* nodep) { return nodep->type() == VNType::atSFormatF; }
template<> inline bool AstNode::privateTypeTest<AstSScanF>(const AstNode* nodep) { return nodep->type() == VNType::atSScanF; }
template<> inline bool AstNode::privateTypeTest<AstSampleQueueDType>(const AstNode* nodep) { return nodep->type() == VNType::atSampleQueueDType; }
template<> inline bool AstNode::privateTypeTest<AstSampled>(const AstNode* nodep) { return nodep->type() == VNType::atSampled; }
template<> inline bool AstNode::privateTypeTest<AstScCtor>(const AstNode* nodep) { return nodep->type() == VNType::atScCtor; }
template<> inline bool AstNode::privateTypeTest<AstScDtor>(const AstNode* nodep) { return nodep->type() == VNType::atScDtor; }
template<> inline bool AstNode::privateTypeTest<AstScHdr>(const AstNode* nodep) { return nodep->type() == VNType::atScHdr; }
template<> inline bool AstNode::privateTypeTest<AstScImp>(const AstNode* nodep) { return nodep->type() == VNType::atScImp; }
template<> inline bool AstNode::privateTypeTest<AstScImpHdr>(const AstNode* nodep) { return nodep->type() == VNType::atScImpHdr; }
template<> inline bool AstNode::privateTypeTest<AstScInt>(const AstNode* nodep) { return nodep->type() == VNType::atScInt; }
template<> inline bool AstNode::privateTypeTest<AstScope>(const AstNode* nodep) { return nodep->type() == VNType::atScope; }
template<> inline bool AstNode::privateTypeTest<AstScopeName>(const AstNode* nodep) { return nodep->type() == VNType::atScopeName; }
template<> inline bool AstNode::privateTypeTest<AstSel>(const AstNode* nodep) { return nodep->type() == VNType::atSel; }
template<> inline bool AstNode::privateTypeTest<AstSelBit>(const AstNode* nodep) { return nodep->type() == VNType::atSelBit; }
template<> inline bool AstNode::privateTypeTest<AstSelExtract>(const AstNode* nodep) { return nodep->type() == VNType::atSelExtract; }
template<> inline bool AstNode::privateTypeTest<AstSelLoopVars>(const AstNode* nodep) { return nodep->type() == VNType::atSelLoopVars; }
template<> inline bool AstNode::privateTypeTest<AstSelMinus>(const AstNode* nodep) { return nodep->type() == VNType::atSelMinus; }
template<> inline bool AstNode::privateTypeTest<AstSelPlus>(const AstNode* nodep) { return nodep->type() == VNType::atSelPlus; }
template<> inline bool AstNode::privateTypeTest<AstSenItem>(const AstNode* nodep) { return nodep->type() == VNType::atSenItem; }
template<> inline bool AstNode::privateTypeTest<AstSenTree>(const AstNode* nodep) { return nodep->type() == VNType::atSenTree; }
template<> inline bool AstNode::privateTypeTest<AstSetAssoc>(const AstNode* nodep) { return nodep->type() == VNType::atSetAssoc; }
template<> inline bool AstNode::privateTypeTest<AstSetWildcard>(const AstNode* nodep) { return nodep->type() == VNType::atSetWildcard; }
template<> inline bool AstNode::privateTypeTest<AstShiftL>(const AstNode* nodep) { return nodep->type() == VNType::atShiftL; }
template<> inline bool AstNode::privateTypeTest<AstShiftLOvr>(const AstNode* nodep) { return nodep->type() == VNType::atShiftLOvr; }
template<> inline bool AstNode::privateTypeTest<AstShiftR>(const AstNode* nodep) { return nodep->type() == VNType::atShiftR; }
template<> inline bool AstNode::privateTypeTest<AstShiftROvr>(const AstNode* nodep) { return nodep->type() == VNType::atShiftROvr; }
template<> inline bool AstNode::privateTypeTest<AstShiftRS>(const AstNode* nodep) { return nodep->type() == VNType::atShiftRS; }
template<> inline bool AstNode::privateTypeTest<AstShiftRSOvr>(const AstNode* nodep) { return nodep->type() == VNType::atShiftRSOvr; }
template<> inline bool AstNode::privateTypeTest<AstSigned>(const AstNode* nodep) { return nodep->type() == VNType::atSigned; }
template<> inline bool AstNode::privateTypeTest<AstSinD>(const AstNode* nodep) { return nodep->type() == VNType::atSinD; }
template<> inline bool AstNode::privateTypeTest<AstSinhD>(const AstNode* nodep) { return nodep->type() == VNType::atSinhD; }
template<> inline bool AstNode::privateTypeTest<AstSliceSel>(const AstNode* nodep) { return nodep->type() == VNType::atSliceSel; }
template<> inline bool AstNode::privateTypeTest<AstSplitPlaceholder>(const AstNode* nodep) { return nodep->type() == VNType::atSplitPlaceholder; }
template<> inline bool AstNode::privateTypeTest<AstSqrtD>(const AstNode* nodep) { return nodep->type() == VNType::atSqrtD; }
template<> inline bool AstNode::privateTypeTest<AstStable>(const AstNode* nodep) { return nodep->type() == VNType::atStable; }
template<> inline bool AstNode::privateTypeTest<AstStackTraceF>(const AstNode* nodep) { return nodep->type() == VNType::atStackTraceF; }
template<> inline bool AstNode::privateTypeTest<AstStackTraceT>(const AstNode* nodep) { return nodep->type() == VNType::atStackTraceT; }
template<> inline bool AstNode::privateTypeTest<AstStmtExpr>(const AstNode* nodep) { return nodep->type() == VNType::atStmtExpr; }
template<> inline bool AstNode::privateTypeTest<AstStop>(const AstNode* nodep) { return nodep->type() == VNType::atStop; }
template<> inline bool AstNode::privateTypeTest<AstStreamDType>(const AstNode* nodep) { return nodep->type() == VNType::atStreamDType; }
template<> inline bool AstNode::privateTypeTest<AstStreamL>(const AstNode* nodep) { return nodep->type() == VNType::atStreamL; }
template<> inline bool AstNode::privateTypeTest<AstStreamR>(const AstNode* nodep) { return nodep->type() == VNType::atStreamR; }
template<> inline bool AstNode::privateTypeTest<AstStrengthSpec>(const AstNode* nodep) { return nodep->type() == VNType::atStrengthSpec; }
template<> inline bool AstNode::privateTypeTest<AstStructDType>(const AstNode* nodep) { return nodep->type() == VNType::atStructDType; }
template<> inline bool AstNode::privateTypeTest<AstStructSel>(const AstNode* nodep) { return nodep->type() == VNType::atStructSel; }
template<> inline bool AstNode::privateTypeTest<AstSub>(const AstNode* nodep) { return nodep->type() == VNType::atSub; }
template<> inline bool AstNode::privateTypeTest<AstSubD>(const AstNode* nodep) { return nodep->type() == VNType::atSubD; }
template<> inline bool AstNode::privateTypeTest<AstSubstrN>(const AstNode* nodep) { return nodep->type() == VNType::atSubstrN; }
template<> inline bool AstNode::privateTypeTest<AstSysFuncAsTask>(const AstNode* nodep) { return nodep->type() == VNType::atSysFuncAsTask; }
template<> inline bool AstNode::privateTypeTest<AstSysIgnore>(const AstNode* nodep) { return nodep->type() == VNType::atSysIgnore; }
template<> inline bool AstNode::privateTypeTest<AstSystemF>(const AstNode* nodep) { return nodep->type() == VNType::atSystemF; }
template<> inline bool AstNode::privateTypeTest<AstSystemT>(const AstNode* nodep) { return nodep->type() == VNType::atSystemT; }
template<> inline bool AstNode::privateTypeTest<AstTanD>(const AstNode* nodep) { return nodep->type() == VNType::atTanD; }
template<> inline bool AstNode::privateTypeTest<AstTanhD>(const AstNode* nodep) { return nodep->type() == VNType::atTanhD; }
template<> inline bool AstNode::privateTypeTest<AstTask>(const AstNode* nodep) { return nodep->type() == VNType::atTask; }
template<> inline bool AstNode::privateTypeTest<AstTaskRef>(const AstNode* nodep) { return nodep->type() == VNType::atTaskRef; }
template<> inline bool AstNode::privateTypeTest<AstTestPlusArgs>(const AstNode* nodep) { return nodep->type() == VNType::atTestPlusArgs; }
template<> inline bool AstNode::privateTypeTest<AstText>(const AstNode* nodep) { return nodep->type() == VNType::atText; }
template<> inline bool AstNode::privateTypeTest<AstTextBlock>(const AstNode* nodep) { return nodep->type() == VNType::atTextBlock; }
template<> inline bool AstNode::privateTypeTest<AstThisRef>(const AstNode* nodep) { return nodep->type() == VNType::atThisRef; }
template<> inline bool AstNode::privateTypeTest<AstTime>(const AstNode* nodep) { return nodep->type() == VNType::atTime; }
template<> inline bool AstNode::privateTypeTest<AstTimeD>(const AstNode* nodep) { return nodep->type() == VNType::atTimeD; }
template<> inline bool AstNode::privateTypeTest<AstTimeFormat>(const AstNode* nodep) { return nodep->type() == VNType::atTimeFormat; }
template<> inline bool AstNode::privateTypeTest<AstTimeImport>(const AstNode* nodep) { return nodep->type() == VNType::atTimeImport; }
template<> inline bool AstNode::privateTypeTest<AstTimePrecision>(const AstNode* nodep) { return nodep->type() == VNType::atTimePrecision; }
template<> inline bool AstNode::privateTypeTest<AstTimeUnit>(const AstNode* nodep) { return nodep->type() == VNType::atTimeUnit; }
template<> inline bool AstNode::privateTypeTest<AstToLowerN>(const AstNode* nodep) { return nodep->type() == VNType::atToLowerN; }
template<> inline bool AstNode::privateTypeTest<AstToUpperN>(const AstNode* nodep) { return nodep->type() == VNType::atToUpperN; }
template<> inline bool AstNode::privateTypeTest<AstTopScope>(const AstNode* nodep) { return nodep->type() == VNType::atTopScope; }
template<> inline bool AstNode::privateTypeTest<AstTraceDecl>(const AstNode* nodep) { return nodep->type() == VNType::atTraceDecl; }
template<> inline bool AstNode::privateTypeTest<AstTraceInc>(const AstNode* nodep) { return nodep->type() == VNType::atTraceInc; }
template<> inline bool AstNode::privateTypeTest<AstTracePopPrefix>(const AstNode* nodep) { return nodep->type() == VNType::atTracePopPrefix; }
template<> inline bool AstNode::privateTypeTest<AstTracePushPrefix>(const AstNode* nodep) { return nodep->type() == VNType::atTracePushPrefix; }
template<> inline bool AstNode::privateTypeTest<AstTypeTable>(const AstNode* nodep) { return nodep->type() == VNType::atTypeTable; }
template<> inline bool AstNode::privateTypeTest<AstTypedef>(const AstNode* nodep) { return nodep->type() == VNType::atTypedef; }
template<> inline bool AstNode::privateTypeTest<AstTypedefFwd>(const AstNode* nodep) { return nodep->type() == VNType::atTypedefFwd; }
template<> inline bool AstNode::privateTypeTest<AstUCFunc>(const AstNode* nodep) { return nodep->type() == VNType::atUCFunc; }
template<> inline bool AstNode::privateTypeTest<AstUCStmt>(const AstNode* nodep) { return nodep->type() == VNType::atUCStmt; }
template<> inline bool AstNode::privateTypeTest<AstURandomRange>(const AstNode* nodep) { return nodep->type() == VNType::atURandomRange; }
template<> inline bool AstNode::privateTypeTest<AstUdpTable>(const AstNode* nodep) { return nodep->type() == VNType::atUdpTable; }
template<> inline bool AstNode::privateTypeTest<AstUdpTableLine>(const AstNode* nodep) { return nodep->type() == VNType::atUdpTableLine; }
template<> inline bool AstNode::privateTypeTest<AstUnbounded>(const AstNode* nodep) { return nodep->type() == VNType::atUnbounded; }
template<> inline bool AstNode::privateTypeTest<AstUnionDType>(const AstNode* nodep) { return nodep->type() == VNType::atUnionDType; }
template<> inline bool AstNode::privateTypeTest<AstUnlinkedRef>(const AstNode* nodep) { return nodep->type() == VNType::atUnlinkedRef; }
template<> inline bool AstNode::privateTypeTest<AstUnpackArrayDType>(const AstNode* nodep) { return nodep->type() == VNType::atUnpackArrayDType; }
template<> inline bool AstNode::privateTypeTest<AstUnsigned>(const AstNode* nodep) { return nodep->type() == VNType::atUnsigned; }
template<> inline bool AstNode::privateTypeTest<AstUnsizedArrayDType>(const AstNode* nodep) { return nodep->type() == VNType::atUnsizedArrayDType; }
template<> inline bool AstNode::privateTypeTest<AstUnsizedRange>(const AstNode* nodep) { return nodep->type() == VNType::atUnsizedRange; }
template<> inline bool AstNode::privateTypeTest<AstVFile>(const AstNode* nodep) { return nodep->type() == VNType::atVFile; }
template<> inline bool AstNode::privateTypeTest<AstValuePlusArgs>(const AstNode* nodep) { return nodep->type() == VNType::atValuePlusArgs; }
template<> inline bool AstNode::privateTypeTest<AstVar>(const AstNode* nodep) { return nodep->type() == VNType::atVar; }
template<> inline bool AstNode::privateTypeTest<AstVarRef>(const AstNode* nodep) { return nodep->type() == VNType::atVarRef; }
template<> inline bool AstNode::privateTypeTest<AstVarScope>(const AstNode* nodep) { return nodep->type() == VNType::atVarScope; }
template<> inline bool AstNode::privateTypeTest<AstVarXRef>(const AstNode* nodep) { return nodep->type() == VNType::atVarXRef; }
template<> inline bool AstNode::privateTypeTest<AstVoidDType>(const AstNode* nodep) { return nodep->type() == VNType::atVoidDType; }
template<> inline bool AstNode::privateTypeTest<AstWait>(const AstNode* nodep) { return nodep->type() == VNType::atWait; }
template<> inline bool AstNode::privateTypeTest<AstWaitFork>(const AstNode* nodep) { return nodep->type() == VNType::atWaitFork; }
template<> inline bool AstNode::privateTypeTest<AstWhile>(const AstNode* nodep) { return nodep->type() == VNType::atWhile; }
template<> inline bool AstNode::privateTypeTest<AstWildcardArrayDType>(const AstNode* nodep) { return nodep->type() == VNType::atWildcardArrayDType; }
template<> inline bool AstNode::privateTypeTest<AstWildcardRange>(const AstNode* nodep) { return nodep->type() == VNType::atWildcardRange; }
template<> inline bool AstNode::privateTypeTest<AstWildcardSel>(const AstNode* nodep) { return nodep->type() == VNType::atWildcardSel; }
template<> inline bool AstNode::privateTypeTest<AstWith>(const AstNode* nodep) { return nodep->type() == VNType::atWith; }
template<> inline bool AstNode::privateTypeTest<AstWithParse>(const AstNode* nodep) { return nodep->type() == VNType::atWithParse; }
template<> inline bool AstNode::privateTypeTest<AstWordSel>(const AstNode* nodep) { return nodep->type() == VNType::atWordSel; }
template<> inline bool AstNode::privateTypeTest<AstWriteMem>(const AstNode* nodep) { return nodep->type() == VNType::atWriteMem; }
template<> inline bool AstNode::privateTypeTest<AstXor>(const AstNode* nodep) { return nodep->type() == VNType::atXor; }
